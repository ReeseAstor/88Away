{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\n88Away is an AI-powered collaborative writing platform designed to assist authors with project management, creative inspiration, and content refinement. It integrates specialized AI personas (Muse, Editor, Coach) to support various stages of the writing process, from idea generation to final edits. The platform also offers robust story bible management for characters, worldbuilding, and timelines, alongside real-time collaboration features with role-based access control (Owner, Editor, Reviewer, Reader). Business-wise, it targets the creative writing market with a subscription model (Stripe integration) and provides analytics for tracking progress and team contributions.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend\n- **Frameworks**: React with TypeScript for type safety.\n- **Routing**: Wouter for client-side navigation.\n- **State Management**: TanStack Query for server state and caching, Zustand for global client-side UI state.\n- **UI/UX**: Shadcn/UI and Radix for components, Tailwind CSS for styling with custom design tokens.\n- **Editor**: TipTap rich text editor for document creation with an extensible plugin architecture.\n\n## Backend\n- **Framework**: Express.js with TypeScript for RESTful API services.\n- **Database**: Neon (serverless PostgreSQL) with Drizzle ORM for type-safe database interactions.\n- **AI Integration**: OpenAI's GPT-5 model powers three distinct AI personas (Muse, Editor, Coach) with safety filtering and structured JSON outputs.\n\n## Authentication & Authorization\n- **Authentication**: Replit Auth (OIDC-based) for secure session management.\n- **Authorization**: Role-Based Access Control with Owner, Editor, Reviewer, and Reader permission levels for collaborative projects.\n\n## AI System\n- **Personas**: Three distinct AI roles (Muse for creative, Editor for polishing, Coach for planning) driven by specialized prompt engineering.\n- **Safety**: Content filtering integrated to ensure appropriate content generation.\n- **Context Management**: AI models leverage project-specific data (characters, worldbuilding, timeline) for relevant suggestions.\n\n## Data Management\n- **Schema**: Shared TypeScript schemas between frontend and backend via Drizzle ORM.\n- **Versioning**: Full document version history tracking for collaborative editing.\n- **Structure**: Normalized relational database design with proper foreign key relationships.\n- **Migrations**: Drizzle Kit for database schema evolution.\n\n## Key Features & Design Decisions\n- **Word Count**: Consistent client/server word count calculation, including HTML stripping and entity decoding.\n- **Onboarding**: Database-backed, multi-stage onboarding flow with welcome modals and a trackable checklist.\n- **Writing Progress Dashboard**: Analyzes writing streaks, weekly/monthly word counts, and identifies productive days.\n- **Character Database**: Advanced organization with metadata (role, importance, tags), filtering, sorting, and view modes.\n- **Timeline Visualization**: Drag-and-drop event management with `orderIndex` for persistence, cross-year dragging, and optimistic UI updates.\n- **Legal Pages**: Publicly accessible Privacy Policy, Terms & Conditions, and Cookie Policy pages integrated into the application footer.\n- **Notifications System**: Real-time, collaborative notifications for project activities, with recipient-specific delivery and read status tracking.\n- **Activity Feed**: Comprehensive project activity logging visible to all collaborators, distinct from personal notifications.\n- **Global Search**: Multi-table search functionality across documents, characters, worldbuilding, and timeline events with relevance ranking and access control.\n- **Prompt Library**: Professional writing prompt library with 1008+ curated prompts across 10 categories (Character Development, Plot & Story Structure, Dialogue, Scene Writing, Worldbuilding, Editing, Genre-Specific, Ghostwriting, Marketing, Publishing Prep). Features search with debouncing, multi-dimensional filtering (category, persona, role, featured), favorites system, usage tracking, and one-click AI integration via Zustand store that pre-fills AI modal with prompt content and appropriate persona.\n\n# External Dependencies\n\n- **Neon Database**: Serverless PostgreSQL database hosting.\n- **OpenAI API**: Provides GPT-5 models for AI content generation.\n- **Stripe**: Handles payment processing and subscription management.\n- **Replit Auth**: OIDC-based authentication service.\n- **Radix UI**: Foundational accessible component primitives.\n- **Tailwind CSS**: Utility-first CSS framework.\n- **Lucide React**: Icon library.\n- **Vite**: Frontend build tool.\n- **Drizzle Kit**: Database migration and introspection.\n- **TypeScript**: Language for static type checking.","size_bytes":4823},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2755},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { WebSocketServer } from 'ws';\nimport { parse } from 'url';\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { CollaborationService } from \"./collaboration\";\nimport { storage } from \"./storage\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    console.error('Error handled:', err);\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n    \n    // Set up WebSocket server for collaboration on a specific path\n    const wss = new WebSocketServer({ \n      server,\n      path: '/ws/collaboration'\n    });\n    const collaborationService = CollaborationService.getInstance();\n    \n    wss.on('connection', async (ws, req) => {\n      try {\n        // Parse query parameters from the URL\n        const fullUrl = `http://localhost${req.url}`;\n        const url = parse(fullUrl, true);\n        const documentId = url.query.documentId as string;\n        const projectId = url.query.projectId as string;\n        \n        if (!documentId || !projectId) {\n          ws.send(JSON.stringify({ type: 'error', message: 'Missing required parameters' }));\n          ws.close();\n          return;\n        }\n        \n        // Parse cookies from request headers\n        const cookieHeader = req.headers.cookie;\n        if (!cookieHeader) {\n          ws.send(JSON.stringify({ type: 'error', message: 'No session cookie found' }));\n          ws.close();\n          return;\n        }\n        \n        // Parse cookie header to get session ID\n        const cookies: Record<string, string> = {};\n        cookieHeader.split(';').forEach(cookie => {\n          const [name, ...rest] = cookie.trim().split('=');\n          cookies[name] = rest.join('=');\n        });\n        \n        const sessionCookie = cookies['connect.sid'];\n        if (!sessionCookie) {\n          ws.send(JSON.stringify({ type: 'error', message: 'Session cookie not found' }));\n          ws.close();\n          return;\n        }\n        \n        // URL-decode the cookie and extract session ID from signed cookie (format: s:sessionId.signature)\n        let sessionId: string;\n        try {\n          const decodedCookie = decodeURIComponent(sessionCookie);\n          if (decodedCookie.startsWith('s:')) {\n            // Signed cookie - remove 's:' prefix and keep the full signature intact\n            sessionId = decodedCookie.slice(2);\n          } else {\n            // Unsigned cookie (shouldn't happen with express-session default config)\n            sessionId = decodedCookie;\n          }\n        } catch (error) {\n          ws.send(JSON.stringify({ type: 'error', message: 'Failed to decode session cookie' }));\n          ws.close();\n          return;\n        }\n        \n        // Verify session and get user\n        const session = await storage.getSession(sessionId);\n        if (!session || !session.sess || !session.sess.user) {\n          ws.send(JSON.stringify({ type: 'error', message: 'Invalid session' }));\n          ws.close();\n          return;\n        }\n        \n        const user = await storage.getUser(session.sess.user.claims.sub);\n        if (!user) {\n          ws.send(JSON.stringify({ type: 'error', message: 'User not found' }));\n          ws.close();\n          return;\n        }\n        \n        // Handle connection with collaboration service\n        await collaborationService.handleConnection(ws, user, documentId, projectId);\n        \n      } catch (error) {\n        console.error('WebSocket connection error:', error);\n        ws.send(JSON.stringify({ type: 'error', message: 'Failed to establish connection' }));\n        ws.close();\n      }\n    });\n    \n    // Cleanup on shutdown\n    process.on('SIGTERM', () => {\n      collaborationService.destroy();\n      wss.close();\n    });\n  });\n})();\n","size_bytes":5572},"server/openai.ts":{"content":"import OpenAI from \"openai\";\nimport type { IStorage } from \"./storage\";\nimport type { Character, WorldbuildingEntry, TimelineEvent } from \"@shared/schema\";\n\n// Using GPT-4 for advanced analysis features\nlet openai: OpenAI | null = null;\n\n// Available models in order of preference  \nconst AVAILABLE_MODELS = [\n  'gpt-4-turbo-preview',\n  'gpt-4',  \n  'gpt-3.5-turbo'\n];\n\nlet workingModel: string | null = null;\n\n// AI usage limits by subscription plan\nexport const AI_LIMITS = {\n  free: { monthly_generations: 20 },\n  starter: { monthly_generations: 100 },\n  professional: { monthly_generations: 500 },\n  enterprise: { monthly_generations: -1 } // unlimited\n};\n\nfunction getOpenAIClient(): OpenAI {\n  if (!openai) {\n    if (!process.env.OPENAI_API_KEY) {\n      throw new Error(\"OpenAI API key is not configured. Please set the OPENAI_API_KEY environment variable.\");\n    }\n    openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n  }\n  return openai;\n}\n\nexport async function fetchProjectContext(projectId: string, storage: IStorage): Promise<ProjectContext> {\n  try {\n    const [characters, worldbuilding, timeline] = await Promise.all([\n      storage.getProjectCharacters(projectId),\n      storage.getProjectWorldbuilding(projectId),\n      storage.getProjectTimeline(projectId)\n    ]);\n\n    // Limit context to prevent token overflow\n    const limitedCharacters = characters.slice(0, 10);\n    const limitedWorldbuilding = worldbuilding.slice(0, 5);\n    const limitedTimeline = timeline.slice(0, 8);\n\n    return {\n      characters: limitedCharacters,\n      worldbuilding: limitedWorldbuilding,\n      timeline: limitedTimeline\n    };\n  } catch (error) {\n    console.error(\"Error fetching project context:\", error);\n    return {\n      characters: [],\n      worldbuilding: [],\n      timeline: []\n    };\n  }\n}\n\nexport interface ProjectContext {\n  characters: Character[];\n  worldbuilding: WorldbuildingEntry[];\n  timeline: TimelineEvent[];\n}\n\nexport interface AiRequest {\n  intent: string;\n  persona: \"muse\" | \"editor\" | \"coach\";\n  project_id: string;\n  context_refs?: string[];\n  project_context?: ProjectContext;\n  params: {\n    max_tokens?: number;\n    deterministic?: boolean;\n    style_profile_id?: string;\n    placeholders?: string[];\n  };\n}\n\nexport interface AiResponse {\n  request_id: string;\n  persona: string;\n  output_id: string;\n  content_type: \"scene\" | \"outline\" | \"edit\";\n  content: string | object;\n  metadata: {\n    model: string;\n    tokens_in: number;\n    tokens_out: number;\n    safety_flags: string[];\n  };\n}\n\nconst SAFETY_PROMPT = `You must not generate explicit sexual content, graphic descriptions of sexual acts, or non-consensual/exploitative content. All characters must be 18+. For mature themes, use implied, emotionally-focused language only. No graphic violence or gore. Flag any safety violation with: SAFETY_VIOLATION_{reason}`;\n\nconst PERSONA_PROMPTS = {\n  muse: `You are Muse, a creative writing assistant specializing in evocative, sensory-rich scenes.\n\nCONTEXT USAGE (Critical):\n- Use provided character details (personality, background, voice, relationships) for authentic characterization\n- Incorporate worldbuilding elements (settings, magic systems, cultures, rules) accurately\n- Maintain consistency with timeline events and established story facts\n- Reference character relationships and history when relevant\n\nWRITING STYLE:\n- Create vivid sensory experiences across all five senses (sight, sound, smell, touch, taste)\n- Show emotion through action, dialogue, body language, and internal reactions\n- Use strong character voice that matches established personality traits\n- Build atmospheric tension through environmental details and pacing\n- Vary sentence structure and rhythm to create narrative flow\n\nSTRUCTURE:\n- Open with a compelling image, action, or emotional moment\n- Progress through a clear emotional/narrative arc within the scene\n- Build tension or develop character relationships organically\n- End with a hook that propels the story forward (question, revelation, or tension)\n\nSAFETY:\n- All characters 18+, no explicit sexual content or graphic violence\n- For intimate scenes: implied, emotionally-focused language only\n- Flag violations with: SAFETY_VIOLATION_{reason}\n\nOUTPUT: Plain text scene, no formatting tags or meta-commentary.`,\n  \n  editor: `You are Editor, a professional manuscript editor focused on clarity and consistency.\n\nCONTEXT CHECKING (Critical):\n- Verify character consistency: names, physical descriptions, personality traits, backgrounds\n- Check against worldbuilding rules: magic systems, world logic, established lore\n- Ensure timeline consistency: character ages, event sequences, historical references\n- Validate relationship dynamics match established character connections\n\nEDITING APPROACH:\n- Improve clarity, grammar, sentence flow, and word choice\n- Preserve author's unique voice, style, and intentional phrasing\n- Fix technical errors without over-sanitizing creative language\n- Do not invent new plot events or change story facts\n- Maintain the author's tone and narrative approach\n\nOUTPUT FORMAT (JSON):\n{\n  \"edited_text\": \"full corrected text\",\n  \"diff\": [\n    {\n      \"original_span\": \"exact original text\",\n      \"edited_span\": \"corrected text\",\n      \"change_type\": \"grammar|clarity|consistency|flow\",\n      \"reason\": \"brief explanation\"\n    }\n  ],\n  \"rationale\": \"overall editing philosophy and major changes explained\",\n  \"consistency_flags\": [\"any character/world/timeline inconsistencies found\"]\n}\n\nIf contradictions with project context detected, list in consistency_flags.`,\n  \n  coach: `You are Coach, a story structure specialist helping writers plan and organize their narratives.\n\nCONTEXT INTEGRATION:\n- Incorporate character arcs using provided character details\n- Weave in worldbuilding elements (settings, magic systems, cultures)\n- Align with timeline events and established story facts\n\nCORE FUNCTION - STORY OUTLINES:\nBy default, produce detailed story outlines. Return JSON in this format:\n\n{\n  \"structure_type\": \"three-act\" | \"five-act\",\n  \"acts\": [{\n    \"act_number\": number,\n    \"title\": string,\n    \"purpose\": string,\n    \"beats\": [{\n      \"beat_number\": number,\n      \"title\": string,\n      \"purpose\": string,\n      \"chapter_range\": string,\n      \"key_events\": [string],\n      \"character_focus\": [string],\n      \"emotional_arc\": string,\n      \"tension_level\": \"low\" | \"medium\" | \"high\"\n    }]\n  }],\n  \"pacing_notes\": string,\n  \"key_turning_points\": [string]\n}\n\nALTERNATIVE STRUCTURES:\nIf explicitly asked for a checklist or beat sheet, adapt your output accordingly while maintaining JSON format.\n\nQUALITY GUIDELINES:\n- Clear story purpose for each element\n- Specific enough to guide writing\n- Concrete emotional hooks\n- Cause-and-effect relationships\n- Balanced pacing with tension curves\n\nSAFETY:\n- Age-appropriate content (18+)\n- No explicit or problematic material\n\nOUTPUT: Valid JSON, defaulting to the outline structure above unless explicitly requested otherwise.`\n};\n\nexport async function generateContent(request: AiRequest, userPrompt: string): Promise<AiResponse> {\n  const requestId = `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  const outputId = `out_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  \n  const systemPrompt = `${SAFETY_PROMPT}\\n\\n${PERSONA_PROMPTS[request.persona]}`;\n  \n  try {\n    const client = getOpenAIClient();\n    // Try available models with fallback\n    let response;\n    let modelUsed = workingModel || AVAILABLE_MODELS[0];\n    \n    for (const model of (workingModel ? [workingModel] : AVAILABLE_MODELS)) {\n      try {\n        console.log(`Attempting to use model: ${model}`);\n        response = await client.chat.completions.create({\n          model: model,\n          messages: [\n            { role: \"system\", content: systemPrompt },\n            { role: \"user\", content: userPrompt }\n          ],\n          max_tokens: request.params.max_tokens || 800,\n          ...(request.persona === \"editor\" || request.persona === \"coach\" ? {\n            response_format: { type: \"json_object\" }\n          } : {})\n        });\n        modelUsed = model;\n        workingModel = model; // Remember the working model\n        console.log(`Successfully used model: ${model}`);\n        break;\n      } catch (modelError) {\n        console.error(`Failed with model ${model}:`, modelError);\n        if (model === AVAILABLE_MODELS[AVAILABLE_MODELS.length - 1]) {\n          throw modelError; // Re-throw if all models failed\n        }\n      }\n    }\n    \n    if (!response) {\n      throw new Error('All AI models failed');\n    }\n\n    const content = response.choices[0].message.content || \"\";\n    let parsedContent: string | object = content;\n    let contentType: \"scene\" | \"outline\" | \"edit\" = \"scene\";\n\n    // Parse JSON responses for editor and coach\n    if (request.persona === \"editor\") {\n      try {\n        parsedContent = JSON.parse(content);\n        contentType = \"edit\";\n      } catch (e) {\n        // Fallback to plain text if JSON parsing fails\n        parsedContent = content;\n      }\n    } else if (request.persona === \"coach\") {\n      try {\n        parsedContent = JSON.parse(content);\n        contentType = \"outline\";\n      } catch (e) {\n        // Fallback to plain text if JSON parsing fails\n        parsedContent = content;\n      }\n    }\n\n    // Check for safety violations\n    const safetyFlags: string[] = [];\n    if (content.includes(\"SAFETY_VIOLATION_\")) {\n      const matches = content.match(/SAFETY_VIOLATION_(\\w+)/g);\n      if (matches) {\n        safetyFlags.push(...matches);\n      }\n    }\n\n    return {\n      request_id: requestId,\n      persona: request.persona,\n      output_id: outputId,\n      content_type: contentType,\n      content: parsedContent,\n      metadata: {\n        model: modelUsed,\n        tokens_in: response.usage?.prompt_tokens || 0,\n        tokens_out: response.usage?.completion_tokens || 0,\n        safety_flags: safetyFlags\n      }\n    };\n  } catch (error) {\n    throw new Error(`AI generation failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}\n\nexport function buildMusePrompt(data: {\n  projectTitle: string;\n  sceneIntent: string;\n  setting: string;\n  characters: Array<{ name: string; status: string }>;\n  mood: { tension: number; intimacy: number; pacing: string };\n  lastSceneSummary?: string;\n  targetLength: string;\n  projectContext?: ProjectContext;\n}): string {\n  let prompt = `Project: ${data.projectTitle}\\n\\n`;\n  \n  // Add character context if available\n  if (data.projectContext?.characters && data.projectContext.characters.length > 0) {\n    prompt += `Characters in this project:\\n`;\n    data.projectContext.characters.forEach(char => {\n      prompt += `- ${char.name}: ${char.description || 'No description'}`;\n      if (char.personality) prompt += ` | Personality: ${char.personality}`;\n      if (char.background) prompt += ` | Background: ${char.background}`;\n      prompt += '\\n';\n    });\n    prompt += '\\n';\n  }\n  \n  // Add worldbuilding context if available\n  if (data.projectContext?.worldbuilding && data.projectContext.worldbuilding.length > 0) {\n    prompt += `Worldbuilding:\\n`;\n    data.projectContext.worldbuilding.forEach(wb => {\n      prompt += `- ${wb.type}: ${wb.title} - ${wb.description || 'No description'}\\n`;\n    });\n    prompt += '\\n';\n  }\n  \n  // Add timeline context if available\n  if (data.projectContext?.timeline && data.projectContext.timeline.length > 0) {\n    prompt += `Timeline Key Events:\\n`;\n    data.projectContext.timeline.forEach(event => {\n      prompt += `- ${event.date || 'Unknown date'}: ${event.title} - ${event.description || 'No description'}\\n`;\n    });\n    prompt += '\\n';\n  }\n  \n  // Add scene-specific context\n  const charactersStr = data.characters.map(c => `${c.name}:${c.status}`).join(', ');\n  prompt += `Scene intent: ${data.sceneIntent}\\n`;\n  prompt += `Setting: ${data.setting}\\n`;\n  prompt += `Characters in scene: [${charactersStr}]\\n`;\n  prompt += `Mood: tension=${data.mood.tension}, intimacy=${data.mood.intimacy}, pacing=${data.mood.pacing}\\n`;\n  \n  if (data.lastSceneSummary) {\n    prompt += `Previous scene summary: \"${data.lastSceneSummary}\"\\n`;\n  }\n  \n  prompt += `Length target: ${data.targetLength}`;\n  \n  return prompt;\n}\n\nexport function buildEditorPrompt(data: {\n  originalText: string;\n  goals: { concise: boolean; preserve_voice: boolean; remove_passive: boolean };\n  projectContext?: ProjectContext;\n}): string {\n  let prompt = '';\n  \n  // Add character context for consistency checking\n  if (data.projectContext?.characters && data.projectContext.characters.length > 0) {\n    prompt += `Character reference for consistency:\\n`;\n    data.projectContext.characters.forEach(char => {\n      prompt += `- ${char.name}: ${char.description || 'No description'}\\n`;\n    });\n    prompt += '\\n';\n  }\n  \n  const goalsStr = Object.entries(data.goals)\n    .filter(([_, value]) => value)\n    .map(([key, _]) => key)\n    .join(', ');\n    \n  prompt += `Task: Edit paragraph for clarity. Original: \"${data.originalText}\". Goals: ${goalsStr}.`;\n  \n  return prompt;\n}\n\nexport function buildCoachPrompt(data: {\n  title: string;\n  premise: string;\n  targetLength: string;\n  tone: string;\n  mustHaveBeats?: string[];\n  constraints?: string;\n  projectContext?: ProjectContext;\n}): string {\n  let prompt = `Project: ${data.title}\\nPremise: \"${data.premise}\"\\n\\n`;\n  \n  // Add character context\n  if (data.projectContext?.characters && data.projectContext.characters.length > 0) {\n    prompt += `Main Characters:\\n`;\n    data.projectContext.characters.forEach(char => {\n      prompt += `- ${char.name}: ${char.description || 'No description'}`;\n      if (char.personality) prompt += ` | ${char.personality}`;\n      prompt += '\\n';\n    });\n    prompt += '\\n';\n  }\n  \n  // Add worldbuilding context\n  if (data.projectContext?.worldbuilding && data.projectContext.worldbuilding.length > 0) {\n    prompt += `World Elements:\\n`;\n    data.projectContext.worldbuilding.forEach(wb => {\n      prompt += `- ${wb.type}: ${wb.title}\\n`;\n    });\n    prompt += '\\n';\n  }\n  \n  // Add timeline context for structure\n  if (data.projectContext?.timeline && data.projectContext.timeline.length > 0) {\n    prompt += `Key Timeline Events:\\n`;\n    data.projectContext.timeline.forEach(event => {\n      prompt += `- ${event.title}\\n`;\n    });\n    prompt += '\\n';\n  }\n  \n  prompt += `Target length: ${data.targetLength}\\nTone: ${data.tone}\\n`;\n  \n  if (data.mustHaveBeats && data.mustHaveBeats.length > 0) {\n    prompt += `Must-have beats: [${data.mustHaveBeats.join(', ')}]\\n`;\n  }\n  \n  if (data.constraints) {\n    prompt += `Constraints: ${data.constraints}`;\n  }\n  \n  return prompt;\n}\n\n// Advanced Analysis Types\nexport interface StyleAnalysisRequest {\n  documents: Array<{ id: string; title: string; content: string }>;\n  projectContext?: string;\n}\n\nexport interface PlotConsistencyRequest {\n  documents: Array<{ id: string; title: string; content: string; orderIndex: number }>;\n  timeline: Array<{ title: string; date: string; description: string }>;\n  characters: Array<{ name: string; description: string }>;\n}\n\nexport interface CharacterDevelopmentRequest {\n  character: { name: string; description: string; background?: string };\n  documents: Array<{ id: string; title: string; content: string; orderIndex: number }>;\n}\n\nexport interface NarrativeFlowRequest {\n  documents: Array<{ id: string; title: string; content: string; orderIndex: number }>;\n  genre?: string;\n  targetPacing?: string;\n}\n\nexport interface AnalysisResult<T = any> {\n  success: boolean;\n  data: T;\n  recommendations: string[];\n  metadata: {\n    analysisType: string;\n    timestamp: Date;\n    documentsAnalyzed: number;\n    confidence: number;\n  };\n}\n\n// Helper function to try multiple models with fallback\nasync function createChatCompletionWithFallback(\n  messages: Array<{ role: 'system' | 'user' | 'assistant'; content: string }>,\n  options: {\n    response_format?: { type: 'json_object' };\n    max_tokens?: number;\n  } = {}\n) {\n  const client = getOpenAIClient();\n  const modelsToTry = workingModel ? [workingModel] : AVAILABLE_MODELS;\n  \n  for (const model of modelsToTry) {\n    try {\n      console.log(`[Analysis] Attempting to use model: ${model}`);\n      const response = await client.chat.completions.create({\n        model: model,\n        messages: messages,\n        ...options,\n        max_tokens: options.max_tokens || 1500\n      });\n      \n      // Remember the working model for future calls\n      if (!workingModel || workingModel !== model) {\n        workingModel = model;\n        console.log(`[Analysis] Successfully set working model: ${model}`);\n      }\n      \n      return { response, model };\n    } catch (error: any) {\n      console.error(`[Analysis] Failed with model ${model}:`, error?.message || error);\n      \n      // If it's the last model, throw the error\n      if (model === modelsToTry[modelsToTry.length - 1]) {\n        throw new Error(\n          `All AI models failed. Last error: ${error?.message || 'Unknown error'}. ` +\n          `Tried models: ${modelsToTry.join(', ')}`\n        );\n      }\n    }\n  }\n  \n  throw new Error('Failed to get AI response from any model');\n}\n\n// Style Analysis\nexport async function analyzeWritingStyle(request: StyleAnalysisRequest): Promise<AnalysisResult> {\n  const client = getOpenAIClient();\n  const combinedText = request.documents.map(d => d.content).join('\\n\\n');\n  \n  const systemPrompt = `You are an expert literary analyst. Analyze the writing style comprehensively and return a JSON object with detailed metrics and insights. Focus on: tone, voice consistency, reading level, sentence variety, vocabulary richness, and overall style consistency. Provide actionable recommendations.`;\n  \n  const userPrompt = `Analyze the writing style across these documents. Project context: \"${request.projectContext || 'General fiction'}\". \n  \n  Text samples: ${combinedText.substring(0, 15000)}\n  \n  Return JSON:\n  {\n    \"tone\": { \"primary\": string, \"variations\": string[], \"consistency\": number (0-100) },\n    \"voice\": { \"type\": string, \"consistency\": number (0-100), \"characteristics\": string[] },\n    \"readingLevel\": { \"grade\": number, \"complexity\": string, \"accessibility\": string },\n    \"sentenceVariety\": { \"average_length\": number, \"variation_score\": number (0-100), \"patterns\": string[] },\n    \"vocabulary\": { \"richness_score\": number (0-100), \"unique_words\": number, \"sophistication\": string },\n    \"style\": { \"genre_alignment\": number (0-100), \"distinctiveness\": number (0-100), \"strengths\": string[], \"weaknesses\": string[] },\n    \"pacing\": { \"overall\": string, \"variation\": string, \"effectiveness\": number (0-100) }\n  }`;\n  \n  try {\n    console.log('[Style Analysis] Text length:', combinedText.length);\n    console.log('[Style Analysis] Documents count:', request.documents.length);\n    \n    const { response, model } = await createChatCompletionWithFallback(\n      [\n        { role: \"system\", content: systemPrompt },\n        { role: \"user\", content: userPrompt }\n      ],\n      {\n        response_format: { type: \"json_object\" },\n        max_tokens: 1500\n      }\n    );\n    \n    console.log('[Style Analysis] Response received from model:', model);\n    console.log('[Style Analysis] Response content preview:', response.choices[0].message.content?.substring(0, 200));\n    \n    const content = response.choices[0].message.content;\n    if (!content) {\n      throw new Error('Empty response from AI model');\n    }\n    \n    const analysis = JSON.parse(content);\n    console.log('[Style Analysis] Parsed analysis keys:', Object.keys(analysis));\n    \n    const recommendations = [];\n    if (analysis.tone?.consistency < 70) {\n      recommendations.push(\"Consider maintaining a more consistent tone throughout your narrative\");\n    }\n    if (analysis.sentenceVariety?.variation_score < 60) {\n      recommendations.push(\"Vary your sentence structures to improve rhythm and flow\");\n    }\n    if (analysis.vocabulary?.richness_score < 50) {\n      recommendations.push(\"Expand your vocabulary usage to enrich the prose\");\n    }\n    if (analysis.style?.weaknesses?.length > 0) {\n      recommendations.push(`Address these style weaknesses: ${analysis.style.weaknesses.join(\", \")}`);\n    }\n    \n    return {\n      success: true,\n      data: analysis,\n      recommendations,\n      metadata: {\n        analysisType: \"style\",\n        timestamp: new Date(),\n        documentsAnalyzed: request.documents.length,\n        confidence: Math.min(95, 70 + (request.documents.length * 5))\n      }\n    };\n  } catch (error) {\n    throw new Error(`Style analysis failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}\n\n// Plot Consistency Analysis\nexport async function analyzePlotConsistency(request: PlotConsistencyRequest): Promise<AnalysisResult> {\n  const plotSummary = request.documents\n    .sort((a, b) => a.orderIndex - b.orderIndex)\n    .map(d => `Chapter ${d.orderIndex}: ${d.title}\\n${d.content.substring(0, 500)}`)\n    .join('\\n\\n');\n  \n  const systemPrompt = `You are a plot consistency expert. Analyze the narrative for plot holes, timeline inconsistencies, unresolved threads, and character consistency. Return detailed JSON analysis with specific examples and locations of issues.`;\n  \n  const userPrompt = `Analyze plot consistency across this narrative.\n  \n  Timeline Events: ${JSON.stringify(request.timeline.map(t => ({ date: t.date, event: t.title })))}\n  Characters: ${request.characters.map(c => c.name).join(', ')}\n  \n  Story Content: ${plotSummary}\n  \n  Return JSON:\n  {\n    \"plotHoles\": [{ \"description\": string, \"location\": string, \"severity\": \"minor\"|\"major\"|\"critical\", \"suggestion\": string }],\n    \"timelineIssues\": [{ \"description\": string, \"chapters\": string[], \"conflict\": string }],\n    \"unresolvedThreads\": [{ \"thread\": string, \"introduced\": string, \"status\": string, \"importance\": \"low\"|\"medium\"|\"high\" }],\n    \"characterInconsistencies\": [{ \"character\": string, \"issue\": string, \"locations\": string[] }],\n    \"overallConsistency\": number (0-100),\n    \"strongPoints\": string[],\n    \"criticalIssues\": string[]\n  }`;\n  \n  try {\n    console.log('[Plot Analysis] Documents count:', request.documents.length);\n    console.log('[Plot Analysis] Timeline events:', request.timeline.length);\n    console.log('[Plot Analysis] Characters:', request.characters.length);\n    \n    const { response, model } = await createChatCompletionWithFallback(\n      [\n        { role: \"system\", content: systemPrompt },\n        { role: \"user\", content: userPrompt }\n      ],\n      {\n        response_format: { type: \"json_object\" },\n        max_tokens: 2000\n      }\n    );\n    \n    console.log('[Plot Analysis] Response received from model:', model);\n    \n    const content = response.choices[0].message.content;\n    if (!content) {\n      throw new Error('Empty response from AI model');\n    }\n    \n    const analysis = JSON.parse(content);\n    \n    const recommendations = [];\n    if (analysis.plotHoles?.length > 0) {\n      const critical = analysis.plotHoles.filter((h: any) => h.severity === 'critical');\n      if (critical.length > 0) {\n        recommendations.push(`Address ${critical.length} critical plot hole(s) immediately`);\n      }\n    }\n    if (analysis.unresolvedThreads?.filter((t: any) => t.importance === 'high').length > 0) {\n      recommendations.push(\"Resolve high-importance story threads before conclusion\");\n    }\n    if (analysis.overallConsistency < 70) {\n      recommendations.push(\"Conduct a thorough continuity review to improve consistency\");\n    }\n    \n    return {\n      success: true,\n      data: analysis,\n      recommendations,\n      metadata: {\n        analysisType: \"plot_consistency\",\n        timestamp: new Date(),\n        documentsAnalyzed: request.documents.length,\n        confidence: Math.min(90, 65 + (request.documents.length * 3))\n      }\n    };\n  } catch (error) {\n    throw new Error(`Plot consistency analysis failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}\n\n// Character Development Analysis\nexport async function analyzeCharacterDevelopment(request: CharacterDevelopmentRequest): Promise<AnalysisResult> {\n  const characterAppearances = request.documents\n    .sort((a, b) => a.orderIndex - b.orderIndex)\n    .map(d => {\n      const mentions = d.content.match(new RegExp(request.character.name, 'gi'))?.length || 0;\n      return `Chapter ${d.orderIndex}: ${mentions} mentions\\nExcerpt: ${d.content.substring(0, 300)}`;\n    })\n    .join('\\n\\n');\n  \n  const systemPrompt = `You are a character development analyst. Track character arcs, growth, relationship evolution, and consistency. Identify key moments of change and areas needing development. Return comprehensive JSON analysis.`;\n  \n  const userPrompt = `Analyze the development of character \"${request.character.name}\".\n  \n  Character Profile: ${request.character.description}\n  Background: ${request.character.background || 'Not provided'}\n  \n  Story Appearances: ${characterAppearances}\n  \n  Return JSON:\n  {\n    \"arc\": { \n      \"type\": string, \n      \"startPoint\": string, \n      \"currentPoint\": string, \n      \"projected\": string,\n      \"completeness\": number (0-100)\n    },\n    \"growth\": {\n      \"areas\": [{ \"aspect\": string, \"change\": string, \"chapter\": string }],\n      \"overall_growth\": number (0-100),\n      \"believability\": number (0-100)\n    },\n    \"consistency\": {\n      \"score\": number (0-100),\n      \"inconsistencies\": [{ \"issue\": string, \"location\": string }]\n    },\n    \"relationships\": [{ \n      \"character\": string, \n      \"evolution\": string, \n      \"current_status\": string,\n      \"development_quality\": number (0-100)\n    }],\n    \"keyMoments\": [{ \"chapter\": string, \"moment\": string, \"significance\": string }],\n    \"presence\": {\n      \"distribution\": string,\n      \"screen_time\": \"insufficient\"|\"balanced\"|\"excessive\",\n      \"impact\": number (0-100)\n    },\n    \"recommendations\": string[]\n  }`;\n  \n  try {\n    console.log('[Character Analysis] Character:', request.character.name);\n    console.log('[Character Analysis] Documents count:', request.documents.length);\n    \n    const { response, model } = await createChatCompletionWithFallback(\n      [\n        { role: \"system\", content: systemPrompt },\n        { role: \"user\", content: userPrompt }\n      ],\n      {\n        response_format: { type: \"json_object\" },\n        max_tokens: 1800\n      }\n    );\n    \n    console.log('[Character Analysis] Response received from model:', model);\n    \n    const content = response.choices[0].message.content;\n    if (!content) {\n      throw new Error('Empty response from AI model');\n    }\n    \n    const analysis = JSON.parse(content);\n    \n    const recommendations = analysis.recommendations || [];\n    if (analysis.arc?.completeness < 50) {\n      recommendations.push(\"Develop character arc more fully through meaningful challenges\");\n    }\n    if (analysis.consistency?.score < 75) {\n      recommendations.push(\"Review character actions for consistency with established personality\");\n    }\n    if (analysis.presence?.screen_time === 'insufficient') {\n      recommendations.push(\"Increase character presence in key scenes\");\n    }\n    \n    return {\n      success: true,\n      data: analysis,\n      recommendations,\n      metadata: {\n        analysisType: \"character_development\",\n        timestamp: new Date(),\n        documentsAnalyzed: request.documents.length,\n        confidence: Math.min(92, 70 + (request.documents.length * 4))\n      }\n    };\n  } catch (error) {\n    throw new Error(`Character development analysis failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}\n\n// Narrative Flow Analysis\nexport async function analyzeNarrativeFlow(request: NarrativeFlowRequest): Promise<AnalysisResult> {\n  const narrativeStructure = request.documents\n    .sort((a, b) => a.orderIndex - b.orderIndex)\n    .map(d => `Chapter ${d.orderIndex}: ${d.title} (${d.content.split(/\\s+/).length} words)`)\n    .join('\\n');\n  \n  const contentSample = request.documents\n    .slice(0, 5)\n    .map(d => d.content.substring(0, 500))\n    .join('\\n\\n---\\n\\n');\n  \n  const systemPrompt = `You are a narrative flow expert. Analyze pacing, rhythm, scene transitions, tension curves, and story momentum. Identify areas of lag or rush. Provide specific, actionable suggestions. Return detailed JSON analysis.`;\n  \n  const userPrompt = `Analyze the narrative flow and pacing.\n  \n  Genre: ${request.genre || 'General Fiction'}\n  Target Pacing: ${request.targetPacing || 'Moderate'}\n  \n  Chapter Structure:\n  ${narrativeStructure}\n  \n  Content Sample:\n  ${contentSample}\n  \n  Return JSON:\n  {\n    \"pacing\": {\n      \"overall\": \"slow\"|\"moderate\"|\"fast\"|\"varied\",\n      \"effectiveness\": number (0-100),\n      \"chapters\": [{ \"number\": number, \"pace\": string, \"issue\": string|null }]\n    },\n    \"rhythm\": {\n      \"variety\": number (0-100),\n      \"flow\": number (0-100),\n      \"patterns\": string[]\n    },\n    \"transitions\": {\n      \"quality\": number (0-100),\n      \"smooth\": number,\n      \"jarring\": number,\n      \"issues\": [{ \"between\": string, \"problem\": string }]\n    },\n    \"tensionCurve\": {\n      \"pattern\": string,\n      \"effectiveness\": number (0-100),\n      \"peaks\": [{ \"chapter\": number, \"intensity\": number (1-10) }],\n      \"valleys\": [{ \"chapter\": number, \"intensity\": number (1-10) }]\n    },\n    \"momentum\": {\n      \"building\": boolean,\n      \"maintained\": number (0-100),\n      \"lostAt\": string[]\n    },\n    \"lagAreas\": [{ \"location\": string, \"reason\": string, \"suggestion\": string }],\n    \"rushAreas\": [{ \"location\": string, \"reason\": string, \"suggestion\": string }],\n    \"hooks\": {\n      \"chapter_endings\": number (0-100),\n      \"chapter_openings\": number (0-100),\n      \"overall_engagement\": number (0-100)\n    }\n  }`;\n  \n  try {\n    console.log('[Narrative Analysis] Documents count:', request.documents.length);\n    console.log('[Narrative Analysis] Genre:', request.genre || 'General Fiction');\n    console.log('[Narrative Analysis] Target pacing:', request.targetPacing || 'Moderate');\n    \n    const { response, model } = await createChatCompletionWithFallback(\n      [\n        { role: \"system\", content: systemPrompt },\n        { role: \"user\", content: userPrompt }\n      ],\n      {\n        response_format: { type: \"json_object\" },\n        max_tokens: 2000\n      }\n    );\n    \n    console.log('[Narrative Analysis] Response received from model:', model);\n    \n    const content = response.choices[0].message.content;\n    if (!content) {\n      throw new Error('Empty response from AI model');\n    }\n    \n    const analysis = JSON.parse(content);\n    \n    const recommendations = [];\n    if (analysis.pacing?.effectiveness < 70) {\n      recommendations.push(\"Adjust pacing to better match genre expectations\");\n    }\n    if (analysis.lagAreas?.length > 2) {\n      recommendations.push(`Address ${analysis.lagAreas.length} areas where narrative momentum slows`);\n    }\n    if (analysis.rushAreas?.length > 1) {\n      recommendations.push(\"Expand rushed scenes to allow proper development\");\n    }\n    if (analysis.transitions?.quality < 75) {\n      recommendations.push(\"Smooth scene and chapter transitions for better flow\");\n    }\n    if (analysis.hooks?.chapter_endings < 70) {\n      recommendations.push(\"Strengthen chapter endings with compelling hooks\");\n    }\n    \n    return {\n      success: true,\n      data: analysis,\n      recommendations,\n      metadata: {\n        analysisType: \"narrative_flow\",\n        timestamp: new Date(),\n        documentsAnalyzed: request.documents.length,\n        confidence: Math.min(88, 65 + (request.documents.length * 3))\n      }\n    };\n  } catch (error) {\n    throw new Error(`Narrative flow analysis failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}\n","size_bytes":31732},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport Stripe from \"stripe\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { db } from \"./db\";\nimport { documentComments, activities as activitiesTable } from \"@shared/schema\";\nimport { eq, desc, inArray } from \"drizzle-orm\";\nimport { \n  generateContent, \n  buildMusePrompt, \n  buildEditorPrompt, \n  buildCoachPrompt,\n  fetchProjectContext,\n  analyzeWritingStyle,\n  analyzePlotConsistency,\n  analyzeCharacterDevelopment,\n  analyzeNarrativeFlow,\n  type AiRequest,\n  type StyleAnalysisRequest,\n  type PlotConsistencyRequest,\n  type CharacterDevelopmentRequest,\n  type NarrativeFlowRequest\n} from \"./openai\";\nimport { AnalyticsService } from \"./analytics\";\nimport { \n  insertProjectSchema,\n  insertCharacterSchema,\n  insertWorldbuildingEntrySchema,\n  insertTimelineEventSchema,\n  insertDocumentSchema,\n  insertProjectCollaboratorSchema,\n  insertDocumentBranchSchema,\n  insertDocumentVersionSchema,\n  insertBranchMergeEventSchema,\n  insertEmailSchema,\n} from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { fromZodError } from \"zod-validation-error\";\nimport * as Y from 'yjs';\nimport { CollaborationService } from \"./collaboration\";\nimport { notifyProjectCollaborators } from \"./notifications\";\nimport { logActivity, getUserDisplayName } from \"./activities\";\nimport { \n  sendEmail, \n  sendBatchEmails, \n  scheduleEmail, \n  getEmailStatus, \n  listUserEmails \n} from \"./brevoService\";\n\nlet stripe: Stripe | null = null;\n\nfunction getStripeClient(): Stripe {\n  if (!stripe) {\n    if (!process.env.STRIPE_SECRET_KEY) {\n      throw new Error('Stripe API key is not configured. Please set the STRIPE_SECRET_KEY environment variable.');\n    }\n    stripe = new Stripe(process.env.STRIPE_SECRET_KEY);\n  }\n  return stripe;\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Onboarding routes\n  app.get('/api/user/onboarding', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const progress = await storage.getUserOnboarding(userId);\n      res.json(progress || {\n        welcomeShown: false,\n        steps: {\n          createProject: false,\n          useAI: false,\n          addCharacter: false,\n          viewAnalytics: false,\n          tryExport: false,\n        },\n        tourCompleted: false,\n      });\n    } catch (error) {\n      console.error(\"Error fetching onboarding progress:\", error);\n      res.status(500).json({ message: \"Failed to fetch onboarding progress\" });\n    }\n  });\n\n  app.patch('/api/user/onboarding', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const progressSchema = z.object({\n        welcomeShown: z.boolean().optional(),\n        steps: z.object({\n          createProject: z.boolean().optional(),\n          useAI: z.boolean().optional(),\n          addCharacter: z.boolean().optional(),\n          viewAnalytics: z.boolean().optional(),\n          tryExport: z.boolean().optional(),\n        }).optional(),\n        tourCompleted: z.boolean().optional(),\n      });\n      \n      const validatedData = progressSchema.parse(req.body);\n      const user = await storage.updateUserOnboarding(userId, validatedData);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error updating onboarding progress:\", error);\n      res.status(500).json({ message: \"Failed to update onboarding progress\" });\n    }\n  });\n\n  // Project routes\n  app.get('/api/projects', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const projects = await storage.getUserProjects(userId);\n      res.json(projects);\n    } catch (error) {\n      console.error(\"Error fetching projects:\", error);\n      res.status(500).json({ message: \"Failed to fetch projects\" });\n    }\n  });\n\n  app.get('/api/projects/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const project = await storage.getProject(req.params.id);\n      \n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      // Check if user has access (owner or collaborator)\n      const hasAccess = project.ownerId === userId || \n        project.collaborators.some(c => c.userId === userId);\n      \n      if (!hasAccess) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      res.json(project);\n    } catch (error) {\n      console.error(\"Error fetching project:\", error);\n      res.status(500).json({ message: \"Failed to fetch project\" });\n    }\n  });\n\n  app.post('/api/projects', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { template, ...projectData } = req.body;\n      const validatedData = insertProjectSchema.parse(projectData);\n      const project = await storage.createProject(validatedData, userId);\n      \n      if (template && template !== 'blank') {\n        await storage.applyProjectTemplate(project.id, template, userId);\n      }\n      \n      await logActivity(storage, project.id, userId, {\n        type: \"project_created\",\n        description: `${getUserDisplayName(await storage.getUser(userId))} created the project`,\n      });\n      \n      res.json(project);\n    } catch (error) {\n      console.error(\"Error creating project:\", error);\n      res.status(500).json({ message: \"Failed to create project\" });\n    }\n  });\n\n  app.put('/api/projects/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const project = await storage.getProject(req.params.id);\n      \n      if (!project || project.ownerId !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const validatedData = insertProjectSchema.partial().parse(req.body);\n      const updated = await storage.updateProject(req.params.id, validatedData);\n      \n      await logActivity(storage, updated.id, userId, {\n        type: \"project_updated\",\n        description: `${getUserDisplayName(await storage.getUser(userId))} updated project settings`,\n      });\n      \n      res.json(updated);\n    } catch (error) {\n      console.error(\"Error updating project:\", error);\n      res.status(500).json({ message: \"Failed to update project\" });\n    }\n  });\n\n  app.delete('/api/projects/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const project = await storage.getProject(req.params.id);\n      \n      if (!project || project.ownerId !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      await storage.deleteProject(req.params.id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting project:\", error);\n      res.status(500).json({ message: \"Failed to delete project\" });\n    }\n  });\n\n  // Analytics routes\n  app.get('/api/projects/:id/analytics', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const analytics = await AnalyticsService.getProjectAnalytics(req.params.id, userId);\n      res.json(analytics);\n    } catch (error) {\n      console.error(\"Error fetching analytics:\", error);\n      if (error instanceof Error && error.message.includes('Access denied')) {\n        res.status(403).json({ message: error.message });\n      } else {\n        res.status(500).json({ message: \"Failed to fetch analytics\" });\n      }\n    }\n  });\n\n  // Character routes\n  app.get('/api/projects/:projectId/characters', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const project = await storage.getProject(req.params.projectId);\n      \n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      const hasAccess = project.ownerId === userId || \n        project.collaborators.some(c => c.userId === userId);\n      \n      if (!hasAccess) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const characters = await storage.getProjectCharacters(req.params.projectId);\n      res.json(characters);\n    } catch (error) {\n      console.error(\"Error fetching characters:\", error);\n      res.status(500).json({ message: \"Failed to fetch characters\" });\n    }\n  });\n\n  app.post('/api/projects/:projectId/characters', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const project = await storage.getProject(req.params.projectId);\n      \n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      const userRole = project.ownerId === userId ? 'owner' : await storage.getUserRole(req.params.projectId, userId);\n      \n      if (!userRole || (userRole !== 'owner' && userRole !== 'editor')) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n\n      const validatedData = insertCharacterSchema.parse({\n        ...req.body,\n        projectId: req.params.projectId\n      });\n      \n      const character = await storage.createCharacter(validatedData);\n      \n      const user = await storage.getUser(userId);\n      \n      // Notify collaborators about new character\n      try {\n        const displayName = user?.firstName || user?.email || 'A user';\n        await notifyProjectCollaborators(storage, character.projectId, userId, {\n          type: \"character_created\",\n          title: \"New Character Added\",\n          message: `${displayName} added character \"${character.name}\"`,\n          entityType: \"character\",\n          entityId: character.id,\n          actorId: userId,\n        });\n      } catch (error) {\n        console.error(\"Failed to create notifications:\", error);\n      }\n      \n      await logActivity(storage, character.projectId, userId, {\n        type: \"character_created\",\n        description: `${getUserDisplayName(user)} added a new character`,\n        entityType: \"character\",\n        entityId: character.id,\n        entityName: character.name,\n      });\n      \n      res.json(character);\n    } catch (error) {\n      console.error(\"Error creating character:\", error);\n      res.status(500).json({ message: \"Failed to create character\" });\n    }\n  });\n\n  app.put('/api/characters/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const character = await storage.getCharacter(req.params.id);\n      \n      if (!character) {\n        return res.status(404).json({ message: \"Character not found\" });\n      }\n\n      const project = await storage.getProject(character.projectId);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      const userRole = project.ownerId === userId ? 'owner' : await storage.getUserRole(character.projectId, userId);\n      \n      if (!userRole || (userRole !== 'owner' && userRole !== 'editor')) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n\n      const validatedData = insertCharacterSchema.partial().parse(req.body);\n      const updated = await storage.updateCharacter(req.params.id, validatedData);\n      \n      const user = await storage.getUser(userId);\n      \n      // Notify collaborators about character update\n      try {\n        const displayName = user?.firstName || user?.email || 'A user';\n        await notifyProjectCollaborators(storage, character.projectId, userId, {\n          type: \"character_updated\",\n          title: \"Character Updated\",\n          message: `${displayName} updated character \"${updated.name}\"`,\n          entityType: \"character\",\n          entityId: updated.id,\n          actorId: userId,\n        });\n      } catch (error) {\n        console.error(\"Failed to create notifications:\", error);\n      }\n      \n      await logActivity(storage, character.projectId, userId, {\n        type: \"character_updated\",\n        description: `${getUserDisplayName(user)} updated a character`,\n        entityType: \"character\",\n        entityId: updated.id,\n        entityName: updated.name,\n      });\n      \n      res.json(updated);\n    } catch (error) {\n      console.error(\"Error updating character:\", error);\n      res.status(500).json({ message: \"Failed to update character\" });\n    }\n  });\n\n  app.delete('/api/characters/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const character = await storage.getCharacter(req.params.id);\n      \n      if (!character) {\n        return res.status(404).json({ message: \"Character not found\" });\n      }\n\n      const project = await storage.getProject(character.projectId);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      const userRole = project.ownerId === userId ? 'owner' : await storage.getUserRole(character.projectId, userId);\n      \n      if (!userRole || (userRole !== 'owner' && userRole !== 'editor')) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n\n      const characterName = character.name;\n      const user = await storage.getUser(userId);\n      \n      await storage.deleteCharacter(req.params.id);\n      \n      // Notify collaborators about character deletion\n      try {\n        const displayName = user?.firstName || user?.email || 'A user';\n        await notifyProjectCollaborators(storage, character.projectId, userId, {\n          type: \"character_deleted\",\n          title: \"Character Deleted\",\n          message: `${displayName} deleted character \"${characterName}\"`,\n          entityType: \"character\",\n          entityId: req.params.id,\n          actorId: userId,\n        });\n      } catch (error) {\n        console.error(\"Failed to create notifications:\", error);\n      }\n      \n      await logActivity(storage, character.projectId, userId, {\n        type: \"character_deleted\",\n        description: `${getUserDisplayName(user)} deleted a character`,\n        entityType: \"character\",\n        entityId: req.params.id,\n        entityName: characterName,\n      });\n      \n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting character:\", error);\n      res.status(500).json({ message: \"Failed to delete character\" });\n    }\n  });\n\n  // Worldbuilding routes\n  app.get('/api/projects/:projectId/worldbuilding', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const project = await storage.getProject(req.params.projectId);\n      \n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      const hasAccess = project.ownerId === userId || \n        project.collaborators.some(c => c.userId === userId);\n      \n      if (!hasAccess) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const entries = await storage.getProjectWorldbuilding(req.params.projectId);\n      res.json(entries);\n    } catch (error) {\n      console.error(\"Error fetching worldbuilding:\", error);\n      res.status(500).json({ message: \"Failed to fetch worldbuilding entries\" });\n    }\n  });\n\n  app.post('/api/projects/:projectId/worldbuilding', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const project = await storage.getProject(req.params.projectId);\n      \n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      const userRole = project.ownerId === userId ? 'owner' : await storage.getUserRole(req.params.projectId, userId);\n      \n      if (!userRole || (userRole !== 'owner' && userRole !== 'editor')) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n\n      // Normalize tags if provided as string\n      const normalizedBody = { ...req.body };\n      if (normalizedBody.tags && typeof normalizedBody.tags === 'string') {\n        normalizedBody.tags = normalizedBody.tags.split(',').map((tag: string) => tag.trim()).filter(Boolean);\n      }\n\n      const validatedData = insertWorldbuildingEntrySchema.parse({\n        ...normalizedBody,\n        projectId: req.params.projectId\n      });\n      \n      const entry = await storage.createWorldbuildingEntry(validatedData);\n      \n      const user = await storage.getUser(userId);\n      \n      // Notify collaborators about new worldbuilding entry\n      try {\n        const displayName = user?.firstName || user?.email || 'A user';\n        await notifyProjectCollaborators(storage, entry.projectId, userId, {\n          type: \"worldbuilding_created\",\n          title: \"New Worldbuilding Entry\",\n          message: `${displayName} added \"${entry.title}\"`,\n          entityType: \"worldbuilding\",\n          entityId: entry.id,\n          actorId: userId,\n        });\n      } catch (error) {\n        console.error(\"Failed to create notifications:\", error);\n      }\n      \n      await logActivity(storage, entry.projectId, userId, {\n        type: \"worldbuilding_created\",\n        description: `${getUserDisplayName(user)} added worldbuilding entry`,\n        entityType: \"worldbuilding\",\n        entityId: entry.id,\n        entityName: entry.title,\n      });\n      \n      res.json(entry);\n    } catch (error) {\n      console.error(\"Error creating worldbuilding entry:\", error);\n      res.status(500).json({ message: \"Failed to create worldbuilding entry\" });\n    }\n  });\n\n  app.put('/api/worldbuilding/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const entry = await storage.getWorldbuildingEntry(req.params.id);\n      \n      if (!entry) {\n        return res.status(404).json({ message: \"Worldbuilding entry not found\" });\n      }\n\n      const project = await storage.getProject(entry.projectId);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      const userRole = project.ownerId === userId ? 'owner' : await storage.getUserRole(entry.projectId, userId);\n      \n      if (!userRole || (userRole !== 'owner' && userRole !== 'editor')) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n\n      // Normalize tags if provided as string\n      const normalizedBody = { ...req.body };\n      if (normalizedBody.tags && typeof normalizedBody.tags === 'string') {\n        normalizedBody.tags = normalizedBody.tags.split(',').map((tag: string) => tag.trim()).filter(Boolean);\n      }\n\n      // Prevent projectId changes - override with existing entry's projectId\n      const validatedData = insertWorldbuildingEntrySchema.partial().parse({\n        ...normalizedBody,\n        projectId: entry.projectId\n      });\n\n      const updated = await storage.updateWorldbuildingEntry(req.params.id, validatedData);\n      \n      const user = await storage.getUser(userId);\n      \n      // Notify collaborators about worldbuilding update\n      try {\n        const displayName = user?.firstName || user?.email || 'A user';\n        await notifyProjectCollaborators(storage, entry.projectId, userId, {\n          type: \"worldbuilding_updated\",\n          title: \"Worldbuilding Entry Updated\",\n          message: `${displayName} updated \"${updated.title}\"`,\n          entityType: \"worldbuilding\",\n          entityId: updated.id,\n          actorId: userId,\n        });\n      } catch (error) {\n        console.error(\"Failed to create notifications:\", error);\n      }\n      \n      await logActivity(storage, entry.projectId, userId, {\n        type: \"worldbuilding_updated\",\n        description: `${getUserDisplayName(user)} updated worldbuilding entry`,\n        entityType: \"worldbuilding\",\n        entityId: updated.id,\n        entityName: updated.title,\n      });\n      \n      res.json(updated);\n    } catch (error) {\n      console.error(\"Error updating worldbuilding entry:\", error);\n      res.status(500).json({ message: \"Failed to update worldbuilding entry\" });\n    }\n  });\n\n  app.delete('/api/worldbuilding/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const entry = await storage.getWorldbuildingEntry(req.params.id);\n      \n      if (!entry) {\n        return res.status(404).json({ message: \"Worldbuilding entry not found\" });\n      }\n\n      const project = await storage.getProject(entry.projectId);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      const userRole = project.ownerId === userId ? 'owner' : await storage.getUserRole(entry.projectId, userId);\n      \n      if (!userRole || (userRole !== 'owner' && userRole !== 'editor')) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n\n      const entryTitle = entry.title;\n      const user = await storage.getUser(userId);\n      \n      await storage.deleteWorldbuildingEntry(req.params.id);\n      \n      // Notify collaborators about worldbuilding deletion\n      try {\n        const displayName = user?.firstName || user?.email || 'A user';\n        await notifyProjectCollaborators(storage, entry.projectId, userId, {\n          type: \"worldbuilding_deleted\",\n          title: \"Worldbuilding Entry Deleted\",\n          message: `${displayName} deleted \"${entryTitle}\"`,\n          entityType: \"worldbuilding\",\n          entityId: req.params.id,\n          actorId: userId,\n        });\n      } catch (error) {\n        console.error(\"Failed to create notifications:\", error);\n      }\n      \n      await logActivity(storage, entry.projectId, userId, {\n        type: \"worldbuilding_deleted\",\n        description: `${getUserDisplayName(user)} deleted worldbuilding entry`,\n        entityType: \"worldbuilding\",\n        entityId: req.params.id,\n        entityName: entryTitle,\n      });\n      \n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting worldbuilding entry:\", error);\n      res.status(500).json({ message: \"Failed to delete worldbuilding entry\" });\n    }\n  });\n\n  // Timeline routes\n  app.get('/api/projects/:projectId/timeline', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const project = await storage.getProject(req.params.projectId);\n      \n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      const hasAccess = project.ownerId === userId || \n        project.collaborators.some(c => c.userId === userId);\n      \n      if (!hasAccess) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const events = await storage.getProjectTimeline(req.params.projectId);\n      res.json(events);\n    } catch (error) {\n      console.error(\"Error fetching timeline:\", error);\n      res.status(500).json({ message: \"Failed to fetch timeline events\" });\n    }\n  });\n\n  app.post('/api/projects/:projectId/timeline', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const project = await storage.getProject(req.params.projectId);\n      \n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      const userRole = project.ownerId === userId ? 'owner' : await storage.getUserRole(req.params.projectId, userId);\n      \n      if (!userRole || (userRole !== 'owner' && userRole !== 'editor')) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n\n      const validatedData = insertTimelineEventSchema.parse({\n        ...req.body,\n        projectId: req.params.projectId\n      });\n      \n      const event = await storage.createTimelineEvent(validatedData);\n      \n      const user = await storage.getUser(userId);\n      \n      // Notify collaborators about new timeline event\n      try {\n        const displayName = user?.firstName || user?.email || 'A user';\n        await notifyProjectCollaborators(storage, event.projectId, userId, {\n          type: \"timeline_created\",\n          title: \"New Timeline Event\",\n          message: `${displayName} added \"${event.title}\"`,\n          entityType: \"timeline\",\n          entityId: event.id,\n          actorId: userId,\n        });\n      } catch (error) {\n        console.error(\"Failed to create notifications:\", error);\n      }\n      \n      await logActivity(storage, event.projectId, userId, {\n        type: \"timeline_created\",\n        description: `${getUserDisplayName(user)} added a timeline event`,\n        entityType: \"timeline\",\n        entityId: event.id,\n        entityName: event.title,\n      });\n      \n      res.json(event);\n    } catch (error) {\n      console.error(\"Error creating timeline event:\", error);\n      res.status(500).json({ message: \"Failed to create timeline event\" });\n    }\n  });\n\n  app.put('/api/timeline/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const event = await storage.getTimelineEvent(req.params.id);\n      \n      if (!event) {\n        return res.status(404).json({ message: \"Timeline event not found\" });\n      }\n\n      const project = await storage.getProject(event.projectId);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      const userRole = project.ownerId === userId ? 'owner' : await storage.getUserRole(event.projectId, userId);\n      \n      if (!userRole || (userRole !== 'owner' && userRole !== 'editor')) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n\n      // Normalize array fields if provided as strings\n      const normalizedBody = { ...req.body };\n      if (normalizedBody.tags && typeof normalizedBody.tags === 'string') {\n        normalizedBody.tags = normalizedBody.tags.split(',').map((tag: string) => tag.trim()).filter(Boolean);\n      }\n      if (normalizedBody.relatedCharacters && typeof normalizedBody.relatedCharacters === 'string') {\n        normalizedBody.relatedCharacters = normalizedBody.relatedCharacters.split(',').map((char: string) => char.trim()).filter(Boolean);\n      }\n      if (normalizedBody.relatedLocations && typeof normalizedBody.relatedLocations === 'string') {\n        normalizedBody.relatedLocations = normalizedBody.relatedLocations.split(',').map((loc: string) => loc.trim()).filter(Boolean);\n      }\n\n      // Prevent projectId changes - override with existing event's projectId\n      const validatedData = insertTimelineEventSchema.partial().parse({\n        ...normalizedBody,\n        projectId: event.projectId\n      });\n\n      const updated = await storage.updateTimelineEvent(req.params.id, validatedData);\n      \n      const user = await storage.getUser(userId);\n      \n      // Notify collaborators about timeline event update\n      try {\n        const displayName = user?.firstName || user?.email || 'A user';\n        await notifyProjectCollaborators(storage, event.projectId, userId, {\n          type: \"timeline_updated\",\n          title: \"Timeline Event Updated\",\n          message: `${displayName} updated \"${updated.title}\"`,\n          entityType: \"timeline\",\n          entityId: updated.id,\n          actorId: userId,\n        });\n      } catch (error) {\n        console.error(\"Failed to create notifications:\", error);\n      }\n      \n      await logActivity(storage, event.projectId, userId, {\n        type: \"timeline_updated\",\n        description: `${getUserDisplayName(user)} updated a timeline event`,\n        entityType: \"timeline\",\n        entityId: updated.id,\n        entityName: updated.title,\n      });\n      \n      res.json(updated);\n    } catch (error) {\n      console.error(\"Error updating timeline event:\", error);\n      res.status(500).json({ message: \"Failed to update timeline event\" });\n    }\n  });\n\n  app.delete('/api/timeline/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const event = await storage.getTimelineEvent(req.params.id);\n      \n      if (!event) {\n        return res.status(404).json({ message: \"Timeline event not found\" });\n      }\n\n      const project = await storage.getProject(event.projectId);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      const userRole = project.ownerId === userId ? 'owner' : await storage.getUserRole(event.projectId, userId);\n      \n      if (!userRole || (userRole !== 'owner' && userRole !== 'editor')) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n\n      const eventTitle = event.title;\n      const user = await storage.getUser(userId);\n      \n      await storage.deleteTimelineEvent(req.params.id);\n      \n      // Notify collaborators about timeline event deletion\n      try {\n        const displayName = user?.firstName || user?.email || 'A user';\n        await notifyProjectCollaborators(storage, event.projectId, userId, {\n          type: \"timeline_deleted\",\n          title: \"Timeline Event Deleted\",\n          message: `${displayName} deleted \"${eventTitle}\"`,\n          entityType: \"timeline\",\n          entityId: req.params.id,\n          actorId: userId,\n        });\n      } catch (error) {\n        console.error(\"Failed to create notifications:\", error);\n      }\n      \n      await logActivity(storage, event.projectId, userId, {\n        type: \"timeline_deleted\",\n        description: `${getUserDisplayName(user)} deleted a timeline event`,\n        entityType: \"timeline\",\n        entityId: req.params.id,\n        entityName: eventTitle,\n      });\n      \n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting timeline event:\", error);\n      res.status(500).json({ message: \"Failed to delete timeline event\" });\n    }\n  });\n\n  app.patch('/api/timeline/:id/reorder', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const event = await storage.getTimelineEvent(req.params.id);\n      \n      if (!event) {\n        return res.status(404).json({ message: \"Timeline event not found\" });\n      }\n\n      const project = await storage.getProject(event.projectId);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      const userRole = project.ownerId === userId ? 'owner' : await storage.getUserRole(event.projectId, userId);\n      \n      if (!userRole || (userRole !== 'owner' && userRole !== 'editor')) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n\n      const reorderSchema = z.object({\n        orderIndex: z.number(),\n        date: z.string().optional(),\n      });\n      \n      const validatedData = reorderSchema.parse(req.body);\n      const updated = await storage.reorderTimelineEvents(\n        event.projectId,\n        req.params.id,\n        validatedData.orderIndex,\n        validatedData.date\n      );\n      \n      res.json(updated);\n    } catch (error) {\n      console.error(\"Error reordering timeline event:\", error);\n      res.status(500).json({ message: \"Failed to reorder timeline event\" });\n    }\n  });\n\n  // Document routes\n  app.get('/api/projects/:projectId/documents', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const project = await storage.getProject(req.params.projectId);\n      \n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      const hasAccess = project.ownerId === userId || \n        project.collaborators.some(c => c.userId === userId);\n      \n      if (!hasAccess) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const documents = await storage.getProjectDocuments(req.params.projectId);\n      res.json(documents);\n    } catch (error) {\n      console.error(\"Error fetching documents:\", error);\n      res.status(500).json({ message: \"Failed to fetch documents\" });\n    }\n  });\n\n  app.get('/api/documents/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const document = await storage.getDocument(req.params.id);\n      \n      if (!document) {\n        return res.status(404).json({ message: \"Document not found\" });\n      }\n\n      const project = await storage.getProject(document.projectId);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      const hasAccess = project.ownerId === userId || \n        project.collaborators.some(c => c.userId === userId);\n      \n      if (!hasAccess) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      res.json(document);\n    } catch (error) {\n      console.error(\"Error fetching document:\", error);\n      res.status(500).json({ message: \"Failed to fetch document\" });\n    }\n  });\n\n  app.post('/api/projects/:projectId/documents', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const project = await storage.getProject(req.params.projectId);\n      \n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      const userRole = project.ownerId === userId ? 'owner' : await storage.getUserRole(req.params.projectId, userId);\n      \n      if (!userRole || (userRole !== 'owner' && userRole !== 'editor')) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n\n      const validatedData = insertDocumentSchema.parse({\n        ...req.body,\n        projectId: req.params.projectId\n      });\n      \n      const document = await storage.createDocument({\n        ...validatedData,\n        authorId: userId\n      });\n      \n      const user = await storage.getUser(userId);\n      \n      // Notify collaborators about new document\n      try {\n        const displayName = user?.firstName || user?.email || 'A user';\n        await notifyProjectCollaborators(storage, document.projectId, userId, {\n          type: \"document_created\",\n          title: \"New Document Created\",\n          message: `${displayName} created a new document \"${document.title}\"`,\n          entityType: \"document\",\n          entityId: document.id,\n          actorId: userId,\n        });\n      } catch (error) {\n        console.error(\"Failed to create notifications:\", error);\n      }\n      \n      await logActivity(storage, document.projectId, userId, {\n        type: \"document_created\",\n        description: `${getUserDisplayName(user)} created a new document`,\n        entityType: \"document\",\n        entityId: document.id,\n        entityName: document.title,\n      });\n      \n      res.json(document);\n    } catch (error) {\n      console.error(\"Error creating document:\", error);\n      res.status(500).json({ message: \"Failed to create document\" });\n    }\n  });\n\n  app.put('/api/documents/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const document = await storage.getDocument(req.params.id);\n      \n      if (!document) {\n        return res.status(404).json({ message: \"Document not found\" });\n      }\n\n      const project = await storage.getProject(document.projectId);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      const userRole = project.ownerId === userId ? 'owner' : await storage.getUserRole(document.projectId, userId);\n      \n      if (!userRole || (userRole !== 'owner' && userRole !== 'editor')) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n\n      const validatedData = insertDocumentSchema.partial().parse(req.body);\n      const updated = await storage.updateDocument(req.params.id, validatedData, userId);\n      \n      // Recalculate project's total word count\n      const allDocuments = await storage.getProjectDocuments(document.projectId);\n      const totalWordCount = allDocuments.reduce((sum, doc) => sum + (doc.wordCount || 0), 0);\n      await storage.updateProject(document.projectId, { currentWordCount: totalWordCount });\n      \n      const user = await storage.getUser(userId);\n      \n      // Notify collaborators about document update\n      try {\n        const displayName = user?.firstName || user?.email || 'A user';\n        await notifyProjectCollaborators(storage, document.projectId, userId, {\n          type: \"document_updated\",\n          title: \"Document Updated\",\n          message: `${displayName} updated \"${updated.title}\"`,\n          entityType: \"document\",\n          entityId: updated.id,\n          actorId: userId,\n        });\n      } catch (error) {\n        console.error(\"Failed to create notifications:\", error);\n      }\n      \n      await logActivity(storage, document.projectId, userId, {\n        type: \"document_updated\",\n        description: `${getUserDisplayName(user)} updated a document`,\n        entityType: \"document\",\n        entityId: updated.id,\n        entityName: updated.title,\n      });\n      \n      res.json(updated);\n    } catch (error) {\n      console.error(\"Error updating document:\", error);\n      res.status(500).json({ message: \"Failed to update document\" });\n    }\n  });\n\n  // ==================== BRANCH MANAGEMENT ENDPOINTS ====================\n\n  // GET /api/documents/:id/branches - List all branches for a document\n  app.get('/api/documents/:id/branches', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const document = await storage.getDocument(req.params.id);\n      \n      if (!document) {\n        return res.status(404).json({ message: \"Document not found\" });\n      }\n\n      const project = await storage.getProject(document.projectId);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      const userRole = project.ownerId === userId ? 'owner' : await storage.getUserRole(document.projectId, userId);\n      \n      // Reader role has no access to version control features\n      if (!userRole || userRole === 'reader') {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const branches = await storage.getBranches(req.params.id);\n      \n      // Include branch head version and metadata for each branch\n      const branchesWithMetadata = await Promise.all(\n        branches.map(async (branch) => {\n          const headVersion = await storage.getBranchHead(branch.id);\n          return {\n            ...branch,\n            headVersion: headVersion ? {\n              id: headVersion.id,\n              wordCount: headVersion.wordCount,\n              createdAt: headVersion.createdAt,\n              authorId: headVersion.authorId\n            } : null,\n          };\n        })\n      );\n\n      res.json(branchesWithMetadata);\n    } catch (error) {\n      console.error(\"Error fetching branches:\", error);\n      res.status(500).json({ message: \"Failed to fetch branches\" });\n    }\n  });\n\n  // POST /api/documents/:id/branches - Create new branch\n  app.post('/api/documents/:id/branches', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const document = await storage.getDocument(req.params.id);\n      \n      if (!document) {\n        return res.status(404).json({ message: \"Document not found\" });\n      }\n\n      const project = await storage.getProject(document.projectId);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      const userRole = project.ownerId === userId ? 'owner' : await storage.getUserRole(document.projectId, userId);\n      \n      // Only owner and editor can create branches\n      if (!userRole || (userRole !== 'owner' && userRole !== 'editor')) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n\n      const branchSchema = z.object({\n        name: z.string(),\n        description: z.string().nullable().optional(),\n        parentBranchId: z.string().nullable().optional(),\n      });\n\n      const validatedData = branchSchema.parse(req.body);\n      \n      const branch = await storage.createBranch(\n        req.params.id,\n        validatedData.name,\n        validatedData.description || null,\n        validatedData.parentBranchId || null,\n        userId\n      );\n\n      res.status(201).json(branch);\n    } catch (error) {\n      console.error(\"Error creating branch:\", error);\n      res.status(500).json({ message: \"Failed to create branch\" });\n    }\n  });\n\n  // PUT /api/branches/:branchId - Update branch metadata\n  app.put('/api/branches/:branchId', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const branch = await storage.getBranch(req.params.branchId);\n      \n      if (!branch) {\n        return res.status(404).json({ message: \"Branch not found\" });\n      }\n\n      const document = await storage.getDocument(branch.documentId);\n      if (!document) {\n        return res.status(404).json({ message: \"Document not found\" });\n      }\n\n      const project = await storage.getProject(document.projectId);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      const userRole = project.ownerId === userId ? 'owner' : await storage.getUserRole(document.projectId, userId);\n      \n      // Only owner and editor can update branches\n      if (!userRole || (userRole !== 'owner' && userRole !== 'editor')) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n\n      const validatedData = insertDocumentBranchSchema.partial().parse(req.body);\n      const updated = await storage.updateBranch(req.params.branchId, validatedData);\n      res.json(updated);\n    } catch (error) {\n      console.error(\"Error updating branch:\", error);\n      res.status(500).json({ message: \"Failed to update branch\" });\n    }\n  });\n\n  // DELETE /api/branches/:branchId - Delete branch (owner/editor only)\n  app.delete('/api/branches/:branchId', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const branch = await storage.getBranch(req.params.branchId);\n      \n      if (!branch) {\n        return res.status(404).json({ message: \"Branch not found\" });\n      }\n\n      // Prevent deletion of main branch\n      if (branch.name === 'main') {\n        return res.status(400).json({ message: \"Cannot delete main branch\" });\n      }\n\n      const document = await storage.getDocument(branch.documentId);\n      if (!document) {\n        return res.status(404).json({ message: \"Document not found\" });\n      }\n\n      const project = await storage.getProject(document.projectId);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      const userRole = project.ownerId === userId ? 'owner' : await storage.getUserRole(document.projectId, userId);\n      \n      // Only owner and editor can delete branches\n      if (!userRole || (userRole !== 'owner' && userRole !== 'editor')) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n\n      await storage.deleteBranch(req.params.branchId);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting branch:\", error);\n      res.status(500).json({ message: \"Failed to delete branch\" });\n    }\n  });\n\n  // POST /api/documents/:id/branches/switch - Switch active branch for user session\n  app.post('/api/documents/:id/branches/switch', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const document = await storage.getDocument(req.params.id);\n      \n      if (!document) {\n        return res.status(404).json({ message: \"Document not found\" });\n      }\n\n      const project = await storage.getProject(document.projectId);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      const userRole = project.ownerId === userId ? 'owner' : await storage.getUserRole(document.projectId, userId);\n      \n      // Reader role has no access to version control features\n      if (!userRole || userRole === 'reader') {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const switchSchema = z.object({\n        branchId: z.string(),\n      });\n\n      const { branchId } = switchSchema.parse(req.body);\n      \n      const branch = await storage.getBranch(branchId);\n      if (!branch || branch.documentId !== req.params.id) {\n        return res.status(404).json({ message: \"Branch not found\" });\n      }\n\n      // Store active branch in session\n      if (!req.session) {\n        req.session = {};\n      }\n      if (!req.session.activeBranches) {\n        req.session.activeBranches = {};\n      }\n      req.session.activeBranches[req.params.id] = branchId;\n\n      // Update collaboration context if user is in a collaboration session\n      const collaborationService = CollaborationService.getInstance();\n      // Note: This would need to be implemented in CollaborationService\n      // collaborationService.updateUserBranch(userId, document.projectId, req.params.id, branchId);\n\n      res.json({ \n        success: true, \n        activeBranch: branch,\n        message: \"Active branch switched successfully\" \n      });\n      \n      // Set header for active branch\n      res.setHeader('X-Active-Branch', branchId);\n    } catch (error) {\n      console.error(\"Error switching branch:\", error);\n      res.status(500).json({ message: \"Failed to switch branch\" });\n    }\n  });\n\n  // ==================== VERSION OPERATIONS ENDPOINTS ====================\n\n  // GET /api/branches/:branchId/versions - List versions in a branch\n  app.get('/api/branches/:branchId/versions', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const branch = await storage.getBranch(req.params.branchId);\n      \n      if (!branch) {\n        return res.status(404).json({ message: \"Branch not found\" });\n      }\n\n      const document = await storage.getDocument(branch.documentId);\n      if (!document) {\n        return res.status(404).json({ message: \"Document not found\" });\n      }\n\n      const project = await storage.getProject(document.projectId);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      const userRole = project.ownerId === userId ? 'owner' : await storage.getUserRole(document.projectId, userId);\n      \n      // Reader role has no access to version control features\n      if (!userRole || userRole === 'reader') {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const limit = req.query.limit ? parseInt(req.query.limit) : undefined;\n      const versions = await storage.getBranchVersions(req.params.branchId, limit);\n      \n      res.json(versions);\n    } catch (error) {\n      console.error(\"Error fetching versions:\", error);\n      res.status(500).json({ message: \"Failed to fetch versions\" });\n    }\n  });\n\n  // GET /api/versions/:versionId - Get specific version details\n  app.get('/api/versions/:versionId', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const version = await storage.getVersion(req.params.versionId);\n      \n      if (!version) {\n        return res.status(404).json({ message: \"Version not found\" });\n      }\n\n      const document = await storage.getDocument(version.documentId);\n      if (!document) {\n        return res.status(404).json({ message: \"Document not found\" });\n      }\n\n      const project = await storage.getProject(document.projectId);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      const userRole = project.ownerId === userId ? 'owner' : await storage.getUserRole(document.projectId, userId);\n      \n      // Reader role has no access to version control features\n      if (!userRole || userRole === 'reader') {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      res.json(version);\n    } catch (error) {\n      console.error(\"Error fetching version:\", error);\n      res.status(500).json({ message: \"Failed to fetch version\" });\n    }\n  });\n\n  // POST /api/branches/:branchId/rollback - Rollback branch to specific version\n  app.post('/api/branches/:branchId/rollback', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const branch = await storage.getBranch(req.params.branchId);\n      \n      if (!branch) {\n        return res.status(404).json({ message: \"Branch not found\" });\n      }\n\n      const document = await storage.getDocument(branch.documentId);\n      if (!document) {\n        return res.status(404).json({ message: \"Document not found\" });\n      }\n\n      const project = await storage.getProject(document.projectId);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      const userRole = project.ownerId === userId ? 'owner' : await storage.getUserRole(document.projectId, userId);\n      \n      // Only owner and editor can rollback\n      if (!userRole || (userRole !== 'owner' && userRole !== 'editor')) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n\n      const rollbackSchema = z.object({\n        targetVersionId: z.string(),\n      });\n\n      const { targetVersionId } = rollbackSchema.parse(req.body);\n      \n      const targetVersion = await storage.getVersion(targetVersionId);\n      if (!targetVersion || targetVersion.branchId !== req.params.branchId) {\n        return res.status(404).json({ message: \"Target version not found in this branch\" });\n      }\n\n      const newVersion = await storage.rollbackBranch(req.params.branchId, targetVersionId, userId);\n      \n      // Invalidate cache for this document\n      await storage.clearAnalysisCache(document.projectId);\n\n      res.json({\n        success: true,\n        newVersion,\n        message: `Branch rolled back to version ${targetVersionId}`\n      });\n    } catch (error) {\n      console.error(\"Error rolling back branch:\", error);\n      res.status(500).json({ message: \"Failed to rollback branch\" });\n    }\n  });\n\n  // GET /api/branches/:branchId/diff - Compare branch with another branch or version\n  app.get('/api/branches/:branchId/diff', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const branch = await storage.getBranch(req.params.branchId);\n      \n      if (!branch) {\n        return res.status(404).json({ message: \"Branch not found\" });\n      }\n\n      const document = await storage.getDocument(branch.documentId);\n      if (!document) {\n        return res.status(404).json({ message: \"Document not found\" });\n      }\n\n      const project = await storage.getProject(document.projectId);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      const userRole = project.ownerId === userId ? 'owner' : await storage.getUserRole(document.projectId, userId);\n      \n      // Reader role has no access to version control features\n      if (!userRole || userRole === 'reader') {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const { compareToBranchId, compareToVersionId } = req.query;\n      \n      if (!compareToBranchId && !compareToVersionId) {\n        return res.status(400).json({ message: \"Must provide either compareToBranchId or compareToVersionId\" });\n      }\n\n      let sourceVersion = await storage.getBranchHead(req.params.branchId);\n      let targetVersion: any = null;\n\n      if (compareToVersionId) {\n        targetVersion = await storage.getVersion(compareToVersionId as string);\n        if (!targetVersion) {\n          return res.status(404).json({ message: \"Compare version not found\" });\n        }\n      } else if (compareToBranchId) {\n        const compareBranch = await storage.getBranch(compareToBranchId as string);\n        if (!compareBranch || compareBranch.documentId !== branch.documentId) {\n          return res.status(404).json({ message: \"Compare branch not found\" });\n        }\n        targetVersion = await storage.getBranchHead(compareToBranchId as string);\n      }\n\n      if (!sourceVersion || !targetVersion) {\n        return res.status(404).json({ message: \"No versions to compare\" });\n      }\n\n      // Compare Yjs states if available\n      let stateDiff = null;\n      if (sourceVersion.ydocState && targetVersion.ydocState) {\n        try {\n          const sourceDoc = new Y.Doc();\n          const targetDoc = new Y.Doc();\n          \n          // Apply states to documents\n          Y.applyUpdate(sourceDoc, Buffer.from(sourceVersion.ydocState, 'base64'));\n          Y.applyUpdate(targetDoc, Buffer.from(targetVersion.ydocState, 'base64'));\n          \n          // Get text content for comparison\n          const sourceText = sourceDoc.getText('content').toString();\n          const targetText = targetDoc.getText('content').toString();\n          \n          stateDiff = {\n            source: sourceText,\n            target: targetText,\n            hasConflicts: sourceText !== targetText\n          };\n        } catch (error) {\n          console.error(\"Error comparing Yjs states:\", error);\n        }\n      }\n\n      res.json({\n        sourceBranch: branch,\n        sourceVersion: sourceVersion,\n        targetVersion: targetVersion,\n        diff: {\n          contentChanged: sourceVersion.content !== targetVersion.content,\n          wordCountDiff: (sourceVersion.wordCount || 0) - (targetVersion.wordCount || 0),\n          stateDiff,\n        }\n      });\n    } catch (error) {\n      console.error(\"Error comparing branches:\", error);\n      res.status(500).json({ message: \"Failed to compare branches\" });\n    }\n  });\n\n  // ==================== MERGE OPERATIONS ENDPOINTS ====================\n\n  // POST /api/branches/:branchId/merge - Initiate merge from source to target branch\n  app.post('/api/branches/:branchId/merge', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const sourceBranch = await storage.getBranch(req.params.branchId);\n      \n      if (!sourceBranch) {\n        return res.status(404).json({ message: \"Source branch not found\" });\n      }\n\n      const document = await storage.getDocument(sourceBranch.documentId);\n      if (!document) {\n        return res.status(404).json({ message: \"Document not found\" });\n      }\n\n      const project = await storage.getProject(document.projectId);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      const userRole = project.ownerId === userId ? 'owner' : await storage.getUserRole(document.projectId, userId);\n      \n      // Only owner and editor can merge\n      if (!userRole || (userRole !== 'owner' && userRole !== 'editor')) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n\n      const mergeSchema = z.object({\n        targetBranchId: z.string(),\n      });\n\n      const { targetBranchId } = mergeSchema.parse(req.body);\n      \n      const targetBranch = await storage.getBranch(targetBranchId);\n      if (!targetBranch || targetBranch.documentId !== sourceBranch.documentId) {\n        return res.status(404).json({ message: \"Target branch not found\" });\n      }\n\n      // Find common ancestor\n      const commonAncestor = await storage.findCommonAncestor(req.params.branchId, targetBranchId);\n      \n      // Get head versions\n      const sourceHead = await storage.getBranchHead(req.params.branchId);\n      const targetHead = await storage.getBranchHead(targetBranchId);\n\n      if (!sourceHead || !targetHead) {\n        return res.status(400).json({ message: \"Cannot merge: branches have no versions\" });\n      }\n\n      // Create merge event\n      const mergeEvent = await storage.createMergeEvent(req.params.branchId, targetBranchId, userId);\n\n      // Detect conflicts\n      let hasConflicts = false;\n      let conflictData = null;\n\n      if (sourceHead.ydocState && targetHead.ydocState && commonAncestor?.ydocState) {\n        try {\n          const sourceDoc = new Y.Doc();\n          const targetDoc = new Y.Doc();\n          const ancestorDoc = new Y.Doc();\n          \n          Y.applyUpdate(sourceDoc, Buffer.from(sourceHead.ydocState, 'base64'));\n          Y.applyUpdate(targetDoc, Buffer.from(targetHead.ydocState, 'base64'));\n          Y.applyUpdate(ancestorDoc, Buffer.from(commonAncestor.ydocState, 'base64'));\n          \n          const sourceText = sourceDoc.getText('content').toString();\n          const targetText = targetDoc.getText('content').toString();\n          const ancestorText = ancestorDoc.getText('content').toString();\n          \n          // Simple conflict detection: both changed from ancestor\n          if (sourceText !== ancestorText && targetText !== ancestorText) {\n            hasConflicts = true;\n            conflictData = {\n              source: sourceText,\n              target: targetText,\n              ancestor: ancestorText,\n              conflictMarkers: [\n                {\n                  type: 'content_conflict',\n                  sourceContent: sourceText,\n                  targetContent: targetText,\n                  ancestorContent: ancestorText,\n                }\n              ]\n            };\n          }\n        } catch (error) {\n          console.error(\"Error detecting conflicts:\", error);\n        }\n      } else {\n        // Fallback to simple content comparison\n        if (sourceHead.content !== targetHead.content) {\n          hasConflicts = true;\n          conflictData = {\n            source: sourceHead.content,\n            target: targetHead.content,\n            ancestor: commonAncestor?.content || '',\n            conflictMarkers: [\n              {\n                type: 'content_conflict',\n                sourceContent: sourceHead.content,\n                targetContent: targetHead.content,\n              }\n            ]\n          };\n        }\n      }\n\n      // Update merge event with conflict status\n      const status = hasConflicts ? 'conflicted' : 'completed';\n      await storage.updateMergeEvent(mergeEvent.id, status, conflictData);\n\n      // If no conflicts, automatically merge\n      if (!hasConflicts) {\n        // Create new version in target branch with merged content\n        const mergedVersion = await storage.createBranchVersion(\n          targetBranchId,\n          sourceHead.content,\n          sourceHead.ydocState,\n          userId,\n          sourceHead.wordCount || undefined\n        );\n\n        await storage.updateMergeEvent(mergeEvent.id, 'completed', {\n          mergedVersionId: mergedVersion.id,\n          ...conflictData\n        });\n      }\n\n      res.status(201).json({\n        mergeEvent,\n        hasConflicts,\n        conflictData,\n        sourceBranch,\n        targetBranch,\n        commonAncestor: commonAncestor ? {\n          id: commonAncestor.id,\n          createdAt: commonAncestor.createdAt,\n        } : null,\n      });\n    } catch (error) {\n      console.error(\"Error initiating merge:\", error);\n      res.status(500).json({ message: \"Failed to initiate merge\" });\n    }\n  });\n\n  // GET /api/merge-events/:mergeEventId - Get merge status and conflicts\n  app.get('/api/merge-events/:mergeEventId', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const mergeEvents = await storage.getMergeEvents(''); // We need to fetch all and filter\n      const mergeEvent = mergeEvents.find(e => e.id === req.params.mergeEventId);\n      \n      if (!mergeEvent) {\n        return res.status(404).json({ message: \"Merge event not found\" });\n      }\n\n      // Get document and check permissions\n      const document = await storage.getDocument(mergeEvent.documentId);\n      if (!document) {\n        return res.status(404).json({ message: \"Document not found\" });\n      }\n\n      const project = await storage.getProject(document.projectId);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      const userRole = project.ownerId === userId ? 'owner' : await storage.getUserRole(document.projectId, userId);\n      \n      // Reader role has no access to version control features\n      if (!userRole || userRole === 'reader') {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      res.json(mergeEvent);\n    } catch (error) {\n      console.error(\"Error fetching merge event:\", error);\n      res.status(500).json({ message: \"Failed to fetch merge event\" });\n    }\n  });\n\n  // PATCH /api/merge-events/:mergeEventId/resolve - Resolve merge conflicts\n  app.patch('/api/merge-events/:mergeEventId/resolve', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const mergeEvents = await storage.getMergeEvents(''); // We need to fetch all and filter\n      const mergeEvent = mergeEvents.find(e => e.id === req.params.mergeEventId);\n      \n      if (!mergeEvent) {\n        return res.status(404).json({ message: \"Merge event not found\" });\n      }\n\n      if (mergeEvent.status !== 'conflicted') {\n        return res.status(400).json({ message: \"Merge event has no conflicts to resolve\" });\n      }\n\n      // Get document and check permissions\n      const document = await storage.getDocument(mergeEvent.documentId);\n      if (!document) {\n        return res.status(404).json({ message: \"Document not found\" });\n      }\n\n      const project = await storage.getProject(document.projectId);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      const userRole = project.ownerId === userId ? 'owner' : await storage.getUserRole(document.projectId, userId);\n      \n      // Only owner and editor can resolve conflicts\n      if (!userRole || (userRole !== 'owner' && userRole !== 'editor')) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n\n      const resolveSchema = z.object({\n        resolvedContent: z.string(),\n        resolvedYdocState: z.string().nullable().optional(),\n        wordCount: z.number().optional(),\n      });\n\n      const validatedData = resolveSchema.parse(req.body);\n      \n      // Create merged version in target branch\n      const mergedVersion = await storage.createBranchVersion(\n        mergeEvent.targetBranchId,\n        validatedData.resolvedContent,\n        validatedData.resolvedYdocState || null,\n        userId,\n        validatedData.wordCount\n      );\n\n      // Update merge event as completed\n      await storage.updateMergeEvent(req.params.mergeEventId, 'completed', {\n        ...(mergeEvent.metadata as any),\n        mergedVersionId: mergedVersion.id,\n        resolvedBy: userId,\n        resolvedAt: new Date(),\n      });\n\n      res.json({\n        success: true,\n        mergedVersion,\n        message: \"Merge conflicts resolved successfully\"\n      });\n    } catch (error) {\n      console.error(\"Error resolving merge conflicts:\", error);\n      res.status(500).json({ message: \"Failed to resolve merge conflicts\" });\n    }\n  });\n\n  // GET /api/documents/:id/merge-history - Get document merge history\n  app.get('/api/documents/:id/merge-history', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const document = await storage.getDocument(req.params.id);\n      \n      if (!document) {\n        return res.status(404).json({ message: \"Document not found\" });\n      }\n\n      const project = await storage.getProject(document.projectId);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      const userRole = project.ownerId === userId ? 'owner' : await storage.getUserRole(document.projectId, userId);\n      \n      // Reader role has no access to version control features\n      if (!userRole || userRole === 'reader') {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const mergeEvents = await storage.getMergeEvents(req.params.id);\n      \n      // Enrich merge events with branch information\n      const enrichedEvents = await Promise.all(\n        mergeEvents.map(async (event) => {\n          const sourceBranch = await storage.getBranch(event.sourceBranchId);\n          const targetBranch = await storage.getBranch(event.targetBranchId);\n          return {\n            ...event,\n            sourceBranch: sourceBranch ? { id: sourceBranch.id, name: sourceBranch.name } : null,\n            targetBranch: targetBranch ? { id: targetBranch.id, name: targetBranch.name } : null,\n          };\n        })\n      );\n\n      res.json(enrichedEvents);\n    } catch (error) {\n      console.error(\"Error fetching merge history:\", error);\n      res.status(500).json({ message: \"Failed to fetch merge history\" });\n    }\n  });\n\n  // AI Assistant routes\n  app.post('/api/ai/generate', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { intent, persona, project_id, context_refs, params, userPrompt } = req.body;\n\n      // Get user info to check subscription plan\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Check usage limits\n      const startOfMonth = new Date();\n      startOfMonth.setDate(1);\n      startOfMonth.setHours(0, 0, 0, 0);\n      \n      const usage = await storage.getUserAiUsage(userId, startOfMonth);\n      const { AI_LIMITS } = await import('./openai');\n      const userPlan = (user.subscriptionPlan || 'free') as keyof typeof AI_LIMITS;\n      const limit = AI_LIMITS[userPlan]?.monthly_generations || AI_LIMITS.free.monthly_generations;\n      \n      // Enforce limit (unless unlimited)\n      if (limit !== -1 && usage.count >= limit) {\n        return res.status(429).json({ \n          message: \"AI usage limit reached for this month\",\n          used: usage.count,\n          limit: limit\n        });\n      }\n\n      // Validate project access and fetch project context\n      let projectContext;\n      if (project_id) {\n        const project = await storage.getProject(project_id);\n        if (!project) {\n          return res.status(404).json({ message: \"Project not found\" });\n        }\n\n        const hasAccess = project.ownerId === userId || \n          project.collaborators.some(c => c.userId === userId);\n        \n        if (!hasAccess) {\n          return res.status(403).json({ message: \"Access denied\" });\n        }\n\n        // Fetch project context (characters, worldbuilding, timeline)\n        projectContext = await fetchProjectContext(project_id, storage);\n      }\n\n      const aiRequest: AiRequest = {\n        intent,\n        persona,\n        project_id,\n        context_refs,\n        project_context: projectContext,\n        params\n      };\n\n      const result = await generateContent(aiRequest, userPrompt);\n\n      // Save generation to database\n      await storage.saveAiGeneration({\n        projectId: project_id,\n        userId,\n        persona,\n        prompt: userPrompt,\n        response: typeof result.content === 'string' ? result.content : JSON.stringify(result.content),\n        metadata: result.metadata\n      });\n\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error generating AI content:\", error);\n      res.status(500).json({ message: \"Failed to generate content\" });\n    }\n  });\n\n  // GET /api/ai/usage - Get user's current AI usage and limits\n  app.get('/api/ai/usage', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Get current month usage\n      const startOfMonth = new Date();\n      startOfMonth.setDate(1);\n      startOfMonth.setHours(0, 0, 0, 0);\n      \n      const usage = await storage.getUserAiUsage(userId, startOfMonth);\n      const { AI_LIMITS } = await import('./openai');\n      const userPlan = (user.subscriptionPlan || 'free') as keyof typeof AI_LIMITS;\n      const limit = AI_LIMITS[userPlan]?.monthly_generations || AI_LIMITS.free.monthly_generations;\n      \n      // Calculate reset date (first day of next month)\n      const resetDate = new Date(startOfMonth);\n      resetDate.setMonth(resetDate.getMonth() + 1);\n      \n      res.json({\n        used: usage.count,\n        limit: limit,\n        remaining: limit === -1 ? -1 : Math.max(0, limit - usage.count),\n        tokens_used: usage.totalTokens,\n        resetDate: resetDate.toISOString(),\n        plan: userPlan\n      });\n    } catch (error) {\n      console.error(\"Error fetching AI usage:\", error);\n      res.status(500).json({ message: \"Failed to fetch AI usage\" });\n    }\n  });\n\n  // Specialized AI endpoint helpers\n  app.post('/api/ai/muse', isAuthenticated, async (req: any, res) => {\n    try {\n      const { projectId, sceneData } = req.body;\n      \n      // Fetch project context\n      const projectContext = projectId ? await fetchProjectContext(projectId, storage) : undefined;\n      \n      // Pass project context to the prompt builder\n      const userPrompt = buildMusePrompt({\n        ...sceneData,\n        projectContext\n      });\n      \n      const aiRequest: AiRequest = {\n        intent: \"draft_scene\",\n        persona: \"muse\",\n        project_id: projectId,\n        project_context: projectContext,\n        params: {\n          max_tokens: 800\n        }\n      };\n\n      const result = await generateContent(aiRequest, userPrompt);\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error with Muse generation:\", error);\n      res.status(500).json({ message: \"Failed to generate scene\" });\n    }\n  });\n\n  app.post('/api/ai/editor', isAuthenticated, async (req: any, res) => {\n    try {\n      const { projectId, editData } = req.body;\n      \n      // Fetch project context\n      const projectContext = projectId ? await fetchProjectContext(projectId, storage) : undefined;\n      \n      // Pass project context to the prompt builder\n      const userPrompt = buildEditorPrompt({\n        ...editData,\n        projectContext\n      });\n      \n      const aiRequest: AiRequest = {\n        intent: \"edit_paragraph\",\n        persona: \"editor\",\n        project_id: projectId,\n        project_context: projectContext,\n        params: {\n          max_tokens: 400\n        }\n      };\n\n      const result = await generateContent(aiRequest, userPrompt);\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error with Editor generation:\", error);\n      res.status(500).json({ message: \"Failed to edit content\" });\n    }\n  });\n\n  app.post('/api/ai/coach', isAuthenticated, async (req: any, res) => {\n    try {\n      const { projectId, outlineData } = req.body;\n      \n      // Fetch project context\n      const projectContext = projectId ? await fetchProjectContext(projectId, storage) : undefined;\n      \n      // Pass project context to the prompt builder\n      const userPrompt = buildCoachPrompt({\n        ...outlineData,\n        projectContext\n      });\n      \n      const aiRequest: AiRequest = {\n        intent: \"generate_outline\",\n        persona: \"coach\",\n        project_id: projectId,\n        project_context: projectContext,\n        params: {\n          max_tokens: 600\n        }\n      };\n\n      const result = await generateContent(aiRequest, userPrompt);\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error with Coach generation:\", error);\n      res.status(500).json({ message: \"Failed to generate outline\" });\n    }\n  });\n\n  // Advanced Analysis Routes\n  app.post('/api/projects/:id/analysis/style', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const projectId = req.params.id;\n      \n      // Check project access and premium status\n      const project = await storage.getProject(projectId);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      const hasAccess = project.ownerId === userId || \n        project.collaborators.some(c => c.userId === userId);\n      \n      if (!hasAccess) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      // Check premium subscription\n      const user = await storage.getUser(userId);\n      console.log('User subscription check:', { userId, subscriptionPlan: user?.subscriptionPlan, subscriptionStatus: user?.subscriptionStatus });\n      if (!user?.subscriptionPlan || !['professional', 'enterprise'].includes(user.subscriptionPlan)) {\n        return res.status(403).json({ \n          message: \"This feature requires a Professional or Enterprise subscription\",\n          requiresUpgrade: true\n        });\n      }\n\n      // Check if we have cached results (within 24 hours)\n      const cacheKey = `style_analysis_${projectId}`;\n      const cached = await storage.getAnalysisCache(cacheKey);\n      if (cached && cached.timestamp && new Date(cached.timestamp).getTime() > Date.now() - 86400000) {\n        return res.json(cached.data);\n      }\n\n      // Get project documents\n      const documents = await storage.getProjectDocuments(projectId);\n      if (!documents || documents.length === 0) {\n        return res.status(400).json({ message: \"No documents found for analysis\" });\n      }\n\n      // Perform style analysis\n      const analysisRequest: StyleAnalysisRequest = {\n        documents: documents.map(d => ({\n          id: d.id,\n          title: d.title,\n          content: d.content || ''\n        })),\n        projectContext: project.genre || undefined\n      };\n      \n      console.log('Analysis request documents count:', analysisRequest.documents.length);\n      console.log('First document sample:', analysisRequest.documents[0]?.content?.substring(0, 100));\n\n      const result = await analyzeWritingStyle(analysisRequest);\n      console.log('Analysis result data keys:', Object.keys(result.data || {}));\n      console.log('Analysis result recommendations count:', result.recommendations?.length || 0);\n\n      // Cache the results\n      await storage.saveAnalysisCache(cacheKey, result);\n\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error in style analysis:\", error);\n      res.status(500).json({ message: \"Failed to analyze writing style\" });\n    }\n  });\n\n  app.post('/api/projects/:id/analysis/plot', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const projectId = req.params.id;\n      \n      // Check project access and premium status\n      const project = await storage.getProject(projectId);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      const hasAccess = project.ownerId === userId || \n        project.collaborators.some(c => c.userId === userId);\n      \n      if (!hasAccess) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      // Check premium subscription\n      const user = await storage.getUser(userId);\n      console.log('User subscription check:', { userId, subscriptionPlan: user?.subscriptionPlan, subscriptionStatus: user?.subscriptionStatus });\n      if (!user?.subscriptionPlan || !['professional', 'enterprise'].includes(user.subscriptionPlan)) {\n        return res.status(403).json({ \n          message: \"This feature requires a Professional or Enterprise subscription\",\n          requiresUpgrade: true\n        });\n      }\n\n      // Check cache\n      const cacheKey = `plot_analysis_${projectId}`;\n      const cached = await storage.getAnalysisCache(cacheKey);\n      if (cached && cached.timestamp && new Date(cached.timestamp).getTime() > Date.now() - 86400000) {\n        return res.json(cached.data);\n      }\n\n      // Get project data\n      const documents = await storage.getProjectDocuments(projectId);\n      const timeline = await storage.getProjectTimeline(projectId);\n      const characters = await storage.getProjectCharacters(projectId);\n\n      if (!documents || documents.length === 0) {\n        return res.status(400).json({ message: \"No documents found for analysis\" });\n      }\n\n      // Perform plot consistency analysis\n      const analysisRequest: PlotConsistencyRequest = {\n        documents: documents.map(d => ({\n          id: d.id,\n          title: d.title,\n          content: d.content || '',\n          orderIndex: d.orderIndex || 0\n        })),\n        timeline: timeline.map(t => ({\n          title: t.title,\n          date: t.date || '',\n          description: t.description || ''\n        })),\n        characters: characters.map(c => ({\n          name: c.name,\n          description: c.description || ''\n        }))\n      };\n\n      const result = await analyzePlotConsistency(analysisRequest);\n\n      // Cache results\n      await storage.saveAnalysisCache(cacheKey, result);\n\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error in plot consistency analysis:\", error);\n      res.status(500).json({ message: \"Failed to analyze plot consistency\" });\n    }\n  });\n\n  app.post('/api/projects/:id/analysis/character/:characterId', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const projectId = req.params.id;\n      const characterId = req.params.characterId;\n      \n      // Check project access and premium status\n      const project = await storage.getProject(projectId);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      const hasAccess = project.ownerId === userId || \n        project.collaborators.some(c => c.userId === userId);\n      \n      if (!hasAccess) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      // Check premium subscription\n      const user = await storage.getUser(userId);\n      console.log('User subscription check:', { userId, subscriptionPlan: user?.subscriptionPlan, subscriptionStatus: user?.subscriptionStatus });\n      if (!user?.subscriptionPlan || !['professional', 'enterprise'].includes(user.subscriptionPlan)) {\n        return res.status(403).json({ \n          message: \"This feature requires a Professional or Enterprise subscription\",\n          requiresUpgrade: true\n        });\n      }\n\n      // Get character\n      const character = await storage.getCharacter(characterId);\n      if (!character || character.projectId !== projectId) {\n        return res.status(404).json({ message: \"Character not found\" });\n      }\n\n      // Check cache\n      const cacheKey = `character_analysis_${characterId}`;\n      const cached = await storage.getAnalysisCache(cacheKey);\n      if (cached && cached.timestamp && new Date(cached.timestamp).getTime() > Date.now() - 86400000) {\n        return res.json(cached.data);\n      }\n\n      // Get project documents\n      const documents = await storage.getProjectDocuments(projectId);\n\n      if (!documents || documents.length === 0) {\n        return res.status(400).json({ message: \"No documents found for analysis\" });\n      }\n\n      // Perform character development analysis\n      const analysisRequest: CharacterDevelopmentRequest = {\n        character: {\n          name: character.name,\n          description: character.description || '',\n          background: character.background || undefined\n        },\n        documents: documents.map(d => ({\n          id: d.id,\n          title: d.title,\n          content: d.content || '',\n          orderIndex: d.orderIndex || 0\n        }))\n      };\n\n      const result = await analyzeCharacterDevelopment(analysisRequest);\n\n      // Cache results\n      await storage.saveAnalysisCache(cacheKey, result);\n\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error in character development analysis:\", error);\n      res.status(500).json({ message: \"Failed to analyze character development\" });\n    }\n  });\n\n  app.post('/api/projects/:id/analysis/narrative', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const projectId = req.params.id;\n      \n      // Check project access and premium status\n      const project = await storage.getProject(projectId);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      const hasAccess = project.ownerId === userId || \n        project.collaborators.some(c => c.userId === userId);\n      \n      if (!hasAccess) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      // Check premium subscription\n      const user = await storage.getUser(userId);\n      console.log('User subscription check:', { userId, subscriptionPlan: user?.subscriptionPlan, subscriptionStatus: user?.subscriptionStatus });\n      if (!user?.subscriptionPlan || !['professional', 'enterprise'].includes(user.subscriptionPlan)) {\n        return res.status(403).json({ \n          message: \"This feature requires a Professional or Enterprise subscription\",\n          requiresUpgrade: true\n        });\n      }\n\n      // Check cache\n      const cacheKey = `narrative_analysis_${projectId}`;\n      const cached = await storage.getAnalysisCache(cacheKey);\n      if (cached && cached.timestamp && new Date(cached.timestamp).getTime() > Date.now() - 86400000) {\n        return res.json(cached.data);\n      }\n\n      // Get project documents\n      const documents = await storage.getProjectDocuments(projectId);\n\n      if (!documents || documents.length === 0) {\n        return res.status(400).json({ message: \"No documents found for analysis\" });\n      }\n\n      // Perform narrative flow analysis\n      const analysisRequest: NarrativeFlowRequest = {\n        documents: documents.map(d => ({\n          id: d.id,\n          title: d.title,\n          content: d.content || '',\n          orderIndex: d.orderIndex || 0\n        })),\n        genre: project.genre || undefined,\n        targetPacing: req.body.targetPacing || 'moderate'\n      };\n\n      const result = await analyzeNarrativeFlow(analysisRequest);\n\n      // Cache results\n      await storage.saveAnalysisCache(cacheKey, result);\n\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error in narrative flow analysis:\", error);\n      res.status(500).json({ message: \"Failed to analyze narrative flow\" });\n    }\n  });\n\n  // Get cached analysis results\n  app.get('/api/projects/:id/analysis/cache/:type', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const projectId = req.params.id;\n      const analysisType = req.params.type;\n      \n      // Validate analysis type\n      const validTypes = ['style', 'plot', 'narrative'];\n      if (!validTypes.includes(analysisType)) {\n        return res.status(400).json({ message: \"Invalid analysis type\" });\n      }\n\n      // Check project access\n      const project = await storage.getProject(projectId);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      const hasAccess = project.ownerId === userId || \n        project.collaborators.some(c => c.userId === userId);\n      \n      if (!hasAccess) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      // Get cached analysis\n      const cacheKey = `${analysisType}_analysis_${projectId}`;\n      const cached = await storage.getAnalysisCache(cacheKey);\n\n      if (!cached) {\n        return res.status(404).json({ message: \"No cached analysis found\" });\n      }\n\n      res.json(cached);\n    } catch (error) {\n      console.error(\"Error fetching cached analysis:\", error);\n      res.status(500).json({ message: \"Failed to fetch cached analysis\" });\n    }\n  });\n\n  // Collaboration routes\n  app.post('/api/projects/:projectId/collaborators', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const project = await storage.getProject(req.params.projectId);\n      \n      if (!project || project.ownerId !== userId) {\n        return res.status(403).json({ message: \"Only project owners can add collaborators\" });\n      }\n\n      const validatedData = insertProjectCollaboratorSchema.parse({\n        ...req.body,\n        projectId: req.params.projectId\n      });\n      \n      const collaborator = await storage.addProjectCollaborator(validatedData);\n      \n      const user = await storage.getUser(userId);\n      const addedUser = await storage.getUser(req.body.userId);\n      \n      // Notify collaborators about new collaborator added\n      try {\n        const displayName = user?.firstName || user?.email || 'A user';\n        await notifyProjectCollaborators(storage, req.params.projectId, userId, {\n          type: \"collaborator_added\",\n          title: \"New Collaborator Added\",\n          message: `${displayName} added a new collaborator`,\n          actorId: userId,\n        });\n      } catch (error) {\n        console.error(\"Failed to create notifications:\", error);\n      }\n      \n      await logActivity(storage, req.params.projectId, userId, {\n        type: \"collaborator_added\",\n        description: `${getUserDisplayName(user)} added ${getUserDisplayName(addedUser)} as a collaborator`,\n      });\n      \n      res.json(collaborator);\n    } catch (error) {\n      console.error(\"Error adding collaborator:\", error);\n      res.status(500).json({ message: \"Failed to add collaborator\" });\n    }\n  });\n\n  app.delete('/api/projects/:projectId/collaborators/:userId', isAuthenticated, async (req: any, res) => {\n    try {\n      const currentUserId = req.user.claims.sub;\n      const project = await storage.getProject(req.params.projectId);\n      \n      if (!project || project.ownerId !== currentUserId) {\n        return res.status(403).json({ message: \"Only project owners can remove collaborators\" });\n      }\n\n      const removedUser = await storage.getUser(req.params.userId);\n      \n      await storage.removeProjectCollaborator(req.params.projectId, req.params.userId);\n      \n      const user = await storage.getUser(currentUserId);\n      \n      // Notify collaborators about collaborator removal\n      try {\n        const displayName = user?.firstName || user?.email || 'A user';\n        await notifyProjectCollaborators(storage, req.params.projectId, currentUserId, {\n          type: \"collaborator_removed\",\n          title: \"Collaborator Removed\",\n          message: `${displayName} removed a collaborator`,\n          actorId: currentUserId,\n        });\n      } catch (error) {\n        console.error(\"Failed to create notifications:\", error);\n      }\n      \n      await logActivity(storage, req.params.projectId, currentUserId, {\n        type: \"collaborator_removed\",\n        description: `${getUserDisplayName(user)} removed ${getUserDisplayName(removedUser)} as a collaborator`,\n      });\n      \n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error removing collaborator:\", error);\n      res.status(500).json({ message: \"Failed to remove collaborator\" });\n    }\n  });\n\n  // Export route with multiple format support\n  app.get('/api/projects/:projectId/export', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const format = req.query.format || 'json'; // Default to JSON\n      const project = await storage.getProject(req.params.projectId);\n      \n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      // Check project access - user must own or be collaborator\n      const hasProjectAccess = project.ownerId === userId || \n        project.collaborators.some(c => c.userId === userId);\n      \n      if (!hasProjectAccess) {\n        return res.status(403).json({ message: \"Access denied - not authorized for this project\" });\n      }\n\n      // Check premium format access for subscription plans\n      const premiumFormats = ['pdf', 'epub', 'docx'];\n      if (premiumFormats.includes(format.toLowerCase())) {\n        const user = await storage.getUser(userId);\n        const userPlan = user?.subscriptionPlan || 'starter';\n        const hasAccessToPremium = ['professional', 'enterprise', 'pro'].includes(userPlan);\n        \n        if (!hasAccessToPremium) {\n          return res.status(403).json({ \n            message: \"Premium feature\", \n            description: `${format.toUpperCase()} export is available for Professional plan subscribers. Upgrade to access advanced export formats.`,\n            upgradeRequired: true \n          });\n        }\n      }\n\n      // Prepare export data\n      const exportData = {\n        project: {\n          title: project.title,\n          description: project.description,\n          genre: project.genre,\n          targetWordCount: project.targetWordCount,\n          currentWordCount: project.currentWordCount,\n        },\n        characters: project.characters,\n        worldbuilding: project.worldbuildingEntries,\n        timeline: project.timelineEvents,\n        documents: project.documents,\n        exportedAt: new Date().toISOString(),\n      };\n\n      const filename = project.title.replace(/[^a-z0-9]/gi, '_').toLowerCase();\n\n      switch (format.toLowerCase()) {\n        case 'pdf':\n          // PDF format - requires Professional plan or above\n          const { ExportGenerator } = await import('./export-utils');\n          const pdfBuffer = await ExportGenerator.generatePDF(exportData);\n          res.setHeader('Content-Type', 'application/pdf');\n          res.setHeader('Content-Disposition', `attachment; filename=\"${filename}_export.pdf\"`);\n          res.send(pdfBuffer);\n          break;\n\n        case 'epub':\n          // ePub format - requires Professional plan or above\n          const { ExportGenerator: EpubGenerator } = await import('./export-utils');\n          const epubBuffer = await EpubGenerator.generateEPub(exportData);\n          res.setHeader('Content-Type', 'application/epub+zip');\n          res.setHeader('Content-Disposition', `attachment; filename=\"${filename}_export.epub\"`);\n          res.send(epubBuffer);\n          break;\n\n        case 'docx':\n          // DOCX format - requires Professional plan or above\n          const { ExportGenerator: DocxGenerator } = await import('./export-utils');\n          const docxBuffer = await DocxGenerator.generateDOCX(exportData);\n          res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document');\n          res.setHeader('Content-Disposition', `attachment; filename=\"${filename}_export.docx\"`);\n          res.send(docxBuffer);\n          break;\n\n        case 'html':\n          // HTML format\n          const { ExportGenerator: HtmlGenerator } = await import('./export-utils');\n          const htmlContent = await HtmlGenerator.generateHTML(exportData);\n          res.setHeader('Content-Type', 'text/html; charset=utf-8');\n          res.setHeader('Content-Disposition', `attachment; filename=\"${filename}_export.html\"`);\n          res.send(htmlContent);\n          break;\n\n        case 'json':\n        default:\n          // JSON format (default)\n          res.setHeader('Content-Type', 'application/json');\n          res.setHeader('Content-Disposition', `attachment; filename=\"${filename}_export.json\"`);\n          res.json(exportData);\n          break;\n      }\n    } catch (error) {\n      console.error(\"Error exporting project:\", error);\n      res.status(500).json({ message: \"Failed to export project\" });\n    }\n  });\n\n  // Collaboration REST endpoints\n  \n  // Get initial Yjs document collaboration state\n  app.get('/api/documents/:id/collaboration-state', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const document = await storage.getDocument(req.params.id);\n      \n      if (!document) {\n        return res.status(404).json({ message: \"Document not found\" });\n      }\n\n      const project = await storage.getProject(document.projectId);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      const hasAccess = project.ownerId === userId || \n        project.collaborators.some(c => c.userId === userId);\n      \n      if (!hasAccess) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const state = await storage.getCollaborationState(req.params.id);\n      res.json({ \n        state: state?.ydocState || null,\n        documentId: req.params.id,\n        projectId: document.projectId \n      });\n    } catch (error) {\n      console.error(\"Error fetching collaboration state:\", error);\n      res.status(500).json({ message: \"Failed to fetch collaboration state\" });\n    }\n  });\n\n  // Get document comments\n  app.get('/api/documents/:id/comments', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const document = await storage.getDocument(req.params.id);\n      \n      if (!document) {\n        return res.status(404).json({ message: \"Document not found\" });\n      }\n\n      const project = await storage.getProject(document.projectId);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      const hasAccess = project.ownerId === userId || \n        project.collaborators.some(c => c.userId === userId);\n      \n      if (!hasAccess) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const comments = await storage.getDocumentComments(req.params.id);\n      res.json(comments);\n    } catch (error) {\n      console.error(\"Error fetching comments:\", error);\n      res.status(500).json({ message: \"Failed to fetch comments\" });\n    }\n  });\n\n  // Create new comment\n  app.post('/api/documents/:id/comments', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { content, range } = req.body;\n      \n      if (!content) {\n        return res.status(400).json({ message: \"Comment content is required\" });\n      }\n\n      const document = await storage.getDocument(req.params.id);\n      \n      if (!document) {\n        return res.status(404).json({ message: \"Document not found\" });\n      }\n\n      const project = await storage.getProject(document.projectId);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      const userRole = project.ownerId === userId ? 'owner' : await storage.getUserRole(document.projectId, userId);\n      \n      if (!userRole || userRole === 'reader') {\n        return res.status(403).json({ message: \"Insufficient permissions to add comments\" });\n      }\n\n      const comment = await storage.createComment(req.params.id, userId, content, range);\n      res.json(comment);\n    } catch (error) {\n      console.error(\"Error creating comment:\", error);\n      res.status(500).json({ message: \"Failed to create comment\" });\n    }\n  });\n\n  // Update comment\n  app.put('/api/comments/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { content, resolved } = req.body;\n      \n      // Get comment to check permissions\n      const comments = await db.select().from(documentComments).where(eq(documentComments.id, req.params.id));\n      const comment = comments[0];\n      \n      if (!comment) {\n        return res.status(404).json({ message: \"Comment not found\" });\n      }\n\n      // Check if user owns the comment or has edit permissions\n      if (comment.authorId !== userId) {\n        const document = await storage.getDocument(comment.documentId);\n        if (!document) {\n          return res.status(404).json({ message: \"Document not found\" });\n        }\n        \n        const project = await storage.getProject(document.projectId);\n        if (!project) {\n          return res.status(404).json({ message: \"Project not found\" });\n        }\n        \n        const userRole = project.ownerId === userId ? 'owner' : await storage.getUserRole(document.projectId, userId);\n        if (!userRole || userRole === 'reader') {\n          return res.status(403).json({ message: \"Insufficient permissions to update comment\" });\n        }\n      }\n\n      const updated = await storage.updateComment(req.params.id, { content, resolved });\n      res.json(updated);\n    } catch (error) {\n      console.error(\"Error updating comment:\", error);\n      res.status(500).json({ message: \"Failed to update comment\" });\n    }\n  });\n\n  // Delete comment\n  app.delete('/api/comments/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      \n      // Get comment to check permissions\n      const comments = await db.select().from(documentComments).where(eq(documentComments.id, req.params.id));\n      const comment = comments[0];\n      \n      if (!comment) {\n        return res.status(404).json({ message: \"Comment not found\" });\n      }\n\n      // Check if user owns the comment or has owner/editor permissions\n      if (comment.authorId !== userId) {\n        const document = await storage.getDocument(comment.documentId);\n        if (!document) {\n          return res.status(404).json({ message: \"Document not found\" });\n        }\n        \n        const project = await storage.getProject(document.projectId);\n        if (!project) {\n          return res.status(404).json({ message: \"Project not found\" });\n        }\n        \n        const userRole = project.ownerId === userId ? 'owner' : await storage.getUserRole(document.projectId, userId);\n        if (!userRole || (userRole !== 'owner' && userRole !== 'editor')) {\n          return res.status(403).json({ message: \"Insufficient permissions to delete comment\" });\n        }\n      }\n\n      await storage.deleteComment(req.params.id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting comment:\", error);\n      res.status(500).json({ message: \"Failed to delete comment\" });\n    }\n  });\n\n  // Get online users in project\n  app.get('/api/projects/:id/presence', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const project = await storage.getProject(req.params.id);\n      \n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      const hasAccess = project.ownerId === userId || \n        project.collaborators.some(c => c.userId === userId);\n      \n      if (!hasAccess) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const presence = await storage.getProjectPresence(req.params.id);\n      res.json(presence);\n    } catch (error) {\n      console.error(\"Error fetching presence:\", error);\n      res.status(500).json({ message: \"Failed to fetch presence\" });\n    }\n  });\n\n  // Notification routes\n  app.get('/api/notifications', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 50;\n      const notifications = await storage.getNotifications(userId, limit);\n      res.json(notifications);\n    } catch (error) {\n      console.error(\"Error fetching notifications:\", error);\n      res.status(500).json({ message: \"Failed to fetch notifications\" });\n    }\n  });\n\n  app.get('/api/notifications/unread-count', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const count = await storage.getUnreadNotificationCount(userId);\n      res.json({ count });\n    } catch (error) {\n      console.error(\"Error fetching unread count:\", error);\n      res.status(500).json({ message: \"Failed to fetch unread count\" });\n    }\n  });\n\n  app.patch('/api/notifications/:id/read', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      await storage.markNotificationAsRead(req.params.id, userId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error marking notification as read:\", error);\n      res.status(500).json({ message: \"Failed to mark notification as read\" });\n    }\n  });\n\n  app.post('/api/notifications/read-all', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      await storage.markAllNotificationsAsRead(userId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error marking all notifications as read:\", error);\n      res.status(500).json({ message: \"Failed to mark all notifications as read\" });\n    }\n  });\n\n  app.delete('/api/notifications/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      await storage.deleteNotification(req.params.id, userId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting notification:\", error);\n      res.status(500).json({ message: \"Failed to delete notification\" });\n    }\n  });\n\n  // Activity routes\n  app.get('/api/projects/:projectId/activities', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { projectId } = req.params;\n      \n      const project = await storage.getProject(projectId);\n      \n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      const hasAccess = project.ownerId === userId || \n        project.collaborators.some(c => c.userId === userId);\n      \n      if (!hasAccess) {\n        return res.status(403).json({ message: \"Forbidden\" });\n      }\n\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 50;\n      const activities = await storage.getProjectActivities(projectId, limit);\n      \n      res.json(activities);\n    } catch (error) {\n      console.error(\"Error fetching project activities:\", error);\n      res.status(500).json({ message: \"Failed to fetch activities\" });\n    }\n  });\n\n  app.get('/api/activities', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      \n      const userProjects = await storage.getUserProjects(userId);\n      const projectIds = userProjects.map(p => p.id);\n      \n      if (projectIds.length === 0) {\n        return res.json([]);\n      }\n\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 50;\n      \n      const activities = await db\n        .select()\n        .from(activitiesTable)\n        .where(inArray(activitiesTable.projectId, projectIds))\n        .orderBy(desc(activitiesTable.createdAt))\n        .limit(limit);\n      \n      res.json(activities);\n    } catch (error) {\n      console.error(\"Error fetching user activities:\", error);\n      res.status(500).json({ message: \"Failed to fetch activities\" });\n    }\n  });\n\n  // Search route\n  app.get('/api/search', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const query = req.query.q as string;\n      const limit = parseInt(req.query.limit as string) || 20;\n\n      if (!query || query.trim().length < 2) {\n        return res.status(400).json({ error: \"Search query must be at least 2 characters\" });\n      }\n\n      const results = await storage.searchContent(userId, query.trim(), limit);\n      res.json(results);\n    } catch (error) {\n      console.error(\"Search error:\", error);\n      res.status(500).json({ error: \"Failed to search content\" });\n    }\n  });\n\n  // Prompt Library routes\n  app.get(\"/api/prompts\", async (req, res) => {\n    try {\n      const prompts = await storage.getAllPrompts();\n      res.json(prompts);\n    } catch (error) {\n      console.error(\"Error fetching prompts:\", error);\n      res.status(500).json({ error: \"Failed to fetch prompts\" });\n    }\n  });\n\n  app.get(\"/api/prompts/category/:category\", async (req, res) => {\n    try {\n      const { category } = req.params;\n      const prompts = await storage.getPromptsByCategory(category);\n      res.json(prompts);\n    } catch (error) {\n      console.error(\"Error fetching prompts by category:\", error);\n      res.status(500).json({ error: \"Failed to fetch prompts by category\" });\n    }\n  });\n\n  app.get(\"/api/prompts/persona/:persona\", async (req, res) => {\n    try {\n      const { persona } = req.params;\n      const prompts = await storage.getPromptsByPersona(persona);\n      res.json(prompts);\n    } catch (error) {\n      console.error(\"Error fetching prompts by persona:\", error);\n      res.status(500).json({ error: \"Failed to fetch prompts by persona\" });\n    }\n  });\n\n  app.get(\"/api/prompts/featured\", async (req, res) => {\n    try {\n      const prompts = await storage.getFeaturedPrompts();\n      res.json(prompts);\n    } catch (error) {\n      console.error(\"Error fetching featured prompts:\", error);\n      res.status(500).json({ error: \"Failed to fetch featured prompts\" });\n    }\n  });\n\n  app.get(\"/api/prompts/search\", async (req, res) => {\n    try {\n      const query = req.query.q as string;\n      \n      if (!query || query.trim().length < 2) {\n        return res.status(400).json({ error: \"Search query must be at least 2 characters\" });\n      }\n      \n      const prompts = await storage.searchPrompts(query.trim());\n      res.json(prompts);\n    } catch (error) {\n      console.error(\"Error searching prompts:\", error);\n      res.status(500).json({ error: \"Failed to search prompts\" });\n    }\n  });\n\n  app.post(\"/api/prompts/:id/use\", isAuthenticated, async (req: any, res) => {\n    try {\n      const promptId = parseInt(req.params.id);\n      await storage.incrementPromptUsage(promptId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error incrementing prompt usage:\", error);\n      res.status(500).json({ error: \"Failed to track prompt usage\" });\n    }\n  });\n\n  app.get(\"/api/user/favorite-prompts\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const prompts = await storage.getUserFavoritePrompts(userId);\n      res.json(prompts);\n    } catch (error) {\n      console.error(\"Error fetching favorite prompts:\", error);\n      res.status(500).json({ error: \"Failed to fetch favorite prompts\" });\n    }\n  });\n\n  app.post(\"/api/user/favorite-prompts/:promptId\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const promptId = parseInt(req.params.promptId);\n      const favorite = await storage.addFavoritePrompt(userId, promptId);\n      res.json(favorite);\n    } catch (error: any) {\n      console.error(\"Error adding favorite prompt:\", error);\n      if (error.code === '23505') {\n        return res.status(400).json({ error: \"Prompt already in favorites\" });\n      }\n      res.status(500).json({ error: \"Failed to add favorite prompt\" });\n    }\n  });\n\n  app.delete(\"/api/user/favorite-prompts/:promptId\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const promptId = parseInt(req.params.promptId);\n      await storage.removeFavoritePrompt(userId, promptId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error removing favorite prompt:\", error);\n      res.status(500).json({ error: \"Failed to remove favorite prompt\" });\n    }\n  });\n\n  // Email routes\n  app.post('/api/emails/send', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      \n      const validationResult = insertEmailSchema.safeParse({\n        ...req.body,\n        userId,\n      });\n\n      if (!validationResult.success) {\n        const validationError = fromZodError(validationResult.error);\n        return res.status(400).json({ \n          message: \"Validation failed\", \n          error: validationError.message,\n          details: validationResult.error.errors \n        });\n      }\n\n      const { data } = validationResult;\n      const emailRecord = await sendEmail({\n        userId: data.userId,\n        to: data.to,\n        subject: data.subject,\n        htmlContent: data.htmlContent,\n        textContent: data.textContent || undefined,\n        cc: data.cc || undefined,\n        bcc: data.bcc || undefined,\n        templateId: data.templateId || undefined,\n        templateParams: (data.templateParams && typeof data.templateParams === 'object' && !Array.isArray(data.templateParams)) \n          ? data.templateParams as Record<string, any>\n          : undefined,\n      });\n\n      res.json(emailRecord);\n    } catch (error) {\n      console.error(\"Error sending email:\", error);\n      res.status(500).json({ message: \"Failed to send email\" });\n    }\n  });\n\n  app.post('/api/emails/batch', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { emails: emailList } = req.body;\n\n      if (!Array.isArray(emailList)) {\n        return res.status(400).json({ message: \"emails must be an array\" });\n      }\n\n      const validatedEmails = [];\n      const validationErrors = [];\n\n      for (let i = 0; i < emailList.length; i++) {\n        const validationResult = insertEmailSchema.safeParse({\n          ...emailList[i],\n          userId,\n        });\n\n        if (!validationResult.success) {\n          const validationError = fromZodError(validationResult.error);\n          validationErrors.push({\n            index: i,\n            message: validationError.message,\n            details: validationResult.error.errors,\n          });\n        } else {\n          validatedEmails.push(validationResult.data);\n        }\n      }\n\n      if (validationErrors.length > 0) {\n        return res.status(400).json({\n          message: \"Validation failed for one or more emails\",\n          errors: validationErrors,\n        });\n      }\n\n      const cleanedEmails = validatedEmails.map(data => ({\n        to: data.to,\n        subject: data.subject,\n        htmlContent: data.htmlContent,\n        textContent: data.textContent || undefined,\n        cc: data.cc || undefined,\n        bcc: data.bcc || undefined,\n        templateId: data.templateId || undefined,\n        templateParams: (data.templateParams && typeof data.templateParams === 'object' && !Array.isArray(data.templateParams))\n          ? data.templateParams as Record<string, any>\n          : undefined,\n      }));\n\n      const results = await sendBatchEmails({\n        userId,\n        emails: cleanedEmails,\n      });\n\n      res.json(results);\n    } catch (error) {\n      console.error(\"Error sending batch emails:\", error);\n      res.status(500).json({ message: \"Failed to send batch emails\" });\n    }\n  });\n\n  app.post('/api/emails/schedule', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      \n      if (!req.body.scheduledAt) {\n        return res.status(400).json({ \n          message: \"scheduledAt is required for scheduling emails\" \n        });\n      }\n\n      const scheduledAtDate = new Date(req.body.scheduledAt);\n      if (isNaN(scheduledAtDate.getTime())) {\n        return res.status(400).json({ \n          message: \"scheduledAt must be a valid date\" \n        });\n      }\n\n      const validationResult = insertEmailSchema.safeParse({\n        ...req.body,\n        userId,\n        scheduledAt: scheduledAtDate,\n      });\n\n      if (!validationResult.success) {\n        const validationError = fromZodError(validationResult.error);\n        return res.status(400).json({ \n          message: \"Validation failed\", \n          error: validationError.message,\n          details: validationResult.error.errors \n        });\n      }\n\n      const { data } = validationResult;\n      const emailRecord = await scheduleEmail({\n        userId: data.userId,\n        to: data.to,\n        subject: data.subject,\n        htmlContent: data.htmlContent,\n        textContent: data.textContent || undefined,\n        cc: data.cc || undefined,\n        bcc: data.bcc || undefined,\n        templateId: data.templateId || undefined,\n        templateParams: (data.templateParams && typeof data.templateParams === 'object' && !Array.isArray(data.templateParams))\n          ? data.templateParams as Record<string, any>\n          : undefined,\n        scheduledAt: scheduledAtDate,\n      });\n\n      res.json(emailRecord);\n    } catch (error) {\n      console.error(\"Error scheduling email:\", error);\n      res.status(500).json({ message: \"Failed to schedule email\" });\n    }\n  });\n\n  app.get('/api/emails/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const emailId = req.params.id;\n\n      const emailRecord = await getEmailStatus(emailId);\n\n      if (emailRecord.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      res.json(emailRecord);\n    } catch (error: any) {\n      console.error(\"Error getting email status:\", error);\n      if (error.message && error.message.includes('not found')) {\n        return res.status(404).json({ message: \"Email not found\" });\n      }\n      res.status(500).json({ message: \"Failed to get email status\" });\n    }\n  });\n\n  app.get('/api/emails', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { status, startDate, endDate, page, limit } = req.query;\n\n      const filters: any = {};\n\n      if (status) {\n        filters.status = status as 'draft' | 'scheduled' | 'sent' | 'failed';\n      }\n\n      if (startDate || endDate) {\n        filters.dateRange = {};\n        if (startDate) {\n          filters.dateRange.from = new Date(startDate as string);\n        }\n        if (endDate) {\n          filters.dateRange.to = new Date(endDate as string);\n        }\n      }\n\n      if (limit) {\n        filters.limit = parseInt(limit as string);\n      }\n\n      if (page) {\n        const pageNum = parseInt(page as string);\n        const pageSize = filters.limit || 50;\n        filters.offset = (pageNum - 1) * pageSize;\n      }\n\n      const result = await listUserEmails(userId, filters);\n\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error listing emails:\", error);\n      res.status(500).json({ message: \"Failed to list emails\" });\n    }\n  });\n\n  // Stripe subscription routes\n  app.get('/api/get-or-create-subscription', isAuthenticated, async (req: any, res) => {\n    const user = req.user;\n\n    if (user.stripeSubscriptionId) {\n      const stripeClient = getStripeClient();\n      const subscription = await stripeClient.subscriptions.retrieve(user.stripeSubscriptionId);\n\n      res.send({\n        subscriptionId: subscription.id,\n        clientSecret: subscription.latest_invoice && typeof subscription.latest_invoice === 'object' && 'payment_intent' in subscription.latest_invoice && subscription.latest_invoice.payment_intent && typeof subscription.latest_invoice.payment_intent === 'object' && 'client_secret' in subscription.latest_invoice.payment_intent ? subscription.latest_invoice.payment_intent.client_secret : undefined,\n      });\n\n      return;\n    }\n    \n    if (!user.email) {\n      throw new Error('No user email on file');\n    }\n\n    try {\n      const stripeClient = getStripeClient();\n      const customer = await stripeClient.customers.create({\n        email: user.email,\n        name: `${user.firstName || ''} ${user.lastName || ''}`.trim(),\n      });\n\n      await storage.updateUserStripeInfo(user.claims.sub, customer.id, '');\n\n      const subscription = await stripeClient.subscriptions.create({\n        customer: customer.id,\n        items: [{\n          price: process.env.STRIPE_PRICE_ID,\n        }],\n        payment_behavior: 'default_incomplete',\n        expand: ['latest_invoice.payment_intent'],\n      });\n\n      await storage.updateUserStripeInfo(user.claims.sub, customer.id, subscription.id);\n  \n      res.send({\n        subscriptionId: subscription.id,\n        clientSecret: subscription.latest_invoice && typeof subscription.latest_invoice === 'object' && 'payment_intent' in subscription.latest_invoice && subscription.latest_invoice.payment_intent && typeof subscription.latest_invoice.payment_intent === 'object' && 'client_secret' in subscription.latest_invoice.payment_intent ? subscription.latest_invoice.payment_intent.client_secret : undefined,\n      });\n    } catch (error: any) {\n      return res.status(400).send({ error: { message: error.message } });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":116586},"server/storage.ts":{"content":"import {\n  sessions,\n  users,\n  projects,\n  characters,\n  worldbuildingEntries,\n  timelineEvents,\n  documents,\n  documentVersions,\n  documentBranches,\n  branchMergeEvents,\n  projectCollaborators,\n  aiGenerations,\n  documentCollaborationStates,\n  documentComments,\n  collaborationPresence,\n  notifications,\n  activities,\n  prompts,\n  userFavoritePrompts,\n  type User,\n  type UpsertUser,\n  type Project,\n  type InsertProject,\n  type Character,\n  type InsertCharacter,\n  type WorldbuildingEntry,\n  type InsertWorldbuildingEntry,\n  type TimelineEvent,\n  type InsertTimelineEvent,\n  type Document,\n  type InsertDocument,\n  type DocumentVersion,\n  type InsertDocumentVersion,\n  type DocumentBranch,\n  type InsertDocumentBranch,\n  type BranchMergeEvent,\n  type InsertBranchMergeEvent,\n  type ProjectCollaborator,\n  type InsertProjectCollaborator,\n  type AiGeneration,\n  type ProjectWithCollaborators,\n  type DocumentWithVersions,\n  type DocumentBranchWithVersions,\n  type DocumentCollaborationState,\n  type DocumentComment,\n  type InsertDocumentComment,\n  type CollaborationPresence,\n  type InsertCollaborationPresence,\n  type Notification,\n  type InsertNotification,\n  type OnboardingProgress,\n  type Activity,\n  type InsertActivity,\n  type SearchResult,\n  type Prompt,\n  type UserFavoritePrompt,\n} from \"@shared/schema\";\nimport { calculateWordCount } from \"@shared/utils\";\nimport { db } from \"./db\";\nimport { eq, and, desc, asc, lt, sql, or, inArray } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // Session operations\n  getSession(sessionId: string): Promise<{ sid: string; sess: any; expire: Date } | undefined>;\n  \n  // User operations (mandatory for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  updateUserStripeInfo(userId: string, customerId: string, subscriptionId: string): Promise<User>;\n  getUserOnboarding(userId: string): Promise<OnboardingProgress | undefined>;\n  updateUserOnboarding(userId: string, progress: Partial<OnboardingProgress>): Promise<User>;\n\n  // Project operations\n  getUserProjects(userId: string): Promise<Project[]>;\n  getProject(id: string): Promise<ProjectWithCollaborators | undefined>;\n  createProject(project: InsertProject, ownerId: string): Promise<Project>;\n  updateProject(id: string, updates: Partial<InsertProject>): Promise<Project>;\n  deleteProject(id: string): Promise<void>;\n\n  // Collaboration operations\n  addProjectCollaborator(data: InsertProjectCollaborator): Promise<ProjectCollaborator>;\n  removeProjectCollaborator(projectId: string, userId: string): Promise<void>;\n  getUserRole(projectId: string, userId: string): Promise<string | undefined>;\n\n  // Character operations\n  getProjectCharacters(projectId: string): Promise<Character[]>;\n  getCharacter(id: string): Promise<Character | undefined>;\n  createCharacter(character: InsertCharacter): Promise<Character>;\n  updateCharacter(id: string, updates: Partial<InsertCharacter>): Promise<Character>;\n  deleteCharacter(id: string): Promise<void>;\n\n  // Worldbuilding operations\n  getProjectWorldbuilding(projectId: string): Promise<WorldbuildingEntry[]>;\n  getWorldbuildingEntry(id: string): Promise<WorldbuildingEntry | undefined>;\n  createWorldbuildingEntry(entry: InsertWorldbuildingEntry): Promise<WorldbuildingEntry>;\n  updateWorldbuildingEntry(id: string, updates: Partial<InsertWorldbuildingEntry>): Promise<WorldbuildingEntry>;\n  deleteWorldbuildingEntry(id: string): Promise<void>;\n\n  // Timeline operations\n  getProjectTimeline(projectId: string): Promise<TimelineEvent[]>;\n  getTimelineEvent(id: string): Promise<TimelineEvent | undefined>;\n  createTimelineEvent(event: InsertTimelineEvent): Promise<TimelineEvent>;\n  updateTimelineEvent(id: string, updates: Partial<InsertTimelineEvent>): Promise<TimelineEvent>;\n  deleteTimelineEvent(id: string): Promise<void>;\n  reorderTimelineEvents(projectId: string, eventId: string, newIndex: number, newDate?: string): Promise<TimelineEvent>;\n\n  // Document operations\n  getProjectDocuments(projectId: string): Promise<Document[]>;\n  getDocument(id: string): Promise<DocumentWithVersions | undefined>;\n  createDocument(document: InsertDocument & { authorId: string }): Promise<Document>;\n  updateDocument(id: string, updates: Partial<InsertDocument>, authorId: string): Promise<Document>;\n  deleteDocument(id: string): Promise<void>;\n\n  // AI generation operations\n  saveAiGeneration(generation: {\n    projectId: string;\n    userId: string;\n    persona: string;\n    prompt: string;\n    response: string;\n    metadata?: any;\n  }): Promise<AiGeneration>;\n  getUserAiGenerations(userId: string, limit?: number): Promise<AiGeneration[]>;\n  getUserAiUsage(userId: string, startDate: Date): Promise<{\n    count: number;\n    totalTokens: number;\n  }>;\n\n  // Analysis cache operations\n  saveAnalysisCache(key: string, data: any): Promise<void>;\n  getAnalysisCache(key: string): Promise<{ data: any; timestamp: Date } | undefined>;\n  clearAnalysisCache(projectId: string): Promise<void>;\n\n  // Comment CRUD operations\n  createComment(documentId: string, authorId: string, content: string, range?: { start: number; end: number }): Promise<DocumentComment>;\n  getDocumentComments(documentId: string): Promise<DocumentComment[]>;\n  updateComment(commentId: string, updates: { content?: string; resolved?: boolean }): Promise<DocumentComment>;\n  deleteComment(commentId: string): Promise<void>;\n  resolveComment(commentId: string): Promise<DocumentComment>;\n\n  // Collaboration state persistence\n  saveCollaborationState(documentId: string, ydocState: string): Promise<DocumentCollaborationState>;\n  getCollaborationState(documentId: string): Promise<DocumentCollaborationState | undefined>;\n\n  // Presence management\n  updatePresence(projectId: string, userId: string, documentId: string | null, status: 'online' | 'offline' | 'away', cursorPos?: { line: number; column: number }, color?: string): Promise<CollaborationPresence>;\n  getProjectPresence(projectId: string): Promise<CollaborationPresence[]>;\n  cleanupStalePresence(): Promise<void>;\n\n  // Branch operations\n  createBranch(documentId: string, name: string, description: string | null, parentBranchId: string | null, userId: string): Promise<DocumentBranch>;\n  getBranches(documentId: string): Promise<DocumentBranch[]>;\n  getBranch(branchId: string): Promise<DocumentBranch | undefined>;\n  updateBranch(branchId: string, updates: Partial<InsertDocumentBranch>): Promise<DocumentBranch>;\n  deleteBranch(branchId: string): Promise<void>;\n  getBranchHead(branchId: string): Promise<DocumentVersion | undefined>;\n\n  // Version operations\n  createBranchVersion(branchId: string, content: string, ydocState: string | null, userId: string, wordCount?: number): Promise<DocumentVersion>;\n  getBranchVersions(branchId: string, limit?: number): Promise<DocumentVersion[]>;\n  getVersion(versionId: string): Promise<DocumentVersion | undefined>;\n  rollbackBranch(branchId: string, targetVersionId: string, userId: string): Promise<DocumentVersion>;\n\n  // Merge operations\n  createMergeEvent(sourceBranchId: string, targetBranchId: string, userId: string): Promise<BranchMergeEvent>;\n  updateMergeEvent(mergeEventId: string, status: 'pending' | 'completed' | 'failed' | 'conflicted', metadata?: any): Promise<BranchMergeEvent>;\n  getMergeEvents(documentId: string): Promise<BranchMergeEvent[]>;\n  findCommonAncestor(branch1Id: string, branch2Id: string): Promise<DocumentVersion | undefined>;\n\n  // Template operations\n  applyProjectTemplate(projectId: string, template: string, authorId: string): Promise<void>;\n\n  // Notifications\n  getNotifications(userId: string, limit?: number): Promise<Notification[]>;\n  getUnreadNotificationCount(userId: string): Promise<number>;\n  markNotificationAsRead(notificationId: string, userId: string): Promise<void>;\n  markAllNotificationsAsRead(userId: string): Promise<void>;\n  createNotification(notification: InsertNotification): Promise<Notification>;\n  deleteNotification(notificationId: string, userId: string): Promise<void>;\n\n  // Activities\n  getProjectActivities(projectId: string, limit?: number): Promise<Activity[]>;\n  createActivity(activity: InsertActivity): Promise<Activity>;\n\n  // Search\n  searchContent(userId: string, query: string, limit?: number): Promise<SearchResult[]>;\n\n  // Prompt methods\n  getAllPrompts(): Promise<Prompt[]>;\n  getPromptsByCategory(category: string): Promise<Prompt[]>;\n  getPromptsByPersona(persona: string): Promise<Prompt[]>;\n  getFeaturedPrompts(): Promise<Prompt[]>;\n  searchPrompts(query: string): Promise<Prompt[]>;\n  incrementPromptUsage(promptId: number): Promise<void>;\n\n  // User favorites methods\n  getUserFavoritePrompts(userId: string): Promise<Prompt[]>;\n  addFavoritePrompt(userId: string, promptId: number): Promise<UserFavoritePrompt>;\n  removeFavoritePrompt(userId: string, promptId: number): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // Session operations\n  async getSession(sessionId: string): Promise<{ sid: string; sess: any; expire: Date } | undefined> {\n    const [session] = await db.select().from(sessions).where(eq(sessions.sid, sessionId));\n    return session;\n  }\n\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async updateUserStripeInfo(userId: string, customerId: string, subscriptionId: string): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({\n        stripeCustomerId: customerId,\n        stripeSubscriptionId: subscriptionId,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  async getUserOnboarding(userId: string): Promise<OnboardingProgress | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, userId));\n    return user?.onboardingProgress as OnboardingProgress | undefined;\n  }\n\n  async updateUserOnboarding(userId: string, progress: Partial<OnboardingProgress>): Promise<User> {\n    const [user] = await db.select().from(users).where(eq(users.id, userId));\n    \n    const currentProgress = user?.onboardingProgress as OnboardingProgress | null;\n    const updatedProgress: OnboardingProgress = {\n      welcomeShown: progress.welcomeShown ?? currentProgress?.welcomeShown ?? false,\n      steps: {\n        createProject: progress.steps?.createProject ?? currentProgress?.steps?.createProject ?? false,\n        useAI: progress.steps?.useAI ?? currentProgress?.steps?.useAI ?? false,\n        addCharacter: progress.steps?.addCharacter ?? currentProgress?.steps?.addCharacter ?? false,\n        viewAnalytics: progress.steps?.viewAnalytics ?? currentProgress?.steps?.viewAnalytics ?? false,\n        tryExport: progress.steps?.tryExport ?? currentProgress?.steps?.tryExport ?? false,\n      },\n      tourCompleted: progress.tourCompleted ?? currentProgress?.tourCompleted ?? false,\n    };\n\n    const allStepsComplete = Object.values(updatedProgress.steps).every(step => step === true);\n\n    const [updatedUser] = await db\n      .update(users)\n      .set({\n        onboardingProgress: updatedProgress,\n        hasCompletedOnboarding: allStepsComplete && updatedProgress.tourCompleted,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, userId))\n      .returning();\n    \n    return updatedUser;\n  }\n\n  // Project operations\n  async getUserProjects(userId: string): Promise<Project[]> {\n    const ownedProjects = await db\n      .select()\n      .from(projects)\n      .where(eq(projects.ownerId, userId))\n      .orderBy(desc(projects.updatedAt));\n\n    const collaboratedProjects = await db\n      .select({\n        id: projects.id,\n        title: projects.title,\n        description: projects.description,\n        genre: projects.genre,\n        targetWordCount: projects.targetWordCount,\n        currentWordCount: projects.currentWordCount,\n        deadline: projects.deadline,\n        ownerId: projects.ownerId,\n        createdAt: projects.createdAt,\n        updatedAt: projects.updatedAt,\n      })\n      .from(projects)\n      .innerJoin(projectCollaborators, eq(projects.id, projectCollaborators.projectId))\n      .where(eq(projectCollaborators.userId, userId))\n      .orderBy(desc(projects.updatedAt));\n\n    // Combine and deduplicate\n    const allProjects = [...ownedProjects, ...collaboratedProjects];\n    const uniqueProjects = allProjects.filter((project, index, self) =>\n      index === self.findIndex(p => p.id === project.id)\n    );\n\n    return uniqueProjects;\n  }\n\n  async getProject(id: string): Promise<ProjectWithCollaborators | undefined> {\n    const [project] = await db.select().from(projects).where(eq(projects.id, id));\n    if (!project) return undefined;\n\n    const collaborators = await db\n      .select({\n        id: projectCollaborators.id,\n        projectId: projectCollaborators.projectId,\n        userId: projectCollaborators.userId,\n        role: projectCollaborators.role,\n        createdAt: projectCollaborators.createdAt,\n        user: {\n          id: users.id,\n          email: users.email,\n          firstName: users.firstName,\n          lastName: users.lastName,\n          profileImageUrl: users.profileImageUrl,\n          stripeCustomerId: users.stripeCustomerId,\n          stripeSubscriptionId: users.stripeSubscriptionId,\n          subscriptionStatus: users.subscriptionStatus,\n          subscriptionPlan: users.subscriptionPlan,\n          createdAt: users.createdAt,\n          updatedAt: users.updatedAt,\n        },\n      })\n      .from(projectCollaborators)\n      .innerJoin(users, eq(projectCollaborators.userId, users.id))\n      .where(eq(projectCollaborators.projectId, id));\n\n    const projectCharacters = await db\n      .select()\n      .from(characters)\n      .where(eq(characters.projectId, id))\n      .orderBy(asc(characters.name));\n\n    const projectWorldbuilding = await db\n      .select()\n      .from(worldbuildingEntries)\n      .where(eq(worldbuildingEntries.projectId, id))\n      .orderBy(asc(worldbuildingEntries.title));\n\n    const projectTimeline = await db\n      .select()\n      .from(timelineEvents)\n      .where(eq(timelineEvents.projectId, id))\n      .orderBy(asc(timelineEvents.date));\n\n    const projectDocuments = await db\n      .select()\n      .from(documents)\n      .where(eq(documents.projectId, id))\n      .orderBy(asc(documents.orderIndex));\n\n    return {\n      ...project,\n      collaborators,\n      characters: projectCharacters,\n      worldbuildingEntries: projectWorldbuilding,\n      timelineEvents: projectTimeline,\n      documents: projectDocuments,\n    };\n  }\n\n  async createProject(project: InsertProject, ownerId: string): Promise<Project> {\n    const [newProject] = await db\n      .insert(projects)\n      .values({ ...project, ownerId })\n      .returning();\n    return newProject;\n  }\n\n  async updateProject(id: string, updates: Partial<InsertProject>): Promise<Project> {\n    const [updated] = await db\n      .update(projects)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(projects.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteProject(id: string): Promise<void> {\n    await db.delete(projects).where(eq(projects.id, id));\n  }\n\n  // Collaboration operations\n  async addProjectCollaborator(data: InsertProjectCollaborator): Promise<ProjectCollaborator> {\n    const [collaborator] = await db\n      .insert(projectCollaborators)\n      .values(data)\n      .returning();\n    return collaborator;\n  }\n\n  async removeProjectCollaborator(projectId: string, userId: string): Promise<void> {\n    await db\n      .delete(projectCollaborators)\n      .where(\n        and(\n          eq(projectCollaborators.projectId, projectId),\n          eq(projectCollaborators.userId, userId)\n        )\n      );\n  }\n\n  async getUserRole(projectId: string, userId: string): Promise<string | undefined> {\n    const [collaborator] = await db\n      .select({ role: projectCollaborators.role })\n      .from(projectCollaborators)\n      .where(\n        and(\n          eq(projectCollaborators.projectId, projectId),\n          eq(projectCollaborators.userId, userId)\n        )\n      );\n    return collaborator?.role;\n  }\n\n  // Character operations\n  async getProjectCharacters(projectId: string): Promise<Character[]> {\n    return await db\n      .select()\n      .from(characters)\n      .where(eq(characters.projectId, projectId))\n      .orderBy(asc(characters.name));\n  }\n\n  async getCharacter(id: string): Promise<Character | undefined> {\n    const [character] = await db.select().from(characters).where(eq(characters.id, id));\n    return character;\n  }\n\n  async createCharacter(character: InsertCharacter): Promise<Character> {\n    const [newCharacter] = await db\n      .insert(characters)\n      .values(character)\n      .returning();\n    return newCharacter;\n  }\n\n  async updateCharacter(id: string, updates: Partial<InsertCharacter>): Promise<Character> {\n    const [updated] = await db\n      .update(characters)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(characters.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteCharacter(id: string): Promise<void> {\n    await db.delete(characters).where(eq(characters.id, id));\n  }\n\n  // Worldbuilding operations\n  async getProjectWorldbuilding(projectId: string): Promise<WorldbuildingEntry[]> {\n    return await db\n      .select()\n      .from(worldbuildingEntries)\n      .where(eq(worldbuildingEntries.projectId, projectId))\n      .orderBy(asc(worldbuildingEntries.title));\n  }\n\n  async getWorldbuildingEntry(id: string): Promise<WorldbuildingEntry | undefined> {\n    const [entry] = await db.select().from(worldbuildingEntries).where(eq(worldbuildingEntries.id, id));\n    return entry;\n  }\n\n  async createWorldbuildingEntry(entry: InsertWorldbuildingEntry): Promise<WorldbuildingEntry> {\n    const [newEntry] = await db\n      .insert(worldbuildingEntries)\n      .values(entry)\n      .returning();\n    return newEntry;\n  }\n\n  async updateWorldbuildingEntry(id: string, updates: Partial<InsertWorldbuildingEntry>): Promise<WorldbuildingEntry> {\n    const [updated] = await db\n      .update(worldbuildingEntries)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(worldbuildingEntries.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteWorldbuildingEntry(id: string): Promise<void> {\n    await db.delete(worldbuildingEntries).where(eq(worldbuildingEntries.id, id));\n  }\n\n  // Timeline operations\n  async getProjectTimeline(projectId: string): Promise<TimelineEvent[]> {\n    return await db\n      .select()\n      .from(timelineEvents)\n      .where(eq(timelineEvents.projectId, projectId))\n      .orderBy(asc(timelineEvents.date));\n  }\n\n  async getTimelineEvent(id: string): Promise<TimelineEvent | undefined> {\n    const [event] = await db.select().from(timelineEvents).where(eq(timelineEvents.id, id));\n    return event;\n  }\n\n  async createTimelineEvent(event: InsertTimelineEvent): Promise<TimelineEvent> {\n    let orderIndex = event.orderIndex ?? 0;\n    \n    if (orderIndex === 0 && event.projectId) {\n      const maxOrderResult = await db\n        .select({ maxOrder: sql<number>`COALESCE(MAX(${timelineEvents.orderIndex}), -1)` })\n        .from(timelineEvents)\n        .where(eq(timelineEvents.projectId, event.projectId));\n      \n      orderIndex = (maxOrderResult[0]?.maxOrder ?? -1) + 1;\n    }\n    \n    const [newEvent] = await db\n      .insert(timelineEvents)\n      .values({ ...event, orderIndex })\n      .returning();\n    return newEvent;\n  }\n\n  async updateTimelineEvent(id: string, updates: Partial<InsertTimelineEvent>): Promise<TimelineEvent> {\n    const [updated] = await db\n      .update(timelineEvents)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(timelineEvents.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteTimelineEvent(id: string): Promise<void> {\n    await db.delete(timelineEvents).where(eq(timelineEvents.id, id));\n  }\n\n  async reorderTimelineEvents(projectId: string, eventId: string, newIndex: number, newDate?: string): Promise<TimelineEvent> {\n    return await db.transaction(async (tx) => {\n      // 1. SECURITY: Verify event belongs to project\n      const [event] = await tx\n        .select()\n        .from(timelineEvents)\n        .where(\n          and(\n            eq(timelineEvents.id, eventId),\n            eq(timelineEvents.projectId, projectId)\n          )\n        )\n        .limit(1);\n\n      if (!event) {\n        throw new Error(\"Event not found or access denied\");\n      }\n\n      // 2. Get ALL events in the project, sorted by current order\n      const allEvents = await tx\n        .select()\n        .from(timelineEvents)\n        .where(eq(timelineEvents.projectId, projectId))\n        .orderBy(timelineEvents.orderIndex, timelineEvents.createdAt);\n\n      // 3. CRITICAL: Rearrange array to reflect drag-and-drop\n      // Remove the moved event from its current position\n      const movedEvent = allEvents.find(e => e.id === eventId);\n      if (!movedEvent) {\n        throw new Error(\"Event not found in project events\");\n      }\n\n      const eventsWithoutMoved = allEvents.filter(e => e.id !== eventId);\n      \n      // Insert the moved event at the new position\n      eventsWithoutMoved.splice(newIndex, 0, movedEvent);\n\n      // 4. Resequence the rearranged array with contiguous indices\n      for (let i = 0; i < eventsWithoutMoved.length; i++) {\n        const evt = eventsWithoutMoved[i];\n        \n        // Prepare update data\n        const updateData: any = {\n          orderIndex: i,\n        };\n        \n        // If this is the moved event AND date should change, update it\n        if (evt.id === eventId && newDate !== undefined) {\n          updateData.date = newDate;\n        }\n        \n        // Only update if something changed\n        const needsUpdate = \n          evt.orderIndex !== i || \n          (evt.id === eventId && newDate !== undefined && evt.date !== newDate);\n        \n        if (needsUpdate) {\n          await tx\n            .update(timelineEvents)\n            .set(updateData)\n            .where(eq(timelineEvents.id, evt.id));\n        }\n      }\n\n      // 5. Return the updated event\n      const [finalEvent] = await tx\n        .select()\n        .from(timelineEvents)\n        .where(eq(timelineEvents.id, eventId))\n        .limit(1);\n\n      return finalEvent!;\n    });\n  }\n\n  // Document operations\n  async getProjectDocuments(projectId: string): Promise<Document[]> {\n    return await db\n      .select()\n      .from(documents)\n      .where(eq(documents.projectId, projectId))\n      .orderBy(asc(documents.orderIndex));\n  }\n\n  async getDocument(id: string): Promise<DocumentWithVersions | undefined> {\n    const [document] = await db.select().from(documents).where(eq(documents.id, id));\n    if (!document) return undefined;\n\n    const versions = await db\n      .select()\n      .from(documentVersions)\n      .where(eq(documentVersions.documentId, id))\n      .orderBy(desc(documentVersions.createdAt));\n\n    const [author] = await db\n      .select()\n      .from(users)\n      .where(eq(users.id, document.authorId));\n\n    return {\n      ...document,\n      versions,\n      author,\n    };\n  }\n\n  async createDocument(document: InsertDocument & { authorId: string }): Promise<Document> {\n    const wordCount = calculateWordCount(document.content || '');\n    const [newDocument] = await db\n      .insert(documents)\n      .values({ ...document, wordCount })\n      .returning();\n    return newDocument;\n  }\n\n  async updateDocument(id: string, updates: Partial<InsertDocument>, authorId: string): Promise<Document> {\n    const wordCount = updates.content ? calculateWordCount(updates.content) : undefined;\n    \n    // Save version history\n    if (updates.content) {\n      const [currentDoc] = await db.select().from(documents).where(eq(documents.id, id));\n      if (currentDoc) {\n        await db.insert(documentVersions).values({\n          documentId: id,\n          content: currentDoc.content || \"\",\n          changeDescription: \"Auto-saved version\",\n          authorId,\n        });\n      }\n    }\n\n    const [updated] = await db\n      .update(documents)\n      .set({ \n        ...updates, \n        ...(wordCount !== undefined && { wordCount }),\n        updatedAt: new Date() \n      })\n      .where(eq(documents.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteDocument(id: string): Promise<void> {\n    await db.delete(documents).where(eq(documents.id, id));\n  }\n\n  // AI generation operations\n  async saveAiGeneration(generation: {\n    projectId: string;\n    userId: string;\n    persona: string;\n    prompt: string;\n    response: string;\n    metadata?: any;\n  }): Promise<AiGeneration> {\n    const [newGeneration] = await db\n      .insert(aiGenerations)\n      .values(generation)\n      .returning();\n    return newGeneration;\n  }\n\n  async getUserAiGenerations(userId: string, limit = 50): Promise<AiGeneration[]> {\n    return await db\n      .select()\n      .from(aiGenerations)\n      .where(eq(aiGenerations.userId, userId))\n      .orderBy(desc(aiGenerations.createdAt))\n      .limit(limit);\n  }\n\n  async getUserAiUsage(userId: string, startDate: Date): Promise<{\n    count: number;\n    totalTokens: number;\n  }> {\n    const generations = await db\n      .select()\n      .from(aiGenerations)\n      .where(\n        and(\n          eq(aiGenerations.userId, userId),\n          sql`${aiGenerations.createdAt} >= ${startDate}`\n        )\n      );\n\n    let totalTokens = 0;\n    for (const gen of generations) {\n      if (gen.metadata && typeof gen.metadata === 'object') {\n        const metadata = gen.metadata as any;\n        const tokensIn = metadata.tokens_in || 0;\n        const tokensOut = metadata.tokens_out || 0;\n        totalTokens += tokensIn + tokensOut;\n      }\n    }\n\n    return {\n      count: generations.length,\n      totalTokens\n    };\n  }\n\n  // Analysis cache operations  \n  private analysisCache = new Map<string, { data: any; timestamp: Date }>();\n\n  async saveAnalysisCache(key: string, data: any): Promise<void> {\n    this.analysisCache.set(key, {\n      data,\n      timestamp: new Date()\n    });\n  }\n\n  async getAnalysisCache(key: string): Promise<{ data: any; timestamp: Date } | undefined> {\n    return this.analysisCache.get(key);\n  }\n\n  async clearAnalysisCache(projectId: string): Promise<void> {\n    // Clear all cache entries related to this project\n    const keysToDelete: string[] = [];\n    const keys = Array.from(this.analysisCache.keys());\n    for (const key of keys) {\n      if (key.includes(projectId)) {\n        keysToDelete.push(key);\n      }\n    }\n    keysToDelete.forEach(key => this.analysisCache.delete(key));\n  }\n\n  // Comment CRUD operations\n  async createComment(documentId: string, authorId: string, content: string, range?: { start: number; end: number }): Promise<DocumentComment> {\n    // Check if user has access to the document\n    const [document] = await db.select().from(documents).where(eq(documents.id, documentId));\n    if (!document) {\n      throw new Error(\"Document not found\");\n    }\n\n    // Check user has access to the project\n    const hasAccess = await this.checkProjectAccess(document.projectId, authorId);\n    if (!hasAccess) {\n      throw new Error(\"User does not have access to this project\");\n    }\n\n    const [comment] = await db\n      .insert(documentComments)\n      .values({\n        documentId,\n        authorId,\n        content,\n        range: range || null,\n      })\n      .returning();\n    return comment;\n  }\n\n  async getDocumentComments(documentId: string): Promise<DocumentComment[]> {\n    return await db\n      .select()\n      .from(documentComments)\n      .where(eq(documentComments.documentId, documentId))\n      .orderBy(asc(documentComments.createdAt));\n  }\n\n  async updateComment(commentId: string, updates: { content?: string; resolved?: boolean }): Promise<DocumentComment> {\n    const [updated] = await db\n      .update(documentComments)\n      .set(updates)\n      .where(eq(documentComments.id, commentId))\n      .returning();\n    \n    if (!updated) {\n      throw new Error(\"Comment not found\");\n    }\n    \n    return updated;\n  }\n\n  async deleteComment(commentId: string): Promise<void> {\n    await db.delete(documentComments).where(eq(documentComments.id, commentId));\n  }\n\n  async resolveComment(commentId: string): Promise<DocumentComment> {\n    const [resolved] = await db\n      .update(documentComments)\n      .set({ resolved: true })\n      .where(eq(documentComments.id, commentId))\n      .returning();\n    \n    if (!resolved) {\n      throw new Error(\"Comment not found\");\n    }\n    \n    return resolved;\n  }\n\n  // Collaboration state persistence\n  async saveCollaborationState(documentId: string, ydocState: string): Promise<DocumentCollaborationState> {\n    const [state] = await db\n      .insert(documentCollaborationStates)\n      .values({\n        documentId,\n        ydocState,\n        updatedAt: new Date(),\n      })\n      .onConflictDoUpdate({\n        target: documentCollaborationStates.documentId,\n        set: {\n          ydocState,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return state;\n  }\n\n  async getCollaborationState(documentId: string): Promise<DocumentCollaborationState | undefined> {\n    const [state] = await db\n      .select()\n      .from(documentCollaborationStates)\n      .where(eq(documentCollaborationStates.documentId, documentId));\n    return state;\n  }\n\n  // Presence management\n  async updatePresence(\n    projectId: string,\n    userId: string,\n    documentId: string | null,\n    status: 'online' | 'offline' | 'away',\n    cursorPos?: { line: number; column: number },\n    color?: string\n  ): Promise<CollaborationPresence> {\n    // Check user has access to the project\n    const hasAccess = await this.checkProjectAccess(projectId, userId);\n    if (!hasAccess) {\n      throw new Error(\"User does not have access to this project\");\n    }\n\n    // First, try to find existing presence for this user in this project\n    const [existingPresence] = await db\n      .select()\n      .from(collaborationPresence)\n      .where(\n        and(\n          eq(collaborationPresence.projectId, projectId),\n          eq(collaborationPresence.userId, userId)\n        )\n      );\n\n    if (existingPresence) {\n      // Update existing presence\n      const [updated] = await db\n        .update(collaborationPresence)\n        .set({\n          documentId,\n          status,\n          cursorPos: cursorPos || null,\n          color: color || existingPresence.color,\n          lastSeen: new Date(),\n        })\n        .where(eq(collaborationPresence.id, existingPresence.id))\n        .returning();\n      return updated;\n    } else {\n      // Create new presence\n      const [newPresence] = await db\n        .insert(collaborationPresence)\n        .values({\n          projectId,\n          userId,\n          documentId,\n          status,\n          cursorPos: cursorPos || null,\n          color: color || this.generateUserColor(),\n          lastSeen: new Date(),\n        })\n        .returning();\n      return newPresence;\n    }\n  }\n\n  async getProjectPresence(projectId: string): Promise<CollaborationPresence[]> {\n    return await db\n      .select()\n      .from(collaborationPresence)\n      .where(eq(collaborationPresence.projectId, projectId))\n      .orderBy(desc(collaborationPresence.lastSeen));\n  }\n\n  async cleanupStalePresence(): Promise<void> {\n    const fiveMinutesAgo = new Date(Date.now() - 5 * 60 * 1000);\n    \n    await db\n      .delete(collaborationPresence)\n      .where(\n        and(\n          eq(collaborationPresence.status, 'online'),\n          lt(collaborationPresence.lastSeen, fiveMinutesAgo)\n        )\n      );\n  }\n\n  // Helper method to check project access\n  private async checkProjectAccess(projectId: string, userId: string): Promise<boolean> {\n    // Check if user is owner\n    const [project] = await db\n      .select()\n      .from(projects)\n      .where(eq(projects.id, projectId));\n    \n    if (!project) {\n      return false;\n    }\n    \n    if (project.ownerId === userId) {\n      return true;\n    }\n    \n    // Check if user is a collaborator\n    const [collaborator] = await db\n      .select()\n      .from(projectCollaborators)\n      .where(\n        and(\n          eq(projectCollaborators.projectId, projectId),\n          eq(projectCollaborators.userId, userId)\n        )\n      );\n    \n    return !!collaborator;\n  }\n\n  // Helper method to generate a color for user cursor\n  private generateUserColor(): string {\n    const colors = [\n      '#FF6B6B', // Red\n      '#4ECDC4', // Teal\n      '#45B7D1', // Blue\n      '#96CEB4', // Green\n      '#FFEAA7', // Yellow\n      '#DDA0DD', // Plum\n      '#F4A460', // Sandy\n      '#98D8C8', // Mint\n    ];\n    return colors[Math.floor(Math.random() * colors.length)];\n  }\n\n  // Branch operations\n  async createBranch(\n    documentId: string, \n    name: string, \n    description: string | null, \n    parentBranchId: string | null, \n    userId: string\n  ): Promise<DocumentBranch> {\n    // Verify document exists and user has access\n    const document = await this.getDocument(documentId);\n    if (!document) {\n      throw new Error(\"Document not found\");\n    }\n    \n    const hasAccess = await this.checkProjectAccess(document.projectId, userId);\n    if (!hasAccess) {\n      throw new Error(\"User does not have access to this project\");\n    }\n\n    // Generate slug from name\n    const slug = name.toLowerCase().replace(/\\s+/g, '-').replace(/[^a-z0-9-]/g, '');\n    \n    // Get base version ID if this is a child branch\n    let baseVersionId: string | null = null;\n    if (parentBranchId) {\n      const parentBranch = await this.getBranchHead(parentBranchId);\n      if (parentBranch) {\n        baseVersionId = parentBranch.id;\n      }\n    }\n\n    const [branch] = await db\n      .insert(documentBranches)\n      .values({\n        documentId,\n        name,\n        slug,\n        description,\n        parentBranchId,\n        baseVersionId,\n        createdBy: userId,\n      })\n      .returning();\n\n    return branch;\n  }\n\n  async getBranches(documentId: string): Promise<DocumentBranch[]> {\n    return await db\n      .select()\n      .from(documentBranches)\n      .where(eq(documentBranches.documentId, documentId))\n      .orderBy(desc(documentBranches.createdAt));\n  }\n\n  async getBranch(branchId: string): Promise<DocumentBranch | undefined> {\n    const [branch] = await db\n      .select()\n      .from(documentBranches)\n      .where(eq(documentBranches.id, branchId));\n    return branch;\n  }\n\n  async updateBranch(branchId: string, updates: Partial<InsertDocumentBranch>): Promise<DocumentBranch> {\n    const [updated] = await db\n      .update(documentBranches)\n      .set({\n        ...updates,\n        updatedAt: new Date(),\n      })\n      .where(eq(documentBranches.id, branchId))\n      .returning();\n    \n    if (!updated) {\n      throw new Error(\"Branch not found\");\n    }\n    \n    return updated;\n  }\n\n  async deleteBranch(branchId: string): Promise<void> {\n    await db\n      .delete(documentBranches)\n      .where(eq(documentBranches.id, branchId));\n  }\n\n  async getBranchHead(branchId: string): Promise<DocumentVersion | undefined> {\n    const [latestVersion] = await db\n      .select()\n      .from(documentVersions)\n      .where(eq(documentVersions.branchId, branchId))\n      .orderBy(desc(documentVersions.createdAt))\n      .limit(1);\n    \n    return latestVersion;\n  }\n\n  // Version operations\n  async createBranchVersion(\n    branchId: string, \n    content: string, \n    ydocState: string | null, \n    userId: string,\n    wordCount: number = 0\n  ): Promise<DocumentVersion> {\n    // Get branch to verify it exists and get documentId\n    const branch = await this.getBranch(branchId);\n    if (!branch) {\n      throw new Error(\"Branch not found\");\n    }\n\n    // Get previous version to set as parent\n    const previousVersion = await this.getBranchHead(branchId);\n    \n    const [version] = await db\n      .insert(documentVersions)\n      .values({\n        documentId: branch.documentId,\n        branchId,\n        parentVersionId: previousVersion?.id || null,\n        content,\n        ydocState,\n        wordCount,\n        authorId: userId,\n      })\n      .returning();\n\n    return version;\n  }\n\n  async getBranchVersions(branchId: string, limit: number = 50): Promise<DocumentVersion[]> {\n    return await db\n      .select()\n      .from(documentVersions)\n      .where(eq(documentVersions.branchId, branchId))\n      .orderBy(desc(documentVersions.createdAt))\n      .limit(limit);\n  }\n\n  async getVersion(versionId: string): Promise<DocumentVersion | undefined> {\n    const [version] = await db\n      .select()\n      .from(documentVersions)\n      .where(eq(documentVersions.id, versionId));\n    return version;\n  }\n\n  async rollbackBranch(branchId: string, targetVersionId: string, userId: string): Promise<DocumentVersion> {\n    // Get the target version to rollback to\n    const targetVersion = await this.getVersion(targetVersionId);\n    if (!targetVersion || targetVersion.branchId !== branchId) {\n      throw new Error(\"Target version not found or does not belong to this branch\");\n    }\n\n    // Create a new version with the content from the target version\n    return await this.createBranchVersion(\n      branchId,\n      targetVersion.content,\n      targetVersion.ydocState,\n      userId,\n      targetVersion.wordCount || 0\n    );\n  }\n\n  // Merge operations\n  async createMergeEvent(\n    sourceBranchId: string, \n    targetBranchId: string, \n    userId: string\n  ): Promise<BranchMergeEvent> {\n    // Verify both branches exist and get their document IDs\n    const [sourceBranch, targetBranch] = await Promise.all([\n      this.getBranch(sourceBranchId),\n      this.getBranch(targetBranchId)\n    ]);\n\n    if (!sourceBranch || !targetBranch) {\n      throw new Error(\"Source or target branch not found\");\n    }\n\n    if (sourceBranch.documentId !== targetBranch.documentId) {\n      throw new Error(\"Branches belong to different documents\");\n    }\n\n    const [mergeEvent] = await db\n      .insert(branchMergeEvents)\n      .values({\n        documentId: sourceBranch.documentId,\n        sourceBranchId,\n        targetBranchId,\n        initiatorId: userId,\n        status: 'pending',\n      })\n      .returning();\n\n    return mergeEvent;\n  }\n\n  async updateMergeEvent(\n    mergeEventId: string, \n    status: 'pending' | 'completed' | 'failed' | 'conflicted',\n    metadata?: any\n  ): Promise<BranchMergeEvent> {\n    const updates: any = {\n      status,\n      metadata: metadata || null,\n    };\n\n    if (status !== 'pending') {\n      updates.resolvedAt = new Date();\n    }\n\n    const [updated] = await db\n      .update(branchMergeEvents)\n      .set(updates)\n      .where(eq(branchMergeEvents.id, mergeEventId))\n      .returning();\n\n    if (!updated) {\n      throw new Error(\"Merge event not found\");\n    }\n\n    return updated;\n  }\n\n  async getMergeEvents(documentId: string): Promise<BranchMergeEvent[]> {\n    return await db\n      .select()\n      .from(branchMergeEvents)\n      .where(eq(branchMergeEvents.documentId, documentId))\n      .orderBy(desc(branchMergeEvents.createdAt));\n  }\n\n  async findCommonAncestor(branch1Id: string, branch2Id: string): Promise<DocumentVersion | undefined> {\n    // Get all versions from both branches\n    const [branch1Versions, branch2Versions] = await Promise.all([\n      this.getBranchVersions(branch1Id, 100),\n      this.getBranchVersions(branch2Id, 100)\n    ]);\n\n    // Create a set of version IDs and parent version IDs from branch1\n    const branch1VersionIds = new Set<string>();\n    const branch1ParentIds = new Set<string>();\n    \n    for (const version of branch1Versions) {\n      branch1VersionIds.add(version.id);\n      if (version.parentVersionId) {\n        branch1ParentIds.add(version.parentVersionId);\n      }\n    }\n\n    // Find the first version in branch2 that exists in branch1's history\n    for (const version of branch2Versions) {\n      if (branch1VersionIds.has(version.id)) {\n        return version;\n      }\n      if (version.parentVersionId && branch1VersionIds.has(version.parentVersionId)) {\n        return await this.getVersion(version.parentVersionId);\n      }\n    }\n\n    // Check if branches share a common base version through their parent branches\n    const [branch1, branch2] = await Promise.all([\n      this.getBranch(branch1Id),\n      this.getBranch(branch2Id)\n    ]);\n\n    if (branch1?.baseVersionId && branch2?.baseVersionId) {\n      if (branch1.baseVersionId === branch2.baseVersionId) {\n        return await this.getVersion(branch1.baseVersionId);\n      }\n    }\n\n    return undefined;\n  }\n\n  async applyProjectTemplate(projectId: string, template: string, authorId: string): Promise<void> {\n    const { getTemplate } = await import('./templates');\n    const templateData = getTemplate(template as any);\n\n    // Create documents\n    for (const doc of templateData.documents) {\n      await this.createDocument({\n        ...doc,\n        projectId,\n        authorId,\n      });\n    }\n\n    // Create characters\n    for (const character of templateData.characters) {\n      await this.createCharacter({\n        ...character,\n        projectId,\n      });\n    }\n\n    // Create worldbuilding entries\n    for (const entry of templateData.worldbuilding) {\n      await this.createWorldbuildingEntry({\n        ...entry,\n        projectId,\n      });\n    }\n\n    // Create timeline events\n    for (const event of templateData.timeline) {\n      await this.createTimelineEvent({\n        ...event,\n        projectId,\n      });\n    }\n  }\n\n  async getNotifications(userId: string, limit: number = 50): Promise<Notification[]> {\n    const notifs = await db\n      .select()\n      .from(notifications)\n      .where(eq(notifications.userId, userId))\n      .orderBy(desc(notifications.createdAt))\n      .limit(limit);\n\n    return notifs;\n  }\n\n  async markNotificationAsRead(notificationId: string, userId: string): Promise<void> {\n    await db\n      .update(notifications)\n      .set({ isRead: true })\n      .where(\n        and(\n          eq(notifications.id, notificationId),\n          eq(notifications.userId, userId)\n        )\n      );\n  }\n\n  async markAllNotificationsAsRead(userId: string): Promise<void> {\n    await db\n      .update(notifications)\n      .set({ isRead: true })\n      .where(eq(notifications.userId, userId));\n  }\n\n  async deleteNotification(notificationId: string, userId: string): Promise<void> {\n    await db\n      .delete(notifications)\n      .where(\n        and(\n          eq(notifications.id, notificationId),\n          eq(notifications.userId, userId)\n        )\n      );\n  }\n\n  async createNotification(data: InsertNotification): Promise<Notification> {\n    const [newNotification] = await db\n      .insert(notifications)\n      .values(data)\n      .returning();\n    return newNotification;\n  }\n\n  async getUnreadNotificationCount(userId: string): Promise<number> {\n    const result = await db\n      .select({ count: sql<number>`count(*)::int` })\n      .from(notifications)\n      .where(\n        and(\n          eq(notifications.userId, userId),\n          eq(notifications.isRead, false)\n        )\n      );\n    return result[0]?.count || 0;\n  }\n\n  async getProjectActivities(projectId: string, limit: number = 50): Promise<Activity[]> {\n    return await db\n      .select()\n      .from(activities)\n      .where(eq(activities.projectId, projectId))\n      .orderBy(desc(activities.createdAt))\n      .limit(limit);\n  }\n\n  async createActivity(activity: InsertActivity): Promise<Activity> {\n    const [created] = await db\n      .insert(activities)\n      .values(activity)\n      .returning();\n    return created;\n  }\n\n  async searchContent(userId: string, query: string, limit: number = 20): Promise<SearchResult[]> {\n    const projectIds = await db\n      .select({ id: projects.id })\n      .from(projects)\n      .leftJoin(projectCollaborators, eq(projects.id, projectCollaborators.projectId))\n      .where(\n        or(\n          eq(projects.ownerId, userId),\n          and(\n            eq(projectCollaborators.userId, userId),\n            inArray(projectCollaborators.role, [\"editor\", \"reviewer\", \"reader\"])\n          )\n        )\n      );\n\n    const userProjectIds = projectIds.map(p => p.id);\n\n    if (userProjectIds.length === 0) {\n      return [];\n    }\n\n    const searchPattern = `%${query.toLowerCase()}%`;\n\n    const documentResults = await db\n      .select({\n        id: documents.id,\n        title: documents.title,\n        content: documents.content,\n        projectId: documents.projectId,\n        projectTitle: projects.title,\n        type: sql<string>`'document'`,\n        createdAt: documents.createdAt,\n      })\n      .from(documents)\n      .innerJoin(projects, eq(documents.projectId, projects.id))\n      .where(\n        and(\n          inArray(documents.projectId, userProjectIds),\n          or(\n            sql`LOWER(${documents.title}) LIKE ${searchPattern}`,\n            sql`LOWER(${documents.content}) LIKE ${searchPattern}`\n          )\n        )\n      )\n      .limit(limit);\n\n    const characterResults = await db\n      .select({\n        id: characters.id,\n        title: characters.name,\n        content: sql<string>`COALESCE(${characters.description}, '') || ' ' || COALESCE(${characters.notes}, '')`,\n        projectId: characters.projectId,\n        projectTitle: projects.title,\n        type: sql<string>`'character'`,\n        createdAt: characters.createdAt,\n      })\n      .from(characters)\n      .innerJoin(projects, eq(characters.projectId, projects.id))\n      .where(\n        and(\n          inArray(characters.projectId, userProjectIds),\n          or(\n            sql`LOWER(${characters.name}) LIKE ${searchPattern}`,\n            sql`LOWER(${characters.description}) LIKE ${searchPattern}`,\n            sql`LOWER(${characters.notes}) LIKE ${searchPattern}`\n          )\n        )\n      )\n      .limit(limit);\n\n    const worldbuildingResults = await db\n      .select({\n        id: worldbuildingEntries.id,\n        title: worldbuildingEntries.title,\n        content: worldbuildingEntries.description,\n        projectId: worldbuildingEntries.projectId,\n        projectTitle: projects.title,\n        type: sql<string>`'worldbuilding'`,\n        createdAt: worldbuildingEntries.createdAt,\n      })\n      .from(worldbuildingEntries)\n      .innerJoin(projects, eq(worldbuildingEntries.projectId, projects.id))\n      .where(\n        and(\n          inArray(worldbuildingEntries.projectId, userProjectIds),\n          or(\n            sql`LOWER(${worldbuildingEntries.title}) LIKE ${searchPattern}`,\n            sql`LOWER(${worldbuildingEntries.description}) LIKE ${searchPattern}`\n          )\n        )\n      )\n      .limit(limit);\n\n    const timelineResults = await db\n      .select({\n        id: timelineEvents.id,\n        title: timelineEvents.title,\n        content: timelineEvents.description,\n        projectId: timelineEvents.projectId,\n        projectTitle: projects.title,\n        type: sql<string>`'timeline'`,\n        createdAt: timelineEvents.createdAt,\n      })\n      .from(timelineEvents)\n      .innerJoin(projects, eq(timelineEvents.projectId, projects.id))\n      .where(\n        and(\n          inArray(timelineEvents.projectId, userProjectIds),\n          or(\n            sql`LOWER(${timelineEvents.title}) LIKE ${searchPattern}`,\n            sql`LOWER(${timelineEvents.description}) LIKE ${searchPattern}`\n          )\n        )\n      )\n      .limit(limit);\n\n    const allResults = [\n      ...documentResults,\n      ...characterResults,\n      ...worldbuildingResults,\n      ...timelineResults,\n    ];\n\n    allResults.sort((a, b) => {\n      const aTitle = a.title.toLowerCase();\n      const bTitle = b.title.toLowerCase();\n      const queryLower = query.toLowerCase();\n\n      const aExact = aTitle === queryLower ? 1 : 0;\n      const bExact = bTitle === queryLower ? 1 : 0;\n      if (aExact !== bExact) return bExact - aExact;\n\n      const aTitleMatch = aTitle.includes(queryLower) ? 1 : 0;\n      const bTitleMatch = bTitle.includes(queryLower) ? 1 : 0;\n      if (aTitleMatch !== bTitleMatch) return bTitleMatch - aTitleMatch;\n\n      return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();\n    });\n\n    return allResults.slice(0, limit);\n  }\n\n  // Prompt methods\n  async getAllPrompts(): Promise<Prompt[]> {\n    return db.select().from(prompts).orderBy(prompts.category, prompts.title);\n  }\n\n  async getPromptsByCategory(category: string): Promise<Prompt[]> {\n    return db.select().from(prompts).where(eq(prompts.category, category)).orderBy(prompts.title);\n  }\n\n  async getPromptsByPersona(persona: string): Promise<Prompt[]> {\n    return db.select().from(prompts).where(\n      or(eq(prompts.persona, persona), eq(prompts.persona, \"any\"))\n    ).orderBy(prompts.category, prompts.title);\n  }\n\n  async getFeaturedPrompts(): Promise<Prompt[]> {\n    return db.select().from(prompts).where(eq(prompts.isFeatured, true)).orderBy(desc(prompts.usageCount));\n  }\n\n  async searchPrompts(query: string): Promise<Prompt[]> {\n    const searchPattern = `%${query.toLowerCase()}%`;\n    return db.select().from(prompts).where(\n      or(\n        sql`LOWER(${prompts.title}) LIKE ${searchPattern}`,\n        sql`LOWER(${prompts.content}) LIKE ${searchPattern}`,\n        sql`LOWER(${prompts.category}) LIKE ${searchPattern}`,\n        sql`LOWER(${prompts.subcategory}) LIKE ${searchPattern}`\n      )\n    ).orderBy(prompts.category, prompts.title);\n  }\n\n  async incrementPromptUsage(promptId: number): Promise<void> {\n    await db.update(prompts)\n      .set({ usageCount: sql`${prompts.usageCount} + 1` })\n      .where(eq(prompts.id, promptId));\n  }\n\n  // User favorites methods\n  async getUserFavoritePrompts(userId: string): Promise<Prompt[]> {\n    const favorites = await db\n      .select({ prompt: prompts })\n      .from(userFavoritePrompts)\n      .innerJoin(prompts, eq(userFavoritePrompts.promptId, prompts.id))\n      .where(eq(userFavoritePrompts.userId, userId))\n      .orderBy(prompts.category, prompts.title);\n    \n    return favorites.map(f => f.prompt);\n  }\n\n  async addFavoritePrompt(userId: string, promptId: number): Promise<UserFavoritePrompt> {\n    const [favorite] = await db.insert(userFavoritePrompts)\n      .values({ userId, promptId })\n      .returning();\n    return favorite;\n  }\n\n  async removeFavoritePrompt(userId: string, promptId: number): Promise<void> {\n    await db.delete(userFavoritePrompts)\n      .where(\n        and(\n          eq(userFavoritePrompts.userId, userId),\n          eq(userFavoritePrompts.promptId, promptId)\n        )\n      );\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":50823},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, relations } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  boolean,\n  pgEnum,\n  serial,\n  unique,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table for Replit Auth\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  stripeCustomerId: varchar(\"stripe_customer_id\"),\n  stripeSubscriptionId: varchar(\"stripe_subscription_id\"),\n  subscriptionStatus: varchar(\"subscription_status\").default(\"inactive\"),\n  subscriptionPlan: varchar(\"subscription_plan\"),\n  hasCompletedOnboarding: boolean(\"has_completed_onboarding\").default(false),\n  onboardingProgress: jsonb(\"onboarding_progress\").$type<{\n    welcomeShown: boolean;\n    steps: {\n      createProject: boolean;\n      useAI: boolean;\n      addCharacter: boolean;\n      viewAnalytics: boolean;\n      tryExport: boolean;\n    };\n    tourCompleted: boolean;\n  }>(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Role enum for collaboration\nexport const roleEnum = pgEnum('role', ['owner', 'editor', 'reviewer', 'reader']);\n\n// Character role enum\nexport const characterRoleEnum = pgEnum('character_role', [\n  'protagonist', \n  'antagonist', \n  'supporting', \n  'minor', \n  'other'\n]);\n\n// Projects table\nexport const projects = pgTable(\"projects\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\"),\n  genre: varchar(\"genre\"),\n  targetWordCount: integer(\"target_word_count\"),\n  currentWordCount: integer(\"current_word_count\").default(0),\n  deadline: timestamp(\"deadline\"),\n  ownerId: varchar(\"owner_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Project collaborators\nexport const projectCollaborators = pgTable(\"project_collaborators\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: varchar(\"project_id\").notNull().references(() => projects.id, { onDelete: 'cascade' }),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  role: roleEnum(\"role\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Characters table\nexport const characters = pgTable(\"characters\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: varchar(\"project_id\").notNull().references(() => projects.id, { onDelete: 'cascade' }),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  background: text(\"background\"),\n  personality: text(\"personality\"),\n  appearance: text(\"appearance\"),\n  relationships: jsonb(\"relationships\"),\n  notes: text(\"notes\"),\n  role: characterRoleEnum(\"role\"),\n  importance: integer(\"importance\").default(3),\n  tags: text(\"tags\").array(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Worldbuilding entries\nexport const worldbuildingEntries = pgTable(\"worldbuilding_entries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: varchar(\"project_id\").notNull().references(() => projects.id, { onDelete: 'cascade' }),\n  title: varchar(\"title\").notNull(),\n  type: varchar(\"type\").notNull(), // location, culture, magic_system, etc.\n  description: text(\"description\"),\n  details: jsonb(\"details\"),\n  tags: text(\"tags\").array(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Timeline events\nexport const timelineEvents = pgTable(\"timeline_events\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: varchar(\"project_id\").notNull().references(() => projects.id, { onDelete: 'cascade' }),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\"),\n  date: varchar(\"date\"), // Flexible date format for fictional timelines\n  importance: integer(\"importance\").default(1), // 1-5 scale\n  orderIndex: integer(\"order_index\").default(0), // For drag-and-drop ordering\n  tags: text(\"tags\").array(),\n  relatedCharacters: text(\"related_characters\").array(),\n  relatedLocations: text(\"related_locations\").array(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Documents/chapters\nexport const documents = pgTable(\"documents\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: varchar(\"project_id\").notNull().references(() => projects.id, { onDelete: 'cascade' }),\n  title: varchar(\"title\").notNull(),\n  content: text(\"content\"),\n  type: varchar(\"type\").default(\"chapter\"), // chapter, scene, note\n  orderIndex: integer(\"order_index\").default(0),\n  wordCount: integer(\"word_count\").default(0),\n  authorId: varchar(\"author_id\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Document branches for version control\nexport const documentBranches = pgTable(\"document_branches\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  documentId: varchar(\"document_id\").notNull().references(() => documents.id, { onDelete: 'cascade' }),\n  name: varchar(\"name\").notNull(),\n  slug: varchar(\"slug\").notNull(),\n  description: text(\"description\"),\n  parentBranchId: varchar(\"parent_branch_id\").references(() => documentBranches.id),\n  baseVersionId: varchar(\"base_version_id\"),\n  createdBy: varchar(\"created_by\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => [\n  index(\"idx_document_branches_doc_name\").on(table.documentId, table.name),\n]);\n\n// Document versions for history tracking (extended for branching)\nexport const documentVersions = pgTable(\"document_versions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  documentId: varchar(\"document_id\").notNull().references(() => documents.id, { onDelete: 'cascade' }),\n  branchId: varchar(\"branch_id\").references(() => documentBranches.id, { onDelete: 'cascade' }),\n  parentVersionId: varchar(\"parent_version_id\").references(() => documentVersions.id),\n  content: text(\"content\").notNull(),\n  ydocState: text(\"ydoc_state\"),\n  wordCount: integer(\"word_count\").default(0),\n  changeDescription: text(\"change_description\"),\n  authorId: varchar(\"author_id\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => [\n  index(\"idx_doc_versions_branch\").on(table.documentId, table.branchId, table.createdAt),\n]);\n\n// Merge status enum\nexport const mergeStatusEnum = pgEnum('merge_status', ['pending', 'completed', 'failed', 'conflicted']);\n\n// Branch merge events for tracking merge operations\nexport const branchMergeEvents = pgTable(\"branch_merge_events\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  documentId: varchar(\"document_id\").notNull().references(() => documents.id, { onDelete: 'cascade' }),\n  sourceBranchId: varchar(\"source_branch_id\").notNull().references(() => documentBranches.id),\n  targetBranchId: varchar(\"target_branch_id\").notNull().references(() => documentBranches.id),\n  mergedVersionId: varchar(\"merged_version_id\").references(() => documentVersions.id),\n  initiatorId: varchar(\"initiator_id\").notNull().references(() => users.id),\n  status: mergeStatusEnum(\"status\").notNull().default('pending'),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  resolvedAt: timestamp(\"resolved_at\"),\n  metadata: jsonb(\"metadata\"),\n});\n\n// AI generation history\nexport const aiGenerations = pgTable(\"ai_generations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: varchar(\"project_id\").notNull().references(() => projects.id, { onDelete: 'cascade' }),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  persona: varchar(\"persona\").notNull(), // muse, editor, coach\n  prompt: text(\"prompt\").notNull(),\n  response: text(\"response\").notNull(),\n  metadata: jsonb(\"metadata\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Writing sessions for detailed activity tracking\nexport const writingSessions = pgTable(\"writing_sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: varchar(\"project_id\").notNull().references(() => projects.id, { onDelete: 'cascade' }),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  documentId: varchar(\"document_id\").references(() => documents.id, { onDelete: 'cascade' }),\n  wordsWritten: integer(\"words_written\").default(0),\n  duration: integer(\"duration\").default(0), // in minutes\n  startTime: timestamp(\"start_time\").defaultNow(),\n  endTime: timestamp(\"end_time\"),\n  sessionType: varchar(\"session_type\").default(\"writing\"), // writing, editing, planning\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Activity log for detailed user actions\nexport const activityLogs = pgTable(\"activity_logs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: varchar(\"project_id\").notNull().references(() => projects.id, { onDelete: 'cascade' }),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  action: varchar(\"action\").notNull(), // created, updated, deleted, viewed\n  entityType: varchar(\"entity_type\").notNull(), // document, character, worldbuilding, timeline\n  entityId: varchar(\"entity_id\"),\n  details: jsonb(\"details\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Document collaboration states for real-time collaboration\nexport const documentCollaborationStates = pgTable(\"document_collaboration_states\", {\n  documentId: varchar(\"document_id\").primaryKey().references(() => documents.id, { onDelete: 'cascade' }),\n  ydocState: text(\"ydoc_state\").notNull(), // Yjs CRDT state as base64 string\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Document comments for collaborative feedback\nexport const documentComments = pgTable(\"document_comments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  documentId: varchar(\"document_id\").notNull().references(() => documents.id, { onDelete: 'cascade' }),\n  authorId: varchar(\"author_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  content: text(\"content\").notNull(),\n  range: jsonb(\"range\"), // { start: number, end: number } for text selection\n  resolved: boolean(\"resolved\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Collaboration presence status enum\nexport const presenceStatusEnum = pgEnum('presence_status', ['online', 'offline', 'away']);\n\n// Notification type enum\nexport const notificationTypeEnum = pgEnum('notification_type', [\n  'document_created',\n  'document_updated',\n  'document_deleted',\n  'character_created',\n  'character_updated',\n  'character_deleted',\n  'worldbuilding_created',\n  'worldbuilding_updated',\n  'worldbuilding_deleted',\n  'timeline_created',\n  'timeline_updated',\n  'timeline_deleted',\n  'collaborator_added',\n  'collaborator_removed',\n  'comment_added'\n]);\n\n// Activity type enum\nexport const activityTypeEnum = pgEnum('activity_type', [\n  'project_created',\n  'project_updated',\n  'document_created',\n  'document_updated',\n  'document_deleted',\n  'character_created',\n  'character_updated',\n  'character_deleted',\n  'worldbuilding_created',\n  'worldbuilding_updated',\n  'worldbuilding_deleted',\n  'timeline_created',\n  'timeline_updated',\n  'timeline_deleted',\n  'collaborator_added',\n  'collaborator_removed'\n]);\n\n// Collaboration presence for real-time user tracking\nexport const collaborationPresence = pgTable(\"collaboration_presence\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: varchar(\"project_id\").notNull().references(() => projects.id, { onDelete: 'cascade' }),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  documentId: varchar(\"document_id\").references(() => documents.id, { onDelete: 'cascade' }),\n  status: presenceStatusEnum(\"status\").notNull(),\n  cursorPos: jsonb(\"cursor_pos\"), // { line: number, column: number } or similar\n  color: varchar(\"color\"), // Hex color for cursor/selection highlight\n  lastSeen: timestamp(\"last_seen\").defaultNow(),\n});\n\n// Notifications table\nexport const notifications = pgTable(\"notifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  projectId: varchar(\"project_id\").notNull().references(() => projects.id, { onDelete: 'cascade' }),\n  type: notificationTypeEnum(\"type\").notNull(),\n  title: varchar(\"title\").notNull(),\n  message: text(\"message\").notNull(),\n  entityType: varchar(\"entity_type\"),\n  entityId: varchar(\"entity_id\"),\n  actorId: varchar(\"actor_id\").references(() => users.id, { onDelete: 'cascade' }),\n  isRead: boolean(\"is_read\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Activities table\nexport const activities = pgTable(\"activities\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: varchar(\"project_id\").notNull().references(() => projects.id, { onDelete: 'cascade' }),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  type: activityTypeEnum(\"type\").notNull(),\n  description: text(\"description\").notNull(),\n  entityType: varchar(\"entity_type\"),\n  entityId: varchar(\"entity_id\"),\n  entityName: varchar(\"entity_name\"),\n  metadata: jsonb(\"metadata\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Prompts table for writing prompt library\nexport const prompts = pgTable(\"prompts\", {\n  id: serial(\"id\").primaryKey(),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  content: text(\"content\").notNull(),\n  category: varchar(\"category\", { length: 100 }).notNull(),\n  subcategory: varchar(\"subcategory\", { length: 100 }),\n  tags: text(\"tags\").array(),\n  persona: varchar(\"persona\", { length: 50 }).notNull(),\n  targetRole: varchar(\"target_role\", { length: 100 }).notNull(),\n  isFeatured: boolean(\"is_featured\").default(false),\n  usageCount: integer(\"usage_count\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// User favorite prompts for tracking saved prompts\nexport const userFavoritePrompts = pgTable(\"user_favorite_prompts\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  promptId: integer(\"prompt_id\").notNull().references(() => prompts.id, { onDelete: \"cascade\" }),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n}, (table) => ({\n  uniqueUserPrompt: unique().on(table.userId, table.promptId),\n}));\n\n// Email status enum\nexport const emailStatusEnum = pgEnum('email_status', ['draft', 'scheduled', 'sent', 'failed']);\n\n// Emails table for Brevo email tracking\nexport const emails = pgTable(\"emails\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  to: text(\"to\").array().notNull(),\n  cc: text(\"cc\").array(),\n  bcc: text(\"bcc\").array(),\n  subject: text(\"subject\").notNull(),\n  htmlContent: text(\"html_content\").notNull(),\n  textContent: text(\"text_content\"),\n  templateId: integer(\"template_id\"),\n  templateParams: jsonb(\"template_params\"),\n  scheduledAt: timestamp(\"scheduled_at\"),\n  sentAt: timestamp(\"sent_at\"),\n  status: emailStatusEnum(\"status\").notNull().default('draft'),\n  brevoMessageId: varchar(\"brevo_message_id\"),\n  error: text(\"error\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  ownedProjects: many(projects),\n  collaborations: many(projectCollaborators),\n  documents: many(documents),\n  documentVersions: many(documentVersions),\n  documentBranches: many(documentBranches),\n  documentComments: many(documentComments),\n  aiGenerations: many(aiGenerations),\n  writingSessions: many(writingSessions),\n  activityLogs: many(activityLogs),\n  collaborationPresence: many(collaborationPresence),\n  branchMergeEvents: many(branchMergeEvents),\n  notifications: many(notifications),\n  triggeredNotifications: many(notifications),\n  activities: many(activities),\n  emails: many(emails),\n}));\n\nexport const projectsRelations = relations(projects, ({ one, many }) => ({\n  owner: one(users, {\n    fields: [projects.ownerId],\n    references: [users.id],\n  }),\n  collaborators: many(projectCollaborators),\n  characters: many(characters),\n  worldbuildingEntries: many(worldbuildingEntries),\n  timelineEvents: many(timelineEvents),\n  documents: many(documents),\n  aiGenerations: many(aiGenerations),\n  writingSessions: many(writingSessions),\n  activityLogs: many(activityLogs),\n  collaborationPresence: many(collaborationPresence),\n  notifications: many(notifications),\n  activities: many(activities),\n}));\n\nexport const projectCollaboratorsRelations = relations(projectCollaborators, ({ one }) => ({\n  project: one(projects, {\n    fields: [projectCollaborators.projectId],\n    references: [projects.id],\n  }),\n  user: one(users, {\n    fields: [projectCollaborators.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const charactersRelations = relations(characters, ({ one }) => ({\n  project: one(projects, {\n    fields: [characters.projectId],\n    references: [projects.id],\n  }),\n}));\n\nexport const worldbuildingEntriesRelations = relations(worldbuildingEntries, ({ one }) => ({\n  project: one(projects, {\n    fields: [worldbuildingEntries.projectId],\n    references: [projects.id],\n  }),\n}));\n\nexport const timelineEventsRelations = relations(timelineEvents, ({ one }) => ({\n  project: one(projects, {\n    fields: [timelineEvents.projectId],\n    references: [projects.id],\n  }),\n}));\n\nexport const documentsRelations = relations(documents, ({ one, many }) => ({\n  project: one(projects, {\n    fields: [documents.projectId],\n    references: [projects.id],\n  }),\n  author: one(users, {\n    fields: [documents.authorId],\n    references: [users.id],\n  }),\n  branches: many(documentBranches),\n  versions: many(documentVersions),\n  comments: many(documentComments),\n  mergeEvents: many(branchMergeEvents),\n  collaborationState: one(documentCollaborationStates, {\n    fields: [documents.id],\n    references: [documentCollaborationStates.documentId],\n  }),\n}));\n\n// Document branches relations\nexport const documentBranchesRelations = relations(documentBranches, ({ one, many }) => ({\n  document: one(documents, {\n    fields: [documentBranches.documentId],\n    references: [documents.id],\n  }),\n  createdBy: one(users, {\n    fields: [documentBranches.createdBy],\n    references: [users.id],\n  }),\n  parentBranch: one(documentBranches, {\n    fields: [documentBranches.parentBranchId],\n    references: [documentBranches.id],\n  }),\n  childBranches: many(documentBranches),\n  versions: many(documentVersions),\n  sourceMergeEvents: many(branchMergeEvents),\n  targetMergeEvents: many(branchMergeEvents),\n}));\n\nexport const documentVersionsRelations = relations(documentVersions, ({ one, many }) => ({\n  document: one(documents, {\n    fields: [documentVersions.documentId],\n    references: [documents.id],\n  }),\n  branch: one(documentBranches, {\n    fields: [documentVersions.branchId],\n    references: [documentBranches.id],\n  }),\n  parentVersion: one(documentVersions, {\n    fields: [documentVersions.parentVersionId],\n    references: [documentVersions.id],\n  }),\n  childVersions: many(documentVersions),\n  author: one(users, {\n    fields: [documentVersions.authorId],\n    references: [users.id],\n  }),\n}));\n\n// Branch merge events relations\nexport const branchMergeEventsRelations = relations(branchMergeEvents, ({ one }) => ({\n  document: one(documents, {\n    fields: [branchMergeEvents.documentId],\n    references: [documents.id],\n  }),\n  sourceBranch: one(documentBranches, {\n    fields: [branchMergeEvents.sourceBranchId],\n    references: [documentBranches.id],\n  }),\n  targetBranch: one(documentBranches, {\n    fields: [branchMergeEvents.targetBranchId],\n    references: [documentBranches.id],\n  }),\n  mergedVersion: one(documentVersions, {\n    fields: [branchMergeEvents.mergedVersionId],\n    references: [documentVersions.id],\n  }),\n  initiator: one(users, {\n    fields: [branchMergeEvents.initiatorId],\n    references: [users.id],\n  }),\n}));\n\nexport const aiGenerationsRelations = relations(aiGenerations, ({ one }) => ({\n  project: one(projects, {\n    fields: [aiGenerations.projectId],\n    references: [projects.id],\n  }),\n  user: one(users, {\n    fields: [aiGenerations.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const writingSessionsRelations = relations(writingSessions, ({ one }) => ({\n  project: one(projects, {\n    fields: [writingSessions.projectId],\n    references: [projects.id],\n  }),\n  user: one(users, {\n    fields: [writingSessions.userId],\n    references: [users.id],\n  }),\n  document: one(documents, {\n    fields: [writingSessions.documentId],\n    references: [documents.id],\n  }),\n}));\n\nexport const activityLogsRelations = relations(activityLogs, ({ one }) => ({\n  project: one(projects, {\n    fields: [activityLogs.projectId],\n    references: [projects.id],\n  }),\n  user: one(users, {\n    fields: [activityLogs.userId],\n    references: [users.id],\n  }),\n}));\n\n// Collaboration tables relations\nexport const documentCollaborationStatesRelations = relations(documentCollaborationStates, ({ one }) => ({\n  document: one(documents, {\n    fields: [documentCollaborationStates.documentId],\n    references: [documents.id],\n  }),\n}));\n\nexport const documentCommentsRelations = relations(documentComments, ({ one }) => ({\n  document: one(documents, {\n    fields: [documentComments.documentId],\n    references: [documents.id],\n  }),\n  author: one(users, {\n    fields: [documentComments.authorId],\n    references: [users.id],\n  }),\n}));\n\nexport const collaborationPresenceRelations = relations(collaborationPresence, ({ one }) => ({\n  project: one(projects, {\n    fields: [collaborationPresence.projectId],\n    references: [projects.id],\n  }),\n  user: one(users, {\n    fields: [collaborationPresence.userId],\n    references: [users.id],\n  }),\n  document: one(documents, {\n    fields: [collaborationPresence.documentId],\n    references: [documents.id],\n  }),\n}));\n\nexport const notificationsRelations = relations(notifications, ({ one }) => ({\n  user: one(users, {\n    fields: [notifications.userId],\n    references: [users.id],\n  }),\n  project: one(projects, {\n    fields: [notifications.projectId],\n    references: [projects.id],\n  }),\n  actor: one(users, {\n    fields: [notifications.actorId],\n    references: [users.id],\n  }),\n}));\n\nexport const activitiesRelations = relations(activities, ({ one }) => ({\n  project: one(projects, {\n    fields: [activities.projectId],\n    references: [projects.id],\n  }),\n  user: one(users, {\n    fields: [activities.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const emailsRelations = relations(emails, ({ one }) => ({\n  user: one(users, {\n    fields: [emails.userId],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  email: true,\n  firstName: true,\n  lastName: true,\n  profileImageUrl: true,\n});\n\nexport const insertProjectSchema = createInsertSchema(projects).omit({\n  id: true,\n  ownerId: true,\n  currentWordCount: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCharacterSchema = createInsertSchema(characters).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertWorldbuildingEntrySchema = createInsertSchema(worldbuildingEntries).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertTimelineEventSchema = createInsertSchema(timelineEvents).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertDocumentSchema = createInsertSchema(documents).omit({\n  id: true,\n  authorId: true,\n  wordCount: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertProjectCollaboratorSchema = createInsertSchema(projectCollaborators).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertWritingSessionSchema = createInsertSchema(writingSessions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertActivityLogSchema = createInsertSchema(activityLogs).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Collaboration insert schemas\nexport const insertDocumentCommentSchema = createInsertSchema(documentComments).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCollaborationPresenceSchema = createInsertSchema(collaborationPresence).omit({\n  id: true,\n  lastSeen: true,\n});\n\nexport const insertNotificationSchema = createInsertSchema(notifications).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertActivitySchema = createInsertSchema(activities).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Prompt insert schemas\nexport const insertPromptSchema = createInsertSchema(prompts).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserFavoritePromptSchema = createInsertSchema(userFavoritePrompts).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Email insert schema\nexport const insertEmailSchema = createInsertSchema(emails).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Branching insert schemas\nexport const insertDocumentBranchSchema = createInsertSchema(documentBranches).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertDocumentVersionSchema = createInsertSchema(documentVersions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertBranchMergeEventSchema = createInsertSchema(branchMergeEvents).omit({\n  id: true,\n  createdAt: true,\n  resolvedAt: true,\n});\n\n// Worldbuilding details interface\nexport interface WorldbuildingDetails {\n  content?: string;\n  [key: string]: any; // Allow additional properties\n}\n\n// Types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type InsertProject = z.infer<typeof insertProjectSchema>;\nexport type Project = typeof projects.$inferSelect;\nexport type InsertCharacter = z.infer<typeof insertCharacterSchema>;\nexport type Character = typeof characters.$inferSelect;\nexport type InsertWorldbuildingEntry = z.infer<typeof insertWorldbuildingEntrySchema>;\nexport type WorldbuildingEntry = typeof worldbuildingEntries.$inferSelect;\nexport type InsertTimelineEvent = z.infer<typeof insertTimelineEventSchema>;\nexport type TimelineEvent = typeof timelineEvents.$inferSelect;\nexport type InsertDocument = z.infer<typeof insertDocumentSchema>;\nexport type Document = typeof documents.$inferSelect;\nexport type DocumentVersion = typeof documentVersions.$inferSelect;\nexport type InsertDocumentVersion = z.infer<typeof insertDocumentVersionSchema>;\nexport type InsertProjectCollaborator = z.infer<typeof insertProjectCollaboratorSchema>;\nexport type ProjectCollaborator = typeof projectCollaborators.$inferSelect;\nexport type AiGeneration = typeof aiGenerations.$inferSelect;\nexport type InsertWritingSession = z.infer<typeof insertWritingSessionSchema>;\nexport type WritingSession = typeof writingSessions.$inferSelect;\nexport type InsertActivityLog = z.infer<typeof insertActivityLogSchema>;\nexport type ActivityLog = typeof activityLogs.$inferSelect;\n\n// Collaboration types\nexport type DocumentCollaborationState = typeof documentCollaborationStates.$inferSelect;\nexport type InsertDocumentComment = z.infer<typeof insertDocumentCommentSchema>;\nexport type DocumentComment = typeof documentComments.$inferSelect;\nexport type InsertCollaborationPresence = z.infer<typeof insertCollaborationPresenceSchema>;\nexport type CollaborationPresence = typeof collaborationPresence.$inferSelect;\n\n// Notification types\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\nexport type Notification = typeof notifications.$inferSelect;\n\n// Activity types\nexport type InsertActivity = z.infer<typeof insertActivitySchema>;\nexport type Activity = typeof activities.$inferSelect;\n\n// Branching types\nexport type DocumentBranch = typeof documentBranches.$inferSelect;\nexport type InsertDocumentBranch = z.infer<typeof insertDocumentBranchSchema>;\nexport type BranchMergeEvent = typeof branchMergeEvents.$inferSelect;\nexport type InsertBranchMergeEvent = z.infer<typeof insertBranchMergeEventSchema>;\n\n// Prompt types\nexport type Prompt = typeof prompts.$inferSelect;\nexport type InsertPrompt = z.infer<typeof insertPromptSchema>;\nexport type UserFavoritePrompt = typeof userFavoritePrompts.$inferSelect;\nexport type InsertUserFavoritePrompt = z.infer<typeof insertUserFavoritePromptSchema>;\n\n// Email types\nexport type Email = typeof emails.$inferSelect;\nexport type InsertEmail = z.infer<typeof insertEmailSchema>;\n\n// Extended types with relations\nexport type ProjectWithCollaborators = Project & {\n  collaborators: (ProjectCollaborator & { user: User })[];\n  characters: Character[];\n  worldbuildingEntries: WorldbuildingEntry[];\n  timelineEvents: TimelineEvent[];\n  documents: Document[];\n};\n\nexport type DocumentWithVersions = Document & {\n  versions: DocumentVersion[];\n  author: User;\n};\n\nexport type DocumentBranchWithVersions = DocumentBranch & {\n  versions: DocumentVersion[];\n  document: Document;\n};\n\nexport type BranchWithChildren = DocumentBranch & {\n  childBranches: DocumentBranch[];\n  parentBranch?: DocumentBranch | null;\n};\n\nexport type OnboardingProgress = {\n  welcomeShown: boolean;\n  steps: {\n    createProject: boolean;\n    useAI: boolean;\n    addCharacter: boolean;\n    viewAnalytics: boolean;\n    tryExport: boolean;\n  };\n  tourCompleted: boolean;\n};\n\nexport interface SearchResult {\n  id: string;\n  title: string;\n  content: string;\n  projectId: string;\n  projectTitle: string;\n  type: 'document' | 'character' | 'worldbuilding' | 'timeline';\n  createdAt: Date;\n}\n","size_bytes":30629},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Footer } from \"@/components/footer\";\nimport Landing from \"@/pages/landing\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Project from \"@/pages/project\";\nimport Characters from \"@/pages/characters\";\nimport Worldbuilding from \"@/pages/worldbuilding\";\nimport Timeline from \"@/pages/timeline\";\nimport Analytics from \"@/pages/analytics\";\nimport Subscription from \"@/pages/subscription\";\nimport SearchResultsPage from \"@/pages/search-results\";\nimport PromptLibraryPage from \"@/pages/prompt-library\";\nimport Emails from \"@/pages/emails\";\nimport Privacy from \"@/pages/privacy\";\nimport Terms from \"@/pages/terms\";\nimport Cookies from \"@/pages/cookies\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      <Route path=\"/privacy\" component={Privacy} />\n      <Route path=\"/terms\" component={Terms} />\n      <Route path=\"/cookies\" component={Cookies} />\n      {isLoading || !isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/search\" component={SearchResultsPage} />\n          <Route path=\"/prompts\" component={PromptLibraryPage} />\n          <Route path=\"/emails\" component={Emails} />\n          <Route path=\"/projects/:id\" component={Project} />\n          <Route path=\"/projects/:id/characters\" component={Characters} />\n          <Route path=\"/projects/:id/worldbuilding\" component={Worldbuilding} />\n          <Route path=\"/projects/:id/timeline\" component={Timeline} />\n          <Route path=\"/projects/:id/analytics\" component={Analytics} />\n          <Route path=\"/subscription\" component={Subscription} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n        <Footer />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2344},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Source+Sans+Pro:wght@300;400;600;700&family=Source+Serif+Pro:wght@400;600&family=Source+Code+Pro:wght@400;500&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0deg 0% 100%);\n  --foreground: hsl(210deg 25% 7.84%);\n  --card: hsl(0deg 0% 100%);\n  --card-foreground: hsl(150deg 1.43% 27.45%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(210deg 25% 7.84%);\n  --primary: hsl(341.25deg 72.73% 91.37%);\n  --primary-foreground: hsl(160deg 2.16% 27.25%);\n  --secondary: hsl(210, 17%, 25.4902%);\n  --secondary-foreground: hsl(0deg 0% 0%);\n  --muted: hsl(150deg 1.43% 27.45%);\n  --muted-foreground: hsl(210, 25%, 7.8431%);\n  --accent: hsl(341.25deg 72.73% 91.37%);\n  --accent-foreground: hsl(160deg 2.16% 27.25%);\n  --destructive: hsl(356.3deg 90.56% 54.31%);\n  --destructive-foreground: hsl(0deg 0% 0%);\n  --border: hsl(0deg 0% 0%);\n  --input: hsl(160deg 2.16% 27.25%);\n  --ring: hsl(0deg 0% 0%);\n  --chart-1: hsl(0deg 0% 0%);\n  --chart-2: hsl(160deg 2.16% 27.25%);\n  --chart-3: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-4: hsl(270, 95%, 60%);\n  --chart-5: hsl(340, 82%, 52%);\n  --sidebar: hsl(210, 20%, 98%);\n  --sidebar-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-primary: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(210, 20%, 90%);\n  --sidebar-accent-foreground: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-border: hsl(210, 20%, 85%);\n  --sidebar-ring: hsl(203.8863, 88.2845%, 53.1373%);\n  --font-sans: 'Open Sans', sans-serif;\n  --font-serif: 'Open Sans', sans-serif;\n  --font-mono: 'Open Sans', sans-serif;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 1px 2px 0px hsl(203.8863, 88.2845%, 53.1373%, 0.05);\n  --shadow-xs: 0px 1px 2px 0px hsl(203.8863, 88.2845%, 53.1373%, 0.05);\n  --shadow-sm: 0px 1px 3px 0px hsl(203.8863, 88.2845%, 53.1373%, 0.1), 0px 1px 2px -1px hsl(203.8863, 88.2845%, 53.1373%, 0.1);\n  --shadow: 0px 1px 3px 0px hsl(203.8863, 88.2845%, 53.1373%, 0.1), 0px 1px 2px -1px hsl(203.8863, 88.2845%, 53.1373%, 0.1);\n  --shadow-md: 0px 4px 6px -1px hsl(203.8863, 88.2845%, 53.1373%, 0.1), 0px 2px 4px -2px hsl(203.8863, 88.2845%, 53.1373%, 0.1);\n  --shadow-lg: 0px 10px 15px -3px hsl(203.8863, 88.2845%, 53.1373%, 0.1), 0px 4px 6px -4px hsl(203.8863, 88.2845%, 53.1373%, 0.1);\n  --shadow-xl: 0px 20px 25px -5px hsl(203.8863, 88.2845%, 53.1373%, 0.1), 0px 8px 10px -6px hsl(203.8863, 88.2845%, 53.1373%, 0.1);\n  --shadow-2xl: 0px 25px 50px -12px hsl(203.8863, 88.2845%, 53.1373%, 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n/* Collaboration cursors and selections */\n.collaboration-cursor {\n  position: relative;\n  margin-left: -1px;\n  margin-right: -1px;\n  border-left: 2px solid;\n  border-color: currentColor;\n  word-break: normal;\n  pointer-events: none;\n}\n\n.collaboration-cursor-label {\n  position: absolute;\n  top: -1.4em;\n  left: -1px;\n  font-size: 12px;\n  font-style: normal;\n  font-weight: 600;\n  line-height: normal;\n  user-select: none;\n  color: white;\n  padding: 0.1rem 0.3rem;\n  border-radius: 3px 3px 3px 0;\n  white-space: nowrap;\n}\n\n.collaboration-selection {\n  position: relative;\n  pointer-events: none;\n  background-color: currentColor;\n  opacity: 0.3;\n}\n\n.dark {\n  --background: hsl(210, 25%, 7.8431%);\n  --foreground: hsl(210, 20%, 98%);\n  --card: hsl(210, 25%, 11%);\n  --card-foreground: hsl(210, 20%, 98%);\n  --popover: hsl(210, 25%, 7.8431%);\n  --popover-foreground: hsl(210, 20%, 98%);\n  --primary: hsl(210, 20%, 98%);\n  --primary-foreground: hsl(210, 25%, 7.8431%);\n  --secondary: hsl(210, 17%, 25.4902%);\n  --secondary-foreground: hsl(210, 20%, 98%);\n  --muted: hsl(210, 25%, 15%);\n  --muted-foreground: hsl(210, 20%, 70%);\n  --accent: hsl(203.8863, 88.2845%, 53.1373%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 25%, 20%);\n  --input: hsl(210, 25%, 20%);\n  --ring: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-1: hsl(142, 70%, 45%);\n  --chart-2: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-3: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-4: hsl(270, 95%, 60%);\n  --chart-5: hsl(340, 82%, 52%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    @apply font-sans;\n  }\n}\n\n@layer components {\n  .ai-persona-badge {\n    animation: pulse 2s infinite;\n  }\n  \n  @keyframes pulse {\n    0%, 100% { opacity: 1; }\n    50% { opacity: 0.7; }\n  }\n\n  .editor-content {\n    min-height: 24rem;\n  }\n\n  .prose-custom {\n    @apply text-foreground;\n  }\n\n  .prose-custom h1,\n  .prose-custom h2,\n  .prose-custom h3,\n  .prose-custom h4,\n  .prose-custom h5,\n  .prose-custom h6 {\n    @apply text-foreground font-sans;\n  }\n\n  .prose-custom p {\n    @apply text-foreground opacity-90;\n  }\n\n  .prose-custom strong {\n    @apply text-foreground font-semibold;\n  }\n\n  .prose-custom em {\n    @apply text-foreground opacity-80;\n  }\n}\n","size_bytes":5107},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ai-assistant-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useAiModalStore } from \"@/stores/ai-modal-store\";\nimport { \n  Lightbulb, \n  Edit3, \n  FileText, \n  Zap,\n  Crown,\n  Infinity\n} from \"lucide-react\";\n\ninterface AiAssistantModalProps {\n  open: boolean;\n  onClose: () => void;\n  projects: any[];\n}\n\ntype PersonaType = \"muse\" | \"editor\" | \"coach\";\n\nexport default function AiAssistantModal({ open, onClose, projects }: AiAssistantModalProps) {\n  const { toast } = useToast();\n  const { prefillData, clearPrefill } = useAiModalStore();\n  const [selectedPersona, setSelectedPersona] = useState<PersonaType | null>(null);\n  const [selectedProject, setSelectedProject] = useState(\"\");\n  const [prompt, setPrompt] = useState(\"\");\n  const [creativity, setCreativity] = useState([70]);\n  const [length, setLength] = useState(\"medium\");\n  const [result, setResult] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (open && prefillData) {\n      if (prefillData.persona) {\n        setSelectedPersona(prefillData.persona);\n      }\n      setPrompt(prefillData.prompt);\n      if (prefillData.projectId) {\n        setSelectedProject(prefillData.projectId);\n      }\n      clearPrefill();\n    }\n  }, [open, prefillData, clearPrefill]);\n\n  // Fetch AI usage data\n  const { data: usageData, isLoading: usageLoading } = useQuery<{\n    used: number;\n    limit: number;\n    remaining: number;\n    tokens_used: number;\n    resetDate: string;\n    plan: string;\n  }>({\n    queryKey: ['/api/ai/usage'],\n    enabled: open,\n  });\n\n  const personas = [\n    {\n      id: \"muse\" as PersonaType,\n      name: \"Muse\",\n      subtitle: \"Creative Inspiration\",\n      description: \"Generate evocative scenes with rich sensory details and emotional depth\",\n      icon: <Lightbulb className=\"h-5 w-5 text-chart-1\" />,\n      bgColor: \"bg-chart-1/10\",\n      textColor: \"text-chart-1\",\n      borderColor: \"border-chart-1\"\n    },\n    {\n      id: \"editor\" as PersonaType,\n      name: \"Editor\",\n      subtitle: \"Polish & Refine\",\n      description: \"Improve clarity, grammar, and flow while preserving your voice\",\n      icon: <Edit3 className=\"h-5 w-5 text-accent\" />,\n      bgColor: \"bg-accent/10\",\n      textColor: \"text-accent\",\n      borderColor: \"border-accent\"\n    },\n    {\n      id: \"coach\" as PersonaType,\n      name: \"Coach\",\n      subtitle: \"Structure & Planning\",\n      description: \"Create outlines, story beats, and structural guidance\",\n      icon: <FileText className=\"h-5 w-5 text-chart-2\" />,\n      bgColor: \"bg-chart-2/10\",\n      textColor: \"text-chart-2\",\n      borderColor: \"border-chart-2\"\n    }\n  ];\n\n  const generateMutation = useMutation({\n    mutationFn: async (data: { persona: PersonaType; projectId: string; userPrompt: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/ai/generate\", {\n        intent: data.persona === \"muse\" ? \"draft_scene\" : data.persona === \"editor\" ? \"edit_paragraph\" : \"generate_outline\",\n        persona: data.persona,\n        project_id: data.projectId,\n        params: {\n          max_tokens: length === \"short\" ? 400 : length === \"medium\" ? 800 : 1200,\n          deterministic: creativity[0] < 30\n        },\n        userPrompt: data.userPrompt\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setResult(typeof data.content === \"string\" ? data.content : JSON.stringify(data.content, null, 2));\n      queryClient.invalidateQueries({ queryKey: ['/api/ai/usage'] });\n      toast({\n        title: \"Content Generated\",\n        description: \"Your AI assistant has created new content!\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Generation Failed\",\n        description: \"Failed to generate content. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleGenerate = () => {\n    if (!selectedPersona || !prompt.trim()) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please select a persona and enter a prompt.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    generateMutation.mutate({\n      persona: selectedPersona,\n      projectId: selectedProject && selectedProject !== \"none\" ? selectedProject : \"\",\n      userPrompt: prompt\n    });\n  };\n\n  const handleClose = () => {\n    setSelectedPersona(null);\n    setSelectedProject(\"\");\n    setPrompt(\"\");\n    setCreativity([70]);\n    setLength(\"medium\");\n    setResult(null);\n    onClose();\n  };\n\n  const selectedPersonaData = personas.find(p => p.id === selectedPersona);\n\n  return (\n    <Dialog open={open} onOpenChange={handleClose}>\n      <DialogContent className=\"sm:max-w-4xl max-h-[90vh] overflow-hidden\" data-testid=\"modal-ai-assistant\">\n        <DialogHeader>\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-chart-1/10 rounded-lg flex items-center justify-center\">\n              <Zap className=\"h-5 w-5 text-chart-1\" />\n            </div>\n            <div>\n              <DialogTitle>AI Writing Assistant</DialogTitle>\n              <DialogDescription>Choose your writing companion</DialogDescription>\n            </div>\n          </div>\n        </DialogHeader>\n        \n        <div className=\"overflow-y-auto\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            \n            {/* Left: Persona Selection */}\n            <div className=\"space-y-4\">\n              <h4 className=\"font-medium text-card-foreground\">Select AI Persona</h4>\n              \n              <div className=\"space-y-3\">\n                {personas.map((persona) => (\n                  <Card \n                    key={persona.id}\n                    className={`cursor-pointer transition-all hover:shadow-md ${\n                      selectedPersona === persona.id \n                        ? `${persona.borderColor} ring-2 ring-opacity-20` \n                        : \"border-border\"\n                    }`}\n                    onClick={() => setSelectedPersona(persona.id)}\n                    data-testid={`persona-${persona.id}`}\n                  >\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center space-x-3 mb-2\">\n                        <div className={`w-8 h-8 ${persona.bgColor} rounded-lg flex items-center justify-center`}>\n                          {persona.icon}\n                        </div>\n                        <span className=\"font-medium text-card-foreground\">\n                          {persona.name} - {persona.subtitle}\n                        </span>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground ml-11\">\n                        {persona.description}\n                      </p>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </div>\n            \n            {/* Right: Input Area */}\n            <div className=\"space-y-4\">\n              <h4 className=\"font-medium text-card-foreground\">Your Request</h4>\n              \n              <div className=\"space-y-4\">\n                {projects.length > 0 && (\n                  <div>\n                    <Label className=\"text-sm font-medium text-card-foreground mb-2\">Project Context</Label>\n                    <Select value={selectedProject} onValueChange={setSelectedProject}>\n                      <SelectTrigger data-testid=\"select-ai-project\">\n                        <SelectValue placeholder=\"Select a project (optional)\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"none\">No specific project</SelectItem>\n                        {projects.map((project) => (\n                          <SelectItem key={project.id} value={project.id}>\n                            {project.title}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                )}\n                \n                <div>\n                  <Label className=\"text-sm font-medium text-card-foreground mb-2\">\n                    What would you like help with?\n                  </Label>\n                  <Textarea \n                    value={prompt}\n                    onChange={(e) => setPrompt(e.target.value)}\n                    className=\"resize-none editor-content\"\n                    placeholder=\"Describe what you'd like the AI to help you with. Be specific about the scene, characters, or writing goals...\"\n                    data-testid=\"input-ai-prompt\"\n                  />\n                </div>\n                \n                {/* AI Parameters */}\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label className=\"text-sm font-medium text-card-foreground mb-2\">Creativity</Label>\n                    <Slider\n                      value={creativity}\n                      onValueChange={setCreativity}\n                      max={100}\n                      step={1}\n                      className=\"w-full\"\n                      data-testid=\"slider-creativity\"\n                    />\n                    <div className=\"flex justify-between text-xs text-muted-foreground mt-1\">\n                      <span>Focused</span>\n                      <span>Creative</span>\n                    </div>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium text-card-foreground mb-2\">Length</Label>\n                    <Select value={length} onValueChange={setLength}>\n                      <SelectTrigger data-testid=\"select-ai-length\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"short\">Short (200-400 words)</SelectItem>\n                        <SelectItem value=\"medium\">Medium (400-800 words)</SelectItem>\n                        <SelectItem value=\"long\">Long (800+ words)</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                {/* Result Display */}\n                {result && (\n                  <div className=\"space-y-2\">\n                    <Label className=\"text-sm font-medium text-card-foreground\">Generated Content</Label>\n                    <div className=\"bg-muted/30 rounded-lg p-4 max-h-40 overflow-y-auto\">\n                      <pre className=\"text-sm whitespace-pre-wrap text-card-foreground\">{result}</pre>\n                    </div>\n                  </div>\n                )}\n              </div>\n              \n              <div className=\"flex items-center justify-between pt-4 border-t border-border\">\n                <div className=\"flex items-center space-x-2\">\n                  {usageLoading ? (\n                    <Skeleton className=\"h-5 w-40\" />\n                  ) : usageData ? (\n                    <>\n                      {usageData.limit === -1 ? (\n                        <>\n                          <Infinity className=\"h-4 w-4 text-chart-1\" />\n                          <div className=\"text-sm text-muted-foreground\">\n                            <span className=\"font-medium text-chart-1\">Unlimited</span> AI generations\n                          </div>\n                        </>\n                      ) : (\n                        <>\n                          <Crown className=\"h-4 w-4 text-chart-1\" />\n                          <div className=\"text-sm text-muted-foreground\" data-testid=\"text-ai-usage\">\n                            <span className=\"font-medium text-chart-1\">{usageData.remaining}</span> / {usageData.limit} AI sessions remaining\n                          </div>\n                        </>\n                      )}\n                    </>\n                  ) : null}\n                </div>\n                <div className=\"flex space-x-3\">\n                  <Button \n                    variant=\"outline\" \n                    onClick={handleClose}\n                    disabled={generateMutation.isPending}\n                    data-testid=\"button-ai-cancel\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button \n                    onClick={handleGenerate}\n                    disabled={\n                      generateMutation.isPending || \n                      !selectedPersona || \n                      !prompt.trim() || \n                      (usageData && usageData.limit !== -1 && usageData.remaining <= 0)\n                    }\n                    data-testid=\"button-ai-generate\"\n                  >\n                    {generateMutation.isPending ? (\n                      <>Generating...</>\n                    ) : (\n                      <>\n                        <Zap className=\"mr-2 h-4 w-4\" />\n                        Generate Content\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":14284},"client/src/components/project-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { CalendarIcon } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { cn } from \"@/lib/utils\";\n\ninterface ProjectModalProps {\n  open: boolean;\n  onClose: () => void;\n  onSubmit: (data: any) => void;\n  loading?: boolean;\n}\n\nexport default function ProjectModal({ open, onClose, onSubmit, loading = false }: ProjectModalProps) {\n  const [formData, setFormData] = useState({\n    template: \"blank\",\n    title: \"\",\n    description: \"\",\n    genre: \"\",\n    targetWordCount: \"\",\n    deadline: undefined as Date | undefined,\n  });\n\n  const genres = [\n    \"Fantasy\",\n    \"Science Fiction\",\n    \"Romance\",\n    \"Mystery\",\n    \"Literary Fiction\",\n    \"Historical Fiction\",\n    \"Thriller\",\n    \"Horror\",\n    \"Young Adult\",\n    \"Other\"\n  ];\n\n  const templates = [\n    { value: \"blank\", label: \"Blank Project\", description: \"Start with an empty project\" },\n    { value: \"novel\", label: \"Novel Template\", description: \"3 chapters, 2 characters, worldbuilding & timeline\" },\n    { value: \"screenplay\", label: \"Screenplay Template\", description: \"3 acts, 2 characters, locations & timeline\" },\n    { value: \"short-story\", label: \"Short Story Template\", description: \"1 draft, character, setting & key event\" },\n  ];\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const submitData = {\n      template: formData.template,\n      title: formData.title,\n      description: formData.description || undefined,\n      genre: formData.genre || undefined,\n      targetWordCount: formData.targetWordCount ? parseInt(formData.targetWordCount) : undefined,\n      deadline: formData.deadline?.toISOString() || undefined,\n    };\n\n    onSubmit(submitData);\n  };\n\n  const handleClose = () => {\n    setFormData({\n      template: \"blank\",\n      title: \"\",\n      description: \"\",\n      genre: \"\",\n      targetWordCount: \"\",\n      deadline: undefined,\n    });\n    onClose();\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={handleClose}>\n      <DialogContent className=\"sm:max-w-md\" data-testid=\"modal-create-project\">\n        <DialogHeader>\n          <DialogTitle>Create New Project</DialogTitle>\n          <DialogDescription>\n            Start a new writing project with your story details.\n          </DialogDescription>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"template\">Template</Label>\n            <Select value={formData.template} onValueChange={(value) => setFormData({ ...formData, template: value })}>\n              <SelectTrigger data-testid=\"select-project-template\">\n                <SelectValue placeholder=\"Select a template\" />\n              </SelectTrigger>\n              <SelectContent>\n                {templates.map((template) => (\n                  <SelectItem key={template.value} value={template.value} data-testid={`option-template-${template.value}`}>\n                    <div className=\"flex flex-col\">\n                      <span className=\"font-medium\">{template.label}</span>\n                      <span className=\"text-xs text-muted-foreground\">{template.description}</span>\n                    </div>\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"title\">Project Title *</Label>\n            <Input\n              id=\"title\"\n              value={formData.title}\n              onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n              placeholder=\"Enter your project title\"\n              required\n              data-testid=\"input-project-title\"\n            />\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"genre\">Genre</Label>\n            <Select value={formData.genre} onValueChange={(value) => setFormData({ ...formData, genre: value })}>\n              <SelectTrigger data-testid=\"select-project-genre\">\n                <SelectValue placeholder=\"Select a genre\" />\n              </SelectTrigger>\n              <SelectContent>\n                {genres.map((genre) => (\n                  <SelectItem key={genre} value={genre}>\n                    {genre}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"description\">Description</Label>\n            <Textarea\n              id=\"description\"\n              value={formData.description}\n              onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n              placeholder=\"Brief description of your project...\"\n              className=\"resize-none h-20\"\n              data-testid=\"input-project-description\"\n            />\n          </div>\n          \n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"targetWordCount\">Target Word Count</Label>\n              <Input\n                id=\"targetWordCount\"\n                type=\"number\"\n                value={formData.targetWordCount}\n                onChange={(e) => setFormData({ ...formData, targetWordCount: e.target.value })}\n                placeholder=\"50000\"\n                data-testid=\"input-target-word-count\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label>Deadline</Label>\n              <Popover>\n                <PopoverTrigger asChild>\n                  <Button\n                    variant=\"outline\"\n                    className={cn(\n                      \"w-full justify-start text-left font-normal\",\n                      !formData.deadline && \"text-muted-foreground\"\n                    )}\n                    data-testid=\"button-select-deadline\"\n                  >\n                    <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                    {formData.deadline ? format(formData.deadline, \"PPP\") : \"Pick a date\"}\n                  </Button>\n                </PopoverTrigger>\n                <PopoverContent className=\"w-auto p-0\">\n                  <Calendar\n                    mode=\"single\"\n                    selected={formData.deadline}\n                    onSelect={(date) => setFormData({ ...formData, deadline: date })}\n                    initialFocus\n                  />\n                </PopoverContent>\n              </Popover>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center justify-end space-x-3 pt-4 border-t border-border\">\n            <Button \n              type=\"button\" \n              variant=\"outline\" \n              onClick={handleClose}\n              disabled={loading}\n              data-testid=\"button-cancel-project\"\n            >\n              Cancel\n            </Button>\n            <Button \n              type=\"submit\" \n              disabled={loading || !formData.title.trim()}\n              data-testid=\"button-create-project\"\n            >\n              {loading ? \"Creating...\" : \"Create Project\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":7754},"client/src/components/rich-text-editor.tsx":{"content":"import { useEditor, EditorContent } from '@tiptap/react';\nimport StarterKit from '@tiptap/starter-kit';\nimport UnderlineExtension from '@tiptap/extension-underline';\nimport TextAlign from '@tiptap/extension-text-align';\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useEffect, useMemo, useState, useRef } from 'react';\nimport * as Y from 'yjs';\nimport * as awarenessProtocol from 'y-protocols/awareness';\nimport { YjsCollaboration } from './yjs-collaboration-extension';\nimport { calculateWordCount } from '@shared/utils';\nimport { \n  Bold, \n  Italic, \n  Underline, \n  Strikethrough,\n  List, \n  ListOrdered,\n  Quote,\n  Undo,\n  Redo,\n  Type,\n  AlignLeft,\n  AlignCenter,\n  AlignRight,\n  Users,\n  Circle,\n  Eye,\n  Edit3,\n  MessageSquare,\n  Code,\n  Code2,\n  Minus,\n  Check,\n  Loader2\n} from \"lucide-react\";\n\ninterface RichTextEditorProps {\n  content: string;\n  onChange: (content: string) => void;\n  placeholder?: string;\n  className?: string;\n  ydoc?: Y.Doc | null;\n  awareness?: awarenessProtocol.Awareness | null;\n  xmlFragment?: Y.XmlFragment | null;\n  isCollaborative?: boolean;\n  readOnly?: boolean;\n  onlineUsers?: Map<number, any>;\n  userColor?: string;\n  userRole?: 'owner' | 'editor' | 'reviewer' | 'reader' | null;\n  userName?: string;\n  onCommentClick?: () => void;\n}\n\n\nexport default function RichTextEditor({ \n  content, \n  onChange, \n  placeholder = \"Start writing...\",\n  className = \"\",\n  ydoc,\n  awareness,\n  xmlFragment,\n  isCollaborative = false,\n  readOnly = false,\n  onlineUsers,\n  userColor,\n  userRole,\n  userName,\n  onCommentClick\n}: RichTextEditorProps) {\n  \n  // Autosave state management\n  const [saveStatus, setSaveStatus] = useState<'saved' | 'typing' | 'saving'>('saved');\n  const [lastSaved, setLastSaved] = useState<Date | null>(null);\n  const saveTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const typingTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  \n  // Word count state\n  const [wordCount, setWordCount] = useState(0);\n\n  // Configure extensions based on collaborative mode\n  const extensions = useMemo(() => {\n    const baseExtensions = [];\n    \n    if (isCollaborative && ydoc && awareness && xmlFragment) {\n      // Use Yjs collaboration extension for proper sync\n      baseExtensions.push(\n        YjsCollaboration.configure({\n          ydoc,\n          awareness,\n          xmlFragment: 'prosemirror',\n          user: {\n            name: userName || 'Anonymous',\n            color: userColor || '#000000'\n          }\n        })\n      );\n      // Add StarterKit - Yjs extension handles history\n      baseExtensions.push(StarterKit);\n    } else {\n      // Non-collaborative mode - use regular StarterKit with history\n      baseExtensions.push(StarterKit);\n    }\n    \n    // Add additional formatting extensions\n    baseExtensions.push(\n      UnderlineExtension,\n      TextAlign.configure({\n        types: ['heading', 'paragraph'],\n      })\n    );\n    \n    return baseExtensions;\n  }, [isCollaborative, ydoc, awareness, xmlFragment, userName, userColor]);\n\n  const editor = useEditor({\n    extensions,\n    content: isCollaborative ? undefined : content, // Don't set initial content in collaborative mode\n    editable: !readOnly && userRole !== 'reader',\n    onUpdate: ({ editor }) => {\n      const htmlContent = editor.getHTML();\n      \n      // IMMEDIATELY save data - no debouncing for data persistence\n      onChange(htmlContent);\n      \n      // Calculate and update word count immediately\n      const newWordCount = calculateWordCount(htmlContent);\n      setWordCount(newWordCount);\n      \n      // Set typing status immediately (UI feedback)\n      setSaveStatus('typing');\n      \n      // Clear existing timeouts\n      if (typingTimeoutRef.current) {\n        clearTimeout(typingTimeoutRef.current);\n      }\n      if (saveTimeoutRef.current) {\n        clearTimeout(saveTimeoutRef.current);\n      }\n      \n      // After 500ms of no typing, change to saving (cosmetic only)\n      typingTimeoutRef.current = setTimeout(() => {\n        setSaveStatus('saving');\n        \n        // After another 300ms, mark as saved (cosmetic only)\n        saveTimeoutRef.current = setTimeout(() => {\n          setSaveStatus('saved');\n          setLastSaved(new Date());\n        }, 300);\n      }, 500);\n    },\n    editorProps: {\n      attributes: {\n        class: 'prose prose-custom max-w-none focus:outline-none min-h-[200px] p-4',\n        'data-testid': 'editor-content-area'\n      },\n    },\n  });\n\n  // Cleanup timeouts on unmount\n  useEffect(() => {\n    return () => {\n      if (typingTimeoutRef.current) clearTimeout(typingTimeoutRef.current);\n      if (saveTimeoutRef.current) clearTimeout(saveTimeoutRef.current);\n    };\n  }, []);\n\n  // Update content for non-collaborative mode\n  useEffect(() => {\n    if (!editor || isCollaborative) return;\n    \n    // Only update content if it's different and we're not in collaborative mode\n    const currentContent = editor.getHTML();\n    if (content !== currentContent) {\n      editor.commands.setContent(content);\n    }\n  }, [content, editor, isCollaborative]);\n  \n  // Initialize word count when editor or content loads\n  useEffect(() => {\n    if (editor) {\n      const htmlContent = editor.getHTML();\n      const initialWordCount = calculateWordCount(htmlContent);\n      setWordCount(initialWordCount);\n    }\n  }, [editor]);\n\n  if (!editor) {\n    return null;\n  }\n\n  // Calculate number of active users for display\n  const activeUserCount = onlineUsers ? onlineUsers.size : 0;\n\n  return (\n    <div className={`border border-border rounded-lg ${className}`} data-testid=\"rich-text-editor\">\n      {/* Status Bar */}\n      {isCollaborative && (\n        <div className=\"bg-muted/50 px-3 py-2 flex items-center justify-between text-sm border-b border-border\">\n          <div className=\"flex items-center space-x-3\">\n            {/* Connection Status */}\n            <div className=\"flex items-center space-x-1.5\">\n              <Circle className={`h-2 w-2 fill-current ${isCollaborative ? 'text-green-500' : 'text-gray-400'}`} />\n              <span className=\"text-muted-foreground\">\n                {isCollaborative ? 'Connected' : 'Offline'}\n              </span>\n            </div>\n            \n            {/* Active Users */}\n            {activeUserCount > 0 && (\n              <div className=\"flex items-center space-x-1.5\" data-testid=\"active-users-count\">\n                <Users className=\"h-4 w-4 text-muted-foreground\" />\n                <span className=\"text-muted-foreground\">{activeUserCount} online</span>\n              </div>\n            )}\n            \n            {/* User Role */}\n            {userRole && (\n              <Badge variant=\"secondary\" className=\"capitalize\">\n                {userRole === 'owner' && <Edit3 className=\"h-3 w-3 mr-1\" />}\n                {userRole === 'reader' && <Eye className=\"h-3 w-3 mr-1\" />}\n                {userRole}\n              </Badge>\n            )}\n          </div>\n          \n          {/* Comment Button */}\n          {onCommentClick && userRole !== 'reader' && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onCommentClick}\n              data-testid=\"button-add-comment\"\n            >\n              <MessageSquare className=\"h-4 w-4 mr-1\" />\n              Comment\n            </Button>\n          )}\n        </div>\n      )}\n      \n      {/* Toolbar */}\n      <div className=\"border-b border-border p-2 flex items-center justify-between flex-wrap gap-1\">\n        <div className=\"flex items-center space-x-1 flex-wrap\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => editor.chain().focus().toggleBold().run()}\n            className={editor.isActive('bold') ? 'bg-muted' : ''}\n            disabled={readOnly || userRole === 'reader'}\n            data-testid=\"button-bold\"\n          >\n            <Bold className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => editor.chain().focus().toggleItalic().run()}\n            className={editor.isActive('italic') ? 'bg-muted' : ''}\n            disabled={readOnly || userRole === 'reader'}\n            data-testid=\"button-italic\"\n          >\n            <Italic className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => editor.chain().focus().toggleUnderline().run()}\n            className={editor.isActive('underline') ? 'bg-muted' : ''}\n            disabled={readOnly || userRole === 'reader'}\n            data-testid=\"button-underline\"\n          >\n            <Underline className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => editor.chain().focus().toggleStrike().run()}\n            className={editor.isActive('strike') ? 'bg-muted' : ''}\n            disabled={readOnly || userRole === 'reader'}\n            data-testid=\"button-strikethrough\"\n          >\n            <Strikethrough className=\"h-4 w-4\" />\n          </Button>\n          \n          <Separator orientation=\"vertical\" className=\"h-6\" />\n          \n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => editor.chain().focus().toggleHeading({ level: 1 }).run()}\n            className={editor.isActive('heading', { level: 1 }) ? 'bg-muted' : ''}\n            disabled={readOnly || userRole === 'reader'}\n            data-testid=\"button-h1\"\n          >\n            H1\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => editor.chain().focus().toggleHeading({ level: 2 }).run()}\n            className={editor.isActive('heading', { level: 2 }) ? 'bg-muted' : ''}\n            disabled={readOnly || userRole === 'reader'}\n            data-testid=\"button-h2\"\n          >\n            H2\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => editor.chain().focus().toggleHeading({ level: 3 }).run()}\n            className={editor.isActive('heading', { level: 3 }) ? 'bg-muted' : ''}\n            disabled={readOnly || userRole === 'reader'}\n            data-testid=\"button-h3\"\n          >\n            H3\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => editor.chain().focus().setParagraph().run()}\n            className={editor.isActive('paragraph') ? 'bg-muted' : ''}\n            disabled={readOnly || userRole === 'reader'}\n            data-testid=\"button-paragraph\"\n          >\n            <Type className=\"h-4 w-4\" />\n          </Button>\n          \n          <Separator orientation=\"vertical\" className=\"h-6\" />\n          \n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => editor.chain().focus().toggleCode().run()}\n            className={editor.isActive('code') ? 'bg-muted' : ''}\n            disabled={readOnly || userRole === 'reader'}\n            data-testid=\"button-code\"\n          >\n            <Code className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => editor.chain().focus().toggleCodeBlock().run()}\n            className={editor.isActive('codeBlock') ? 'bg-muted' : ''}\n            disabled={readOnly || userRole === 'reader'}\n            data-testid=\"button-code-block\"\n          >\n            <Code2 className=\"h-4 w-4\" />\n          </Button>\n          \n          <Separator orientation=\"vertical\" className=\"h-6\" />\n          \n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => editor.chain().focus().setTextAlign('left').run()}\n            className={editor.isActive({ textAlign: 'left' }) ? 'bg-muted' : ''}\n            disabled={readOnly || userRole === 'reader'}\n            data-testid=\"button-align-left\"\n          >\n            <AlignLeft className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => editor.chain().focus().setTextAlign('center').run()}\n            className={editor.isActive({ textAlign: 'center' }) ? 'bg-muted' : ''}\n            disabled={readOnly || userRole === 'reader'}\n            data-testid=\"button-align-center\"\n          >\n            <AlignCenter className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => editor.chain().focus().setTextAlign('right').run()}\n            className={editor.isActive({ textAlign: 'right' }) ? 'bg-muted' : ''}\n            disabled={readOnly || userRole === 'reader'}\n            data-testid=\"button-align-right\"\n          >\n            <AlignRight className=\"h-4 w-4\" />\n          </Button>\n          \n          <Separator orientation=\"vertical\" className=\"h-6\" />\n          \n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => editor.chain().focus().toggleBulletList().run()}\n            className={editor.isActive('bulletList') ? 'bg-muted' : ''}\n            disabled={readOnly || userRole === 'reader'}\n            data-testid=\"button-bullet-list\"\n          >\n            <List className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => editor.chain().focus().toggleOrderedList().run()}\n            className={editor.isActive('orderedList') ? 'bg-muted' : ''}\n            disabled={readOnly || userRole === 'reader'}\n            data-testid=\"button-ordered-list\"\n          >\n            <ListOrdered className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => editor.chain().focus().toggleBlockquote().run()}\n            className={editor.isActive('blockquote') ? 'bg-muted' : ''}\n            disabled={readOnly || userRole === 'reader'}\n            data-testid=\"button-quote\"\n          >\n            <Quote className=\"h-4 w-4\" />\n          </Button>\n          \n          <Separator orientation=\"vertical\" className=\"h-6\" />\n          \n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => editor.chain().focus().setHorizontalRule().run()}\n            disabled={readOnly || userRole === 'reader'}\n            data-testid=\"button-horizontal-rule\"\n          >\n            <Minus className=\"h-4 w-4\" />\n          </Button>\n          \n          <Separator orientation=\"vertical\" className=\"h-6\" />\n          \n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => editor.chain().focus().undo().run()}\n            disabled={!editor.can().undo() || readOnly || userRole === 'reader'}\n            data-testid=\"button-undo\"\n          >\n            <Undo className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => editor.chain().focus().redo().run()}\n            disabled={!editor.can().redo() || readOnly || userRole === 'reader'}\n            data-testid=\"button-redo\"\n          >\n            <Redo className=\"h-4 w-4\" />\n          </Button>\n        </div>\n        \n        {/* Autosave Indicator and Word Count */}\n        <div className=\"flex items-center space-x-3\">\n          {/* Word Count */}\n          <div className=\"text-xs text-muted-foreground\" data-testid=\"text-word-count\">\n            {wordCount.toLocaleString()} {wordCount === 1 ? 'word' : 'words'}\n          </div>\n          \n          {/* Autosave Indicator */}\n          {!isCollaborative && (\n            <div className=\"flex items-center space-x-1.5 text-xs text-muted-foreground\" data-testid=\"autosave-indicator\">\n              {saveStatus === 'typing' && (\n                <>\n                  <Loader2 className=\"h-3 w-3 animate-spin\" />\n                  <span>Typing...</span>\n                </>\n              )}\n              {saveStatus === 'saving' && (\n                <>\n                  <Loader2 className=\"h-3 w-3 animate-spin\" />\n                  <span>Saving...</span>\n                </>\n              )}\n              {saveStatus === 'saved' && lastSaved && (\n                <>\n                  <Check className=\"h-3 w-3 text-green-500\" />\n                  <span>Saved {lastSaved.toLocaleTimeString()}</span>\n                </>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n      \n      {/* Editor Content with Live Cursors Overlay */}\n      <div className=\"relative\">\n        {/* Live Cursors Overlay */}\n        {isCollaborative && onlineUsers && onlineUsers.size > 0 && (\n          <div className=\"absolute inset-0 pointer-events-none z-10\" data-testid=\"live-cursors-overlay\">\n            {Array.from(onlineUsers.values()).map((userState, index) => {\n              if (!userState?.user || !userState.cursor) return null;\n              const cursor = userState.cursor;\n              const cursorColor = userState.user.color || '#808080';\n              \n              return (\n                <div\n                  key={`cursor-${index}`}\n                  className=\"absolute\"\n                  style={{\n                    left: '0',\n                    top: '0',\n                    transform: `translateY(${cursor.from * 0.5}px)`,\n                  }}\n                  data-testid={`cursor-user-${userState.user.id}`}\n                >\n                  <div\n                    className=\"w-0.5 h-5 animate-pulse\"\n                    style={{ backgroundColor: cursorColor }}\n                  />\n                  <div\n                    className=\"absolute -top-6 left-0 px-2 py-1 rounded text-xs text-white whitespace-nowrap\"\n                    style={{ backgroundColor: cursorColor }}\n                  >\n                    {userState.user.name}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        )}\n        \n        {/* Editor Content */}\n        <EditorContent \n          editor={editor} \n          className={`min-h-[200px] ${readOnly || userRole === 'reader' ? 'opacity-75' : ''}`}\n          data-testid=\"editor-content\"\n        />\n        \n        {/* Read-only Overlay Message */}\n        {(readOnly || userRole === 'reader') && (\n          <div className=\"absolute inset-0 flex items-center justify-center bg-background/50 pointer-events-none\">\n            <Badge variant=\"secondary\" className=\"flex items-center space-x-1\">\n              <Eye className=\"h-3 w-3\" />\n              <span>View Only</span>\n            </Badge>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":18769},"client/src/components/sidebar.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  LayoutDashboard,\n  BookOpen,\n  Users,\n  Globe,\n  Clock,\n  Bot,\n  Settings,\n  CreditCard,\n  LogOut,\n  Menu,\n  Plus,\n  Lightbulb,\n  Mail\n} from \"lucide-react\";\nimport logo from \"@/assets/88away-logo-white.png\";\nimport logoIcon from \"@/assets/88away-icon.png\";\nimport { NotificationBell } from \"./notification-bell\";\nimport { SearchBar } from \"./search-bar\";\n\ninterface SidebarProps {\n  collapsed: boolean;\n  onToggleCollapse: () => void;\n  currentPath: string;\n}\n\ninterface ToolItem {\n  name: string;\n  href: string;\n  icon: React.ComponentType<any>;\n  current: boolean;\n  disabled?: boolean;\n  onClick?: boolean;\n}\n\nexport default function Sidebar({ collapsed, onToggleCollapse, currentPath }: SidebarProps) {\n  const { user } = useAuth();\n  const [location] = useLocation();\n\n  const navigation = [\n    {\n      name: \"Dashboard\",\n      href: \"/\",\n      icon: LayoutDashboard,\n      current: location === \"/\"\n    },\n    {\n      name: \"Prompt Library\",\n      href: \"/prompts\",\n      icon: Lightbulb,\n      current: location === \"/prompts\"\n    },\n    {\n      name: \"Emails\",\n      href: \"/emails\",\n      icon: Mail,\n      current: location === \"/emails\"\n    }\n  ];\n\n  // Extract project ID from current path if we're in a project\n  const projectMatch = currentPath.match(/^\\/projects\\/([^\\/]+)/);\n  const currentProjectId = projectMatch ? projectMatch[1] : null;\n\n  const tools: ToolItem[] = currentProjectId ? [\n    {\n      name: \"Characters\",\n      href: `/projects/${currentProjectId}/characters`,\n      icon: Users,\n      current: location.startsWith(`/projects/${currentProjectId}/characters`)\n    },\n    {\n      name: \"World Building\",\n      href: `/projects/${currentProjectId}/worldbuilding`,\n      icon: Globe,\n      current: location.startsWith(`/projects/${currentProjectId}/worldbuilding`)\n    },\n    {\n      name: \"Timeline\",\n      href: `/projects/${currentProjectId}/timeline`,\n      icon: Clock,\n      current: location.startsWith(`/projects/${currentProjectId}/timeline`)\n    },\n    {\n      name: \"AI Assistant\",\n      href: \"#\",\n      icon: Bot,\n      current: false,\n      onClick: true // This will be handled differently\n    }\n  ] : [\n    {\n      name: \"Characters\",\n      href: \"/characters\",\n      icon: Users,\n      current: location.startsWith(\"/characters\"),\n      disabled: true\n    },\n    {\n      name: \"World Building\",\n      href: \"/worldbuilding\",\n      icon: Globe,\n      current: location.startsWith(\"/worldbuilding\"),\n      disabled: true\n    },\n    {\n      name: \"Timeline\",\n      href: \"/timeline\",\n      icon: Clock,\n      current: location.startsWith(\"/timeline\"),\n      disabled: true\n    },\n    {\n      name: \"AI Assistant\",\n      href: \"/ai\",\n      icon: Bot,\n      current: location.startsWith(\"/ai\"),\n      disabled: true\n    }\n  ];\n\n  const getUserInitials = () => {\n    if (!user) return \"?\";\n    const firstName = user.firstName || \"\";\n    const lastName = user.lastName || \"\";\n    return (firstName[0] || \"\") + (lastName[0] || \"\");\n  };\n\n  const getUserName = () => {\n    if (!user) return \"Guest\";\n    return `${user.firstName || \"\"} ${user.lastName || \"\"}`.trim() || user.email || \"User\";\n  };\n\n  return (\n    <aside \n      className={cn(\n        \"bg-primary text-primary-foreground flex flex-col transition-all duration-300 ease-in-out border-r border-secondary/20\",\n        collapsed ? \"w-16\" : \"w-64\"\n      )}\n      data-testid=\"sidebar\"\n    >\n      {/* Sidebar Header */}\n      <div className=\"p-4 border-b border-secondary/20\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            {collapsed ? (\n              <img \n                src={logoIcon} \n                alt=\"88Away\" \n                className=\"h-8 w-auto brightness-0 invert opacity-90\"\n              />\n            ) : (\n              <img \n                src={logo} \n                alt=\"88Away Logo\" \n                className=\"h-8 w-auto brightness-0 invert opacity-90\"\n              />\n            )}\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={onToggleCollapse}\n            className=\"p-1 h-8 w-8 hover:bg-secondary/20 text-primary-foreground\"\n            data-testid=\"button-toggle-sidebar\"\n          >\n            <Menu className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n\n      {/* Search Bar */}\n      {!collapsed && (\n        <div className=\"p-4 border-b border-secondary/20\">\n          <SearchBar />\n        </div>\n      )}\n\n      {/* User Profile */}\n      <div className=\"p-4 border-b border-secondary/20\">\n        <div className=\"flex items-center space-x-3\">\n          <Avatar className=\"h-10 w-10\" data-testid=\"avatar-user\">\n            <AvatarImage src={user?.profileImageUrl || undefined} />\n            <AvatarFallback className=\"bg-accent text-accent-foreground\">\n              {getUserInitials()}\n            </AvatarFallback>\n          </Avatar>\n          {!collapsed && (\n            <div className=\"flex-1 min-w-0\">\n              <p className=\"text-sm font-medium truncate\" data-testid=\"text-user-name\">\n                {getUserName()}\n              </p>\n              <div className=\"flex items-center space-x-2\">\n                <Badge \n                  variant=\"secondary\" \n                  className=\"text-xs bg-chart-1/20 text-chart-1 border-chart-1/30\"\n                  data-testid=\"badge-user-plan\"\n                >\n                  Pro Plan\n                </Badge>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Navigation Menu */}\n      <nav className=\"flex-1 p-4 space-y-2 overflow-y-auto\">\n        <div className=\"space-y-1\">\n          {navigation.map((item) => (\n            <Link key={item.name} href={item.href}>\n              <div\n                className={cn(\n                  \"flex items-center px-3 py-2 rounded-lg transition-colors group\",\n                  item.current\n                    ? \"bg-accent/20 text-accent-foreground\"\n                    : \"hover:bg-secondary/20\"\n                )}\n                data-testid={`nav-${item.name.toLowerCase().replace(/\\s+/g, '-')}`}\n              >\n                <item.icon className=\"h-4 w-4 flex-shrink-0\" />\n                {!collapsed && (\n                  <span className=\"ml-3 text-sm font-medium\">{item.name}</span>\n                )}\n              </div>\n            </Link>\n          ))}\n\n          {!collapsed && (\n            <div className=\"pt-4\">\n              <h3 className=\"text-xs font-semibold text-primary-foreground/70 uppercase tracking-wider mb-2 px-3\">\n                Projects\n              </h3>\n              <div className=\"space-y-1\">\n                <div className=\"flex items-center px-3 py-2 hover:bg-secondary/20 rounded-lg transition-colors\">\n                  <BookOpen className=\"h-4 w-4\" />\n                  <span className=\"ml-3 text-sm\">No projects yet</span>\n                </div>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"w-full justify-start px-3 py-2 h-auto font-normal hover:bg-secondary/20\"\n                  data-testid=\"button-sidebar-new-project\"\n                >\n                  <Plus className=\"h-4 w-4\" />\n                  <span className=\"ml-3 text-sm\">New Project</span>\n                </Button>\n              </div>\n            </div>\n          )}\n\n          {!collapsed && (\n            <div className=\"pt-4\">\n              <h3 className=\"text-xs font-semibold text-primary-foreground/70 uppercase tracking-wider mb-2 px-3\">\n                Tools\n              </h3>\n              <div className=\"space-y-1\">\n                {tools.map((item) => {\n                  if (item.disabled) {\n                    return (\n                      <div\n                        key={item.name}\n                        className=\"flex items-center px-3 py-2 rounded-lg opacity-50 cursor-not-allowed\"\n                        data-testid={`nav-${item.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                      >\n                        <item.icon className=\"h-4 w-4\" />\n                        <span className=\"ml-3 text-sm\">{item.name}</span>\n                      </div>\n                    );\n                  }\n                  \n                  return (\n                    <Link key={item.name} href={item.href}>\n                      <div\n                        className={cn(\n                          \"flex items-center px-3 py-2 rounded-lg transition-colors\",\n                          item.current\n                            ? \"bg-accent/20 text-accent-foreground\"\n                            : \"hover:bg-secondary/20\"\n                        )}\n                        data-testid={`nav-${item.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                      >\n                        <item.icon className=\"h-4 w-4\" />\n                        <span className=\"ml-3 text-sm\">{item.name}</span>\n                      </div>\n                    </Link>\n                  );\n                })}\n              </div>\n            </div>\n          )}\n        </div>\n      </nav>\n\n      {/* Sidebar Footer */}\n      <div className=\"p-4 border-t border-secondary/20 space-y-2\">\n        <NotificationBell collapsed={collapsed} />\n        <Link href=\"/settings\">\n          <div className=\"flex items-center px-3 py-2 hover:bg-secondary/20 rounded-lg transition-colors\">\n            <Settings className=\"h-4 w-4\" />\n            {!collapsed && <span className=\"ml-3 text-sm\">Settings</span>}\n          </div>\n        </Link>\n        <Link href=\"/subscription\">\n          <div className=\"flex items-center px-3 py-2 hover:bg-secondary/20 rounded-lg transition-colors\">\n            <CreditCard className=\"h-4 w-4\" />\n            {!collapsed && <span className=\"ml-3 text-sm\">Billing</span>}\n          </div>\n        </Link>\n        <a href=\"/api/logout\">\n          <div \n            className=\"flex items-center px-3 py-2 hover:bg-secondary/20 rounded-lg transition-colors\"\n            data-testid=\"button-sign-out\"\n          >\n            <LogOut className=\"h-4 w-4\" />\n            {!collapsed && <span className=\"ml-3 text-sm\">Sign Out</span>}\n          </div>\n        </a>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":10592},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":302},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/store.ts":{"content":"import { create } from 'zustand';\n\ninterface AppState {\n  currentProject: string | null;\n  sidebarCollapsed: boolean;\n  aiSessionCount: number;\n  currentBranch: string | null;\n  currentDocumentId: string | null;\n  setSidebarCollapsed: (collapsed: boolean) => void;\n  setCurrentProject: (projectId: string | null) => void;\n  incrementAiSession: () => void;\n  setCurrentBranch: (branchId: string | null) => void;\n  setCurrentDocumentId: (documentId: string | null) => void;\n}\n\nexport const useStore = create<AppState>((set) => ({\n  currentProject: null,\n  sidebarCollapsed: false,\n  aiSessionCount: 0,\n  currentBranch: null,\n  currentDocumentId: null,\n  setSidebarCollapsed: (collapsed) => set({ sidebarCollapsed: collapsed }),\n  setCurrentProject: (projectId) => set({ currentProject: projectId }),\n  incrementAiSession: () => set((state) => ({ aiSessionCount: state.aiSessionCount + 1 })),\n  setCurrentBranch: (branchId) => set({ currentBranch: branchId }),\n  setCurrentDocumentId: (documentId) => set({ currentDocumentId: documentId }),\n}));\n","size_bytes":1043},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/characters.tsx":{"content":"import { useEffect, useState, useMemo } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { cn } from \"@/lib/utils\";\nimport Sidebar from \"@/components/sidebar\";\nimport { \n  Users, \n  Plus, \n  Edit, \n  Trash2, \n  Search,\n  User,\n  Heart,\n  Star,\n  Grid,\n  List,\n  Eye,\n  Brain,\n  X\n} from \"lucide-react\";\nimport { Project, Character, type OnboardingProgress } from \"@shared/schema\";\n\nfunction getRoleBadgeColor(role: string) {\n  const colors = {\n    protagonist: 'border-blue-500 text-blue-500',\n    antagonist: 'border-red-500 text-red-500',\n    supporting: 'border-green-500 text-green-500',\n    minor: 'border-gray-500 text-gray-500',\n    other: 'border-purple-500 text-purple-500',\n  };\n  return colors[role as keyof typeof colors] || '';\n}\n\nexport default function Characters() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n  const [showCharacterModal, setShowCharacterModal] = useState(false);\n  const [editingCharacter, setEditingCharacter] = useState<Character | null>(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [sortBy, setSortBy] = useState<'name-asc' | 'name-desc' | 'newest' | 'oldest' | 'updated'>('name-asc');\n  const [roleFilter, setRoleFilter] = useState<string>('all');\n  const [viewMode, setViewMode] = useState<'grid' | 'list'>(() => {\n    if (typeof window !== 'undefined') {\n      return (localStorage.getItem('characterViewMode') as 'grid' | 'list') || 'grid';\n    }\n    return 'grid';\n  });\n  const [tagInput, setTagInput] = useState(\"\");\n  \n  const [formData, setFormData] = useState<{\n    name: string;\n    description: string;\n    background: string;\n    personality: string;\n    appearance: string;\n    notes: string;\n    role: Character[\"role\"];\n    importance: number;\n    tags: string[];\n  }>({\n    name: \"\",\n    description: \"\",\n    background: \"\",\n    personality: \"\",\n    appearance: \"\",\n    notes: \"\",\n    role: null,\n    importance: 3,\n    tags: []\n  });\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: projects = [] } = useQuery<Project[]>({\n    queryKey: ['/api/projects'],\n    enabled: isAuthenticated,\n    retry: false,\n  });\n\n  const { data: characters = [], isLoading: charactersLoading } = useQuery<Character[]>({\n    queryKey: ['/api/characters'],\n    enabled: isAuthenticated && projects.length > 0,\n    queryFn: async () => {\n      if (projects.length > 0) {\n        const response = await fetch(`/api/projects/${projects[0].id}/characters`, {\n          credentials: \"include\",\n        });\n        if (!response.ok) throw new Error(`${response.status}: ${response.statusText}`);\n        return response.json();\n      }\n      return [];\n    },\n    retry: false,\n  });\n\n  const { data: onboardingProgress } = useQuery<OnboardingProgress>({\n    queryKey: ['/api/user/onboarding'],\n    enabled: isAuthenticated,\n    retry: false,\n  });\n\n  const updateOnboardingMutation = useMutation({\n    mutationFn: async (progress: Partial<OnboardingProgress>) => {\n      await apiRequest(\"PATCH\", \"/api/user/onboarding\", progress);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/user/onboarding'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/user'] });\n    },\n  });\n\n  const createCharacterMutation = useMutation({\n    mutationFn: async (characterData: any) => {\n      if (projects.length === 0) throw new Error(\"No project available\");\n      await apiRequest(\"POST\", `/api/projects/${projects[0].id}/characters`, characterData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/characters'] });\n      setShowCharacterModal(false);\n      setFormData({\n        name: \"\",\n        description: \"\",\n        background: \"\",\n        personality: \"\",\n        appearance: \"\",\n        notes: \"\",\n        role: null,\n        importance: 3,\n        tags: []\n      });\n      toast({\n        title: \"Success\",\n        description: \"Character created successfully!\",\n      });\n      \n      if (user && !user.hasCompletedOnboarding && onboardingProgress && !onboardingProgress.steps.addCharacter) {\n        updateOnboardingMutation.mutate({\n          steps: { ...onboardingProgress.steps, addCharacter: true }\n        });\n      }\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to create character. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateCharacterMutation = useMutation({\n    mutationFn: async (data: { id: string; updates: any }) => {\n      await apiRequest(\"PUT\", `/api/characters/${data.id}`, data.updates);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/characters'] });\n      setShowCharacterModal(false);\n      setEditingCharacter(null);\n      toast({\n        title: \"Success\",\n        description: \"Character updated successfully!\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update character. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteCharacterMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/characters/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/characters'] });\n      toast({\n        title: \"Success\",\n        description: \"Character deleted successfully!\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete character. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredAndSortedCharacters = useMemo(() => {\n    let result = characters.filter((char: Character) => \n      char.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      char.description?.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n    \n    if (roleFilter !== 'all') {\n      result = result.filter((char: Character) => char.role === roleFilter);\n    }\n    \n    result.sort((a: Character, b: Character) => {\n      switch(sortBy) {\n        case 'name-asc': return a.name.localeCompare(b.name);\n        case 'name-desc': return b.name.localeCompare(a.name);\n        case 'newest': return new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime();\n        case 'oldest': return new Date(a.createdAt || 0).getTime() - new Date(b.createdAt || 0).getTime();\n        case 'updated': return new Date(b.updatedAt || 0).getTime() - new Date(a.updatedAt || 0).getTime();\n        default: return 0;\n      }\n    });\n    \n    return result;\n  }, [characters, searchTerm, roleFilter, sortBy]);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const dataToSubmit = {\n      ...formData,\n      role: formData.role ?? null,\n      tags: formData.tags.length > 0 ? formData.tags : null\n    };\n    \n    if (editingCharacter) {\n      updateCharacterMutation.mutate({\n        id: editingCharacter.id,\n        updates: dataToSubmit\n      });\n    } else {\n      createCharacterMutation.mutate(dataToSubmit);\n    }\n  };\n\n  const handleEdit = (character: Character) => {\n    setEditingCharacter(character);\n    setFormData({\n      name: character.name,\n      description: character.description ?? \"\",\n      background: character.background ?? \"\",\n      personality: character.personality ?? \"\",\n      appearance: character.appearance ?? \"\",\n      notes: character.notes ?? \"\",\n      role: character.role ?? null,\n      importance: character.importance ?? 3,\n      tags: character.tags ?? []\n    });\n    setShowCharacterModal(true);\n  };\n\n  const handleDelete = (character: Character) => {\n    if (confirm(`Are you sure you want to delete ${character.name}?`)) {\n      deleteCharacterMutation.mutate(character.id);\n    }\n  };\n\n  const handleCloseModal = () => {\n    setShowCharacterModal(false);\n    setEditingCharacter(null);\n    setTagInput(\"\");\n    setFormData({\n      name: \"\",\n      description: \"\",\n      background: \"\",\n      personality: \"\",\n      appearance: \"\",\n      notes: \"\",\n      role: null,\n      importance: 3,\n      tags: []\n    });\n  };\n\n  const handleAddTag = () => {\n    if (tagInput.trim() && !formData.tags.includes(tagInput.trim())) {\n      setFormData({ ...formData, tags: [...formData.tags, tagInput.trim()] });\n      setTagInput(\"\");\n    }\n  };\n\n  const handleRemoveTag = (tagToRemove: string) => {\n    setFormData({ ...formData, tags: formData.tags.filter(tag => tag !== tagToRemove) });\n  };\n\n  if (!isAuthenticated || isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <Sidebar \n        collapsed={sidebarCollapsed} \n        onToggleCollapse={() => setSidebarCollapsed(!sidebarCollapsed)}\n        currentPath=\"/characters\"\n      />\n      \n      <main className=\"flex-1 flex flex-col overflow-hidden\">\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"flex items-center space-x-4\">\n              <h1 className=\"text-2xl font-semibold text-card-foreground\" data-testid=\"text-characters-title\">\n                Characters\n              </h1>\n              <Badge variant=\"secondary\" data-testid=\"badge-character-count\">\n                {filteredAndSortedCharacters.length} characters\n              </Badge>\n            </div>\n            \n            <Button \n              onClick={() => setShowCharacterModal(true)}\n              data-testid=\"button-add-character\"\n            >\n              <Plus className=\"mr-2 h-4 w-4\" />\n              Add Character\n            </Button>\n          </div>\n\n          <div className=\"flex items-center gap-3 flex-wrap\">\n            <div className=\"relative flex-1 min-w-[200px]\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search characters...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"input-search-characters\"\n              />\n            </div>\n            \n            <Select value={roleFilter} onValueChange={setRoleFilter}>\n              <SelectTrigger className=\"w-[180px]\" data-testid=\"select-role-filter\">\n                <SelectValue placeholder=\"All Roles\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Roles</SelectItem>\n                <SelectItem value=\"protagonist\">Protagonist</SelectItem>\n                <SelectItem value=\"antagonist\">Antagonist</SelectItem>\n                <SelectItem value=\"supporting\">Supporting</SelectItem>\n                <SelectItem value=\"minor\">Minor</SelectItem>\n                <SelectItem value=\"other\">Other</SelectItem>\n              </SelectContent>\n            </Select>\n            \n            <Select value={sortBy} onValueChange={(value: any) => setSortBy(value)}>\n              <SelectTrigger className=\"w-[180px]\" data-testid=\"select-sort-by\">\n                <SelectValue placeholder=\"Sort by\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"name-asc\">Name (A-Z)</SelectItem>\n                <SelectItem value=\"name-desc\">Name (Z-A)</SelectItem>\n                <SelectItem value=\"newest\">Newest First</SelectItem>\n                <SelectItem value=\"oldest\">Oldest First</SelectItem>\n                <SelectItem value=\"updated\">Recently Updated</SelectItem>\n              </SelectContent>\n            </Select>\n            \n            <Button \n              variant=\"outline\" \n              size=\"icon\" \n              onClick={() => {\n                const newMode = viewMode === 'grid' ? 'list' : 'grid';\n                setViewMode(newMode);\n                if (typeof window !== 'undefined') {\n                  localStorage.setItem('characterViewMode', newMode);\n                }\n              }}\n              data-testid=\"button-view-toggle\"\n            >\n              {viewMode === 'grid' ? <List className=\"h-4 w-4\" /> : <Grid className=\"h-4 w-4\" />}\n            </Button>\n          </div>\n        </header>\n\n        <div className=\"flex-1 overflow-auto p-6\">\n          {charactersLoading ? (\n            <div className={viewMode === 'grid' ? \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\" : \"space-y-4\"}>\n              {[1, 2, 3, 4, 5, 6].map(i => (\n                <Card key={i} className=\"animate-pulse\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\n                    <div className=\"h-3 bg-muted rounded w-1/2 mb-4\"></div>\n                    <div className=\"space-y-2\">\n                      <div className=\"h-3 bg-muted rounded\"></div>\n                      <div className=\"h-3 bg-muted rounded w-5/6\"></div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : filteredAndSortedCharacters.length === 0 ? (\n            <div className=\"text-center py-16\" data-testid=\"empty-characters-state\">\n              <Users className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-card-foreground mb-2\">\n                {searchTerm || roleFilter !== 'all' ? \"No characters found\" : \"No characters yet\"}\n              </h3>\n              <p className=\"text-muted-foreground mb-4\">\n                {searchTerm || roleFilter !== 'all'\n                  ? \"Try adjusting your filters or search terms.\"\n                  : \"Create your first character to bring your story to life.\"\n                }\n              </p>\n              {!searchTerm && roleFilter === 'all' && (\n                <Button \n                  onClick={() => setShowCharacterModal(true)}\n                  data-testid=\"button-create-first-character\"\n                >\n                  <Plus className=\"mr-2 h-4 w-4\" />\n                  Create Your First Character\n                </Button>\n              )}\n            </div>\n          ) : (\n            <div className={viewMode === 'grid' ? \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\" : \"space-y-4\"}>\n              {filteredAndSortedCharacters.map((character: Character) => (\n                <Card \n                  key={character.id} \n                  className={cn(\n                    \"hover:border-primary transition-all\",\n                    viewMode === 'list' && \"flex\"\n                  )} \n                  data-testid={`card-character-${character.id}`}\n                >\n                  <CardHeader className={cn(\"pb-3\", viewMode === 'list' && \"flex-1\")}>\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-center gap-3 flex-1\">\n                        <div className=\"w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center flex-shrink-0\">\n                          <User className=\"h-6 w-6 text-primary\" />\n                        </div>\n                        \n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-center gap-2 flex-wrap\">\n                            <CardTitle className=\"text-lg\" data-testid={`text-character-name-${character.id}`}>\n                              {character.name}\n                            </CardTitle>\n                            {character.role && (\n                              <Badge variant=\"outline\" className={getRoleBadgeColor(character.role)}>\n                                {character.role}\n                              </Badge>\n                            )}\n                          </div>\n                          <CardDescription className=\"flex items-center gap-2 mt-1\">\n                            <div className=\"flex gap-0.5\">\n                              {Array.from({length: 5}).map((_, i) => (\n                                <Star \n                                  key={i} \n                                  className={cn(\n                                    \"w-3 h-3\",\n                                    i < (character.importance ?? 3) ? \"fill-yellow-500 text-yellow-500\" : \"text-muted\"\n                                  )} \n                                />\n                              ))}\n                            </div>\n                            {character.relationships && typeof character.relationships === 'object' && character.relationships !== null && Object.keys(character.relationships as Record<string, unknown>).length > 0 ? (\n                              <span className=\"text-xs flex items-center gap-1\">\n                                <Heart className=\"w-3 h-3\" />\n                                {Object.keys(character.relationships as Record<string, unknown>).length}\n                              </span>\n                            ) : null}\n                          </CardDescription>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-1 flex-shrink-0\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleEdit(character)}\n                          data-testid={`button-edit-character-${character.id}`}\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleDelete(character)}\n                          data-testid={`button-delete-character-${character.id}`}\n                        >\n                          <Trash2 className=\"h-4 w-4 text-destructive\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  \n                  <CardContent className={cn(\"space-y-3\", viewMode === 'list' && \"flex-1\")}>\n                    {character.description && (\n                      <p className=\"text-sm text-muted-foreground line-clamp-2\">\n                        {character.description}\n                      </p>\n                    )}\n                    \n                    {character.tags && character.tags.length > 0 && (\n                      <div className=\"flex flex-wrap gap-1\">\n                        {character.tags.map(tag => (\n                          <Badge key={tag} variant=\"secondary\" className=\"text-xs\">\n                            {tag}\n                          </Badge>\n                        ))}\n                      </div>\n                    )}\n                    \n                    <div className=\"space-y-1 text-xs\">\n                      {character.personality && (\n                        <div className=\"flex items-center gap-2 text-muted-foreground\">\n                          <Brain className=\"w-3 h-3 flex-shrink-0\" />\n                          <span className=\"line-clamp-1\">{character.personality}</span>\n                        </div>\n                      )}\n                      {character.appearance && (\n                        <div className=\"flex items-center gap-2 text-muted-foreground\">\n                          <Eye className=\"w-3 h-3 flex-shrink-0\" />\n                          <span className=\"line-clamp-1\">{character.appearance}</span>\n                        </div>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </div>\n      </main>\n\n      <Dialog open={showCharacterModal} onOpenChange={handleCloseModal}>\n        <DialogContent className=\"sm:max-w-lg max-h-[90vh] overflow-y-auto\" data-testid=\"modal-character\">\n          <DialogHeader>\n            <DialogTitle>\n              {editingCharacter ? \"Edit Character\" : \"Create New Character\"}\n            </DialogTitle>\n            <DialogDescription>\n              {editingCharacter ? \"Update your character's details.\" : \"Add a new character to your story.\"}\n            </DialogDescription>\n          </DialogHeader>\n          \n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"name\">Character Name *</Label>\n              <Input\n                id=\"name\"\n                value={formData.name}\n                onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                placeholder=\"Enter character name\"\n                required\n                data-testid=\"input-character-name\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"description\">Brief Description</Label>\n              <Input\n                id=\"description\"\n                value={formData.description}\n                onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                placeholder=\"Quick character description\"\n                data-testid=\"input-character-description\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"role\">Role</Label>\n              <Select value={formData.role ?? undefined} onValueChange={(value) => setFormData({ ...formData, role: value as Character[\"role\"] })}>\n                <SelectTrigger data-testid=\"select-character-role\">\n                  <SelectValue placeholder=\"Select a role\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"protagonist\">Protagonist</SelectItem>\n                  <SelectItem value=\"antagonist\">Antagonist</SelectItem>\n                  <SelectItem value=\"supporting\">Supporting</SelectItem>\n                  <SelectItem value=\"minor\">Minor</SelectItem>\n                  <SelectItem value=\"other\">Other</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"importance\">Importance: {formData.importance}/5</Label>\n              <Slider\n                id=\"importance\"\n                min={1}\n                max={5}\n                step={1}\n                value={[formData.importance]}\n                onValueChange={(value) => setFormData({ ...formData, importance: value[0] })}\n                data-testid=\"slider-character-importance\"\n              />\n              <div className=\"flex justify-between text-xs text-muted-foreground\">\n                <span>Minor</span>\n                <span>Critical</span>\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"tags\">Tags</Label>\n              <div className=\"flex gap-2\">\n                <Input\n                  id=\"tags\"\n                  value={tagInput}\n                  onChange={(e) => setTagInput(e.target.value)}\n                  placeholder=\"Add a tag\"\n                  onKeyDown={(e) => {\n                    if (e.key === 'Enter') {\n                      e.preventDefault();\n                      handleAddTag();\n                    }\n                  }}\n                  data-testid=\"input-character-tags\"\n                />\n                <Button type=\"button\" variant=\"outline\" onClick={handleAddTag} data-testid=\"button-add-tag\">\n                  Add\n                </Button>\n              </div>\n              {formData.tags.length > 0 && (\n                <div className=\"flex flex-wrap gap-2 mt-2\">\n                  {formData.tags.map(tag => (\n                    <Badge key={tag} variant=\"secondary\" className=\"text-xs flex items-center gap-1\">\n                      {tag}\n                      <X \n                        className=\"w-3 h-3 cursor-pointer\" \n                        onClick={() => handleRemoveTag(tag)}\n                      />\n                    </Badge>\n                  ))}\n                </div>\n              )}\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"personality\">Personality</Label>\n              <Textarea\n                id=\"personality\"\n                value={formData.personality}\n                onChange={(e) => setFormData({ ...formData, personality: e.target.value })}\n                placeholder=\"Describe their personality traits, quirks, and behavior...\"\n                className=\"resize-none h-20\"\n                data-testid=\"input-character-personality\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"appearance\">Appearance</Label>\n              <Textarea\n                id=\"appearance\"\n                value={formData.appearance}\n                onChange={(e) => setFormData({ ...formData, appearance: e.target.value })}\n                placeholder=\"Physical description, clothing style, distinctive features...\"\n                className=\"resize-none h-20\"\n                data-testid=\"input-character-appearance\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"background\">Background</Label>\n              <Textarea\n                id=\"background\"\n                value={formData.background}\n                onChange={(e) => setFormData({ ...formData, background: e.target.value })}\n                placeholder=\"Character history, origin story, important events...\"\n                className=\"resize-none h-20\"\n                data-testid=\"input-character-background\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"notes\">Additional Notes</Label>\n              <Textarea\n                id=\"notes\"\n                value={formData.notes}\n                onChange={(e) => setFormData({ ...formData, notes: e.target.value })}\n                placeholder=\"Any other important details, relationships, or notes...\"\n                className=\"resize-none h-20\"\n                data-testid=\"input-character-notes\"\n              />\n            </div>\n            \n            <div className=\"flex items-center justify-end space-x-3 pt-4 border-t border-border\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={handleCloseModal}\n                disabled={createCharacterMutation.isPending || updateCharacterMutation.isPending}\n                data-testid=\"button-cancel-character\"\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={createCharacterMutation.isPending || updateCharacterMutation.isPending || !formData.name.trim()}\n                data-testid=\"button-save-character\"\n              >\n                {createCharacterMutation.isPending || updateCharacterMutation.isPending\n                  ? \"Saving...\" \n                  : editingCharacter ? \"Update Character\" : \"Create Character\"\n                }\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":29754},"client/src/pages/dashboard.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Sidebar from \"@/components/sidebar\";\nimport ProjectModal from \"@/components/project-modal\";\nimport AiAssistantModal from \"@/components/ai-assistant-modal\";\nimport OnboardingWelcome from \"@/components/onboarding-welcome\";\nimport GettingStartedChecklist from \"@/components/getting-started-checklist\";\nimport { ActivityFeed } from \"@/components/activity-feed\";\nimport { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { useAiModalStore } from \"@/stores/ai-modal-store\";\nimport { \n  BookOpen, \n  Users, \n  FileText, \n  Zap, \n  Plus,\n  TrendingUp,\n  Clock,\n  Activity,\n  Crown,\n  Edit3,\n  Lightbulb,\n  Bot,\n  Download\n} from \"lucide-react\";\nimport { Project, AiGeneration, type OnboardingProgress } from \"@shared/schema\";\n\ninterface DashboardStats {\n  totalWords: number;\n  activeProjects: number;\n  aiSessions: number;\n  collaborators: number;\n}\n\nexport default function Dashboard() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [showProjectModal, setShowProjectModal] = useState(false);\n  const { isOpen: showAiModal, close: closeAiModal, openWithPrompt } = useAiModalStore();\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n  const [showWelcomeModal, setShowWelcomeModal] = useState(false);\n  const [showChecklist, setShowChecklist] = useState(false);\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: projects = [], isLoading: projectsLoading } = useQuery<Project[]>({\n    queryKey: ['/api/projects'],\n    enabled: isAuthenticated,\n    retry: false,\n  });\n\n  const { data: aiGenerations = [] } = useQuery<AiGeneration[]>({\n    queryKey: ['/api/ai/history'],\n    enabled: isAuthenticated,\n    retry: false,\n  });\n\n  const { data: onboardingProgress } = useQuery<OnboardingProgress>({\n    queryKey: ['/api/user/onboarding'],\n    enabled: isAuthenticated,\n    retry: false,\n  });\n\n  const updateOnboardingMutation = useMutation({\n    mutationFn: async (progress: Partial<OnboardingProgress>) => {\n      await apiRequest(\"PATCH\", \"/api/user/onboarding\", progress);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/user/onboarding'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/user'] });\n    },\n  });\n\n  useEffect(() => {\n    if (isAuthenticated && onboardingProgress && !onboardingProgress.welcomeShown) {\n      setShowWelcomeModal(true);\n    }\n  }, [isAuthenticated, onboardingProgress]);\n\n  useEffect(() => {\n    if (isAuthenticated && onboardingProgress && !onboardingProgress.tourCompleted) {\n      const hasIncompleteSteps = Object.values(onboardingProgress.steps || {}).some(completed => !completed);\n      setShowChecklist(hasIncompleteSteps);\n    } else {\n      setShowChecklist(false);\n    }\n  }, [isAuthenticated, onboardingProgress]);\n\n  useEffect(() => {\n    if (projects.length > 0 && onboardingProgress && !onboardingProgress.steps.createProject) {\n      updateOnboardingMutation.mutate({\n        steps: { ...onboardingProgress.steps, createProject: true }\n      });\n    }\n  }, [projects.length, onboardingProgress]);\n\n  useEffect(() => {\n    if (aiGenerations.length > 0 && onboardingProgress && !onboardingProgress.steps.useAI) {\n      updateOnboardingMutation.mutate({\n        steps: { ...onboardingProgress.steps, useAI: true }\n      });\n    }\n  }, [aiGenerations.length, onboardingProgress]);\n\n  useEffect(() => {\n    if (onboardingProgress && !onboardingProgress.tourCompleted) {\n      const allStepsComplete = Object.values(onboardingProgress.steps || {}).every(completed => completed);\n      if (allStepsComplete) {\n        updateOnboardingMutation.mutate({\n          tourCompleted: true,\n          steps: { ...onboardingProgress.steps }\n        });\n      }\n    }\n  }, [onboardingProgress]);\n\n  // Calculate dashboard stats\n  const stats: DashboardStats = {\n    totalWords: projects.reduce((total: number, project: Project) => total + (project.currentWordCount || 0), 0),\n    activeProjects: projects.length,\n    aiSessions: aiGenerations.length,\n    collaborators: 8 // This would come from actual collaborator data\n  };\n\n  const createProjectMutation = useMutation({\n    mutationFn: async (projectData: any) => {\n      await apiRequest(\"POST\", \"/api/projects\", projectData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/projects'] });\n      setShowProjectModal(false);\n      toast({\n        title: \"Success\",\n        description: \"Project created successfully!\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to create project. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleWelcomeComplete = () => {\n    updateOnboardingMutation.mutate({ welcomeShown: true });\n    setShowWelcomeModal(false);\n  };\n\n  const handleWelcomeSkip = () => {\n    updateOnboardingMutation.mutate({ welcomeShown: true });\n    setShowWelcomeModal(false);\n  };\n\n  const handleRestartTour = () => {\n    setShowWelcomeModal(true);\n  };\n\n  const handleDismissChecklist = () => {\n    setShowChecklist(false);\n  };\n\n  if (!isAuthenticated || isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <Sidebar \n        collapsed={sidebarCollapsed} \n        onToggleCollapse={() => setSidebarCollapsed(!sidebarCollapsed)}\n        currentPath=\"/\"\n      />\n      \n      <main className=\"flex-1 flex flex-col overflow-hidden\">\n        {/* Top Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <h1 className=\"text-2xl font-semibold text-card-foreground\" data-testid=\"text-dashboard-title\">\n                Dashboard\n              </h1>\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"text-sm text-muted-foreground\">Last updated:</span>\n                <span className=\"text-sm font-medium\" data-testid=\"text-last-updated\">\n                  {new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n                </span>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              {/* AI Status Indicator */}\n              <div className=\"flex items-center space-x-2 bg-chart-1/10 px-3 py-1 rounded-full\">\n                <div className=\"w-2 h-2 bg-chart-1 rounded-full animate-pulse\"></div>\n                <span className=\"text-sm text-chart-1 font-medium\">AI Ready</span>\n              </div>\n              \n              {/* Export Button */}\n              <Button variant=\"outline\" size=\"sm\" data-testid=\"button-export\">\n                <Download className=\"mr-2 h-4 w-4\" />\n                Export\n              </Button>\n            </div>\n          </div>\n        </header>\n\n        {/* Dashboard Content */}\n        <div className=\"flex-1 overflow-auto p-6\">\n          {/* Quick Stats Row */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            <Card data-testid=\"card-total-words\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Total Words</p>\n                    <p className=\"text-2xl font-bold text-card-foreground\" data-testid=\"text-total-words\">\n                      {stats.totalWords.toLocaleString()}\n                    </p>\n                  </div>\n                  <div className=\"p-3 bg-chart-1/10 rounded-full\">\n                    <FileText className=\"h-5 w-5 text-chart-1\" />\n                  </div>\n                </div>\n                <p className=\"text-sm text-chart-1 mt-2\">\n                  <TrendingUp className=\"inline h-3 w-3 mr-1\" />\n                  +12% from last week\n                </p>\n              </CardContent>\n            </Card>\n            \n            <Card data-testid=\"card-active-projects\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Active Projects</p>\n                    <p className=\"text-2xl font-bold text-card-foreground\" data-testid=\"text-active-projects\">\n                      {stats.activeProjects}\n                    </p>\n                  </div>\n                  <div className=\"p-3 bg-accent/10 rounded-full\">\n                    <BookOpen className=\"h-5 w-5 text-accent\" />\n                  </div>\n                </div>\n                <p className=\"text-sm text-accent mt-2\">\n                  {Math.max(0, stats.activeProjects - 1)} in progress\n                </p>\n              </CardContent>\n            </Card>\n            \n            <Card data-testid=\"card-ai-sessions\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">AI Sessions</p>\n                    <p className=\"text-2xl font-bold text-card-foreground\" data-testid=\"text-ai-sessions\">\n                      {stats.aiSessions}\n                    </p>\n                  </div>\n                  <div className=\"p-3 bg-chart-2/10 rounded-full\">\n                    <Bot className=\"h-5 w-5 text-chart-2\" />\n                  </div>\n                </div>\n                <p className=\"text-sm text-chart-2 mt-2\">This month</p>\n              </CardContent>\n            </Card>\n            \n            <Card data-testid=\"card-collaborators\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Collaborators</p>\n                    <p className=\"text-2xl font-bold text-card-foreground\" data-testid=\"text-collaborators\">\n                      {stats.collaborators}\n                    </p>\n                  </div>\n                  <div className=\"p-3 bg-destructive/10 rounded-full\">\n                    <Users className=\"h-5 w-5 text-destructive\" />\n                  </div>\n                </div>\n                <p className=\"text-sm text-destructive mt-2\">Across all projects</p>\n              </CardContent>\n            </Card>\n          </div>\n          \n          {/* Main Content Grid */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            \n            {/* Left Column: Recent Projects & AI Assistant */}\n            <div className=\"lg:col-span-2 space-y-8\">\n              \n              {/* Recent Projects */}\n              <Card data-testid=\"card-recent-projects\">\n                <CardHeader className=\"border-b border-border\">\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"text-lg font-semibold\">Recent Projects</CardTitle>\n                    <Button \n                      variant=\"ghost\" \n                      size=\"sm\"\n                      onClick={() => setShowProjectModal(true)}\n                      data-testid=\"button-new-project\"\n                    >\n                      <Plus className=\"mr-2 h-4 w-4\" />\n                      New Project\n                    </Button>\n                  </div>\n                </CardHeader>\n                \n                <CardContent className=\"p-6\">\n                  {projectsLoading ? (\n                    <div className=\"space-y-4\">\n                      {[1, 2, 3].map(i => (\n                        <div key={i} className=\"animate-pulse\">\n                          <div className=\"h-20 bg-muted/30 rounded-lg\"></div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : projects.length === 0 ? (\n                    <div className=\"text-center py-8\" data-testid=\"text-no-projects\">\n                      <BookOpen className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                      <h3 className=\"text-lg font-medium text-card-foreground mb-2\">No projects yet</h3>\n                      <p className=\"text-muted-foreground mb-4\">Create your first project to get started</p>\n                      <Button onClick={() => setShowProjectModal(true)} data-testid=\"button-create-first-project\">\n                        <Plus className=\"mr-2 h-4 w-4\" />\n                        Create Project\n                      </Button>\n                    </div>\n                  ) : (\n                    <div className=\"space-y-4\">\n                      {projects.map((project: Project) => {\n                        const progress = project.targetWordCount \n                          ? Math.round(((project.currentWordCount || 0) / project.targetWordCount) * 100)\n                          : 0;\n                        \n                        return (\n                          <Link key={project.id} href={`/projects/${project.id}`}>\n                            <div \n                              className=\"flex items-center justify-between p-4 bg-muted/30 rounded-lg hover:bg-muted/50 transition-colors cursor-pointer\"\n                              data-testid={`card-project-${project.id}`}\n                            >\n                              <div className=\"flex items-center space-x-4\">\n                                <div className=\"w-12 h-12 bg-accent/10 rounded-lg flex items-center justify-center\">\n                                  <BookOpen className=\"h-6 w-6 text-accent\" />\n                                </div>\n                                <div>\n                                  <h3 className=\"font-medium text-card-foreground\" data-testid={`text-project-title-${project.id}`}>\n                                    {project.title}\n                                  </h3>\n                                  <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n                                    <span data-testid={`text-word-count-${project.id}`}>\n                                      {(project.currentWordCount || 0).toLocaleString()} words\n                                    </span>\n                                    <span>•</span>\n                                    <span data-testid={`text-last-modified-${project.id}`}>\n                                      {project.updatedAt ? new Date(project.updatedAt).toLocaleDateString() : 'Unknown'}\n                                    </span>\n                                    {project.genre && (\n                                      <>\n                                        <span>•</span>\n                                        <Badge variant=\"secondary\" className=\"text-xs\">\n                                          {project.genre}\n                                        </Badge>\n                                      </>\n                                    )}\n                                  </div>\n                                </div>\n                              </div>\n                              {project.targetWordCount && (\n                                <div className=\"flex items-center space-x-2\">\n                                  <Progress value={progress} className=\"w-16\" />\n                                  <span className=\"text-sm text-muted-foreground\">{progress}%</span>\n                                </div>\n                              )}\n                            </div>\n                          </Link>\n                        );\n                      })}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n              \n              {/* AI Writing Assistant Panel */}\n              <Card data-testid=\"card-ai-assistant\">\n                <CardHeader className=\"border-b border-border\">\n                  <CardTitle className=\"text-lg font-semibold\">AI Writing Assistant</CardTitle>\n                  <CardDescription>Your creative writing companions are ready to help</CardDescription>\n                </CardHeader>\n                \n                <CardContent className=\"p-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    {/* Muse Persona */}\n                    <div className=\"p-4 border border-border rounded-lg hover:border-accent transition-colors cursor-pointer group\">\n                      <div className=\"flex items-center space-x-3 mb-3\">\n                        <div className=\"w-10 h-10 bg-chart-1/10 rounded-lg flex items-center justify-center group-hover:bg-chart-1/20 transition-colors\">\n                          <Lightbulb className=\"h-5 w-5 text-chart-1\" />\n                        </div>\n                        <div>\n                          <h4 className=\"font-medium text-card-foreground\">Muse</h4>\n                          <p className=\"text-xs text-muted-foreground\">Creative inspiration</p>\n                        </div>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Generate evocative scenes with rich sensory details and emotional depth.\n                      </p>\n                      <div className=\"mt-3 pt-3 border-t border-border\">\n                        <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n                          <span>Available</span>\n                          <span className=\"text-chart-1\">●</span>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    {/* Editor Persona */}\n                    <div className=\"p-4 border border-border rounded-lg hover:border-accent transition-colors cursor-pointer group\">\n                      <div className=\"flex items-center space-x-3 mb-3\">\n                        <div className=\"w-10 h-10 bg-accent/10 rounded-lg flex items-center justify-center group-hover:bg-accent/20 transition-colors\">\n                          <Edit3 className=\"h-5 w-5 text-accent\" />\n                        </div>\n                        <div>\n                          <h4 className=\"font-medium text-card-foreground\">Editor</h4>\n                          <p className=\"text-xs text-muted-foreground\">Polish & refine</p>\n                        </div>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Improve clarity, grammar, and flow while preserving your unique voice.\n                      </p>\n                      <div className=\"mt-3 pt-3 border-t border-border\">\n                        <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n                          <span>Available</span>\n                          <span className=\"text-accent\">●</span>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    {/* Coach Persona */}\n                    <div className=\"p-4 border border-border rounded-lg hover:border-accent transition-colors cursor-pointer group\">\n                      <div className=\"flex items-center space-x-3 mb-3\">\n                        <div className=\"w-10 h-10 bg-chart-2/10 rounded-lg flex items-center justify-center group-hover:bg-chart-2/20 transition-colors\">\n                          <FileText className=\"h-5 w-5 text-chart-2\" />\n                        </div>\n                        <div>\n                          <h4 className=\"font-medium text-card-foreground\">Coach</h4>\n                          <p className=\"text-xs text-muted-foreground\">Structure & planning</p>\n                        </div>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Create outlines, story beats, and structural guidance for your narrative.\n                      </p>\n                      <div className=\"mt-3 pt-3 border-t border-border\">\n                        <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n                          <span>Available</span>\n                          <span className=\"text-chart-2\">●</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  {/* Quick Actions */}\n                  <div className=\"mt-6 pt-6 border-t border-border\">\n                    <h4 className=\"font-medium text-card-foreground mb-3\">Quick Actions</h4>\n                    <div className=\"flex flex-wrap gap-2\">\n                      <Button \n                        variant=\"secondary\" \n                        size=\"sm\"\n                        onClick={() => openWithPrompt({ persona: null, prompt: \"\" })}\n                        data-testid=\"button-ai-generate-scene\"\n                      >\n                        <Zap className=\"mr-2 h-3 w-3\" />\n                        Generate Scene\n                      </Button>\n                      <Button \n                        variant=\"secondary\" \n                        size=\"sm\"\n                        onClick={() => openWithPrompt({ persona: null, prompt: \"\" })}\n                        data-testid=\"button-ai-polish-text\"\n                      >\n                        <Edit3 className=\"mr-2 h-3 w-3\" />\n                        Polish Text\n                      </Button>\n                      <Button \n                        variant=\"secondary\" \n                        size=\"sm\"\n                        onClick={() => openWithPrompt({ persona: null, prompt: \"\" })}\n                        data-testid=\"button-ai-create-outline\"\n                      >\n                        <FileText className=\"mr-2 h-3 w-3\" />\n                        Create Outline\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n            \n            {/* Right Column: Story Bible & Activity */}\n            <div className=\"space-y-8\">\n              \n              {/* Story Bible Quick Access */}\n              <Card data-testid=\"card-story-bible\">\n                <CardHeader className=\"border-b border-border\">\n                  <CardTitle className=\"text-lg font-semibold\">Story Bible</CardTitle>\n                  <CardDescription>Quick access to your world elements</CardDescription>\n                </CardHeader>\n                \n                <CardContent className=\"p-6 space-y-4\">\n                  <div className=\"flex items-center justify-between p-3 bg-muted/30 rounded-lg hover:bg-muted/50 transition-colors cursor-pointer\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-8 h-8 bg-chart-1/10 rounded-lg flex items-center justify-center\">\n                        <Users className=\"h-4 w-4 text-chart-1\" />\n                      </div>\n                      <div>\n                        <p className=\"font-medium text-card-foreground\">Characters</p>\n                        <p className=\"text-xs text-muted-foreground\">No profiles yet</p>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between p-3 bg-muted/30 rounded-lg hover:bg-muted/50 transition-colors cursor-pointer\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-8 h-8 bg-accent/10 rounded-lg flex items-center justify-center\">\n                        <FileText className=\"h-4 w-4 text-accent\" />\n                      </div>\n                      <div>\n                        <p className=\"font-medium text-card-foreground\">Worldbuilding</p>\n                        <p className=\"text-xs text-muted-foreground\">No entries yet</p>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between p-3 bg-muted/30 rounded-lg hover:bg-muted/50 transition-colors cursor-pointer\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-8 h-8 bg-chart-2/10 rounded-lg flex items-center justify-center\">\n                        <Clock className=\"h-4 w-4 text-chart-2\" />\n                      </div>\n                      <div>\n                        <p className=\"font-medium text-card-foreground\">Timeline</p>\n                        <p className=\"text-xs text-muted-foreground\">No events yet</p>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <Button \n                    className=\"w-full mt-4\" \n                    variant=\"outline\"\n                    onClick={() => setShowProjectModal(true)}\n                    data-testid=\"button-add-entry\"\n                  >\n                    <Plus className=\"mr-2 h-4 w-4\" />\n                    Create Project First\n                  </Button>\n                </CardContent>\n              </Card>\n              \n              {/* Subscription Status */}\n              <Card data-testid=\"card-subscription\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <h3 className=\"font-semibold text-card-foreground\">Pro Plan</h3>\n                    <Badge className=\"bg-chart-1/10 text-chart-1 border-chart-1/20\">\n                      <Crown className=\"w-3 h-3 mr-1\" />\n                      Active\n                    </Badge>\n                  </div>\n                  \n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between text-sm\">\n                      <span className=\"text-muted-foreground\">AI Sessions</span>\n                      <span className=\"text-card-foreground font-medium\">{stats.aiSessions} / 100</span>\n                    </div>\n                    \n                    <Progress value={(stats.aiSessions / 100) * 100} className=\"w-full\" />\n                    \n                    <div className=\"flex items-center justify-between text-sm\">\n                      <span className=\"text-muted-foreground\">Next billing</span>\n                      <span className=\"text-card-foreground font-medium\">\n                        {new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toLocaleDateString()}\n                      </span>\n                    </div>\n                  </div>\n                  \n                  <Link href=\"/subscription\">\n                    <Button className=\"w-full mt-4\" variant=\"outline\" data-testid=\"button-manage-subscription\">\n                      Manage Subscription\n                    </Button>\n                  </Link>\n                </CardContent>\n              </Card>\n\n              {/* Activity Feed */}\n              <ActivityFeed className=\"\" />\n            </div>\n          </div>\n        </div>\n      </main>\n\n      {/* Modals */}\n      <ProjectModal \n        open={showProjectModal}\n        onClose={() => setShowProjectModal(false)}\n        onSubmit={(data) => createProjectMutation.mutate(data)}\n        loading={createProjectMutation.isPending}\n      />\n\n      <AiAssistantModal\n        open={showAiModal}\n        onClose={closeAiModal}\n        projects={projects}\n      />\n\n      {/* Onboarding Components */}\n      <OnboardingWelcome\n        open={showWelcomeModal}\n        onClose={handleWelcomeSkip}\n        onComplete={handleWelcomeComplete}\n      />\n\n      {showChecklist && onboardingProgress && (\n        <GettingStartedChecklist\n          steps={onboardingProgress.steps}\n          onRestartTour={handleRestartTour}\n          onDismiss={handleDismissChecklist}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":29540},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { \n  BookOpen, \n  Users, \n  Zap, \n  Shield, \n  Lightbulb, \n  Edit3, \n  FileText,\n  Check,\n  Mail,\n  MapPin\n} from \"lucide-react\";\nimport logo from \"@/assets/88away-logo-pink.png\";\nimport logoWhite from \"@/assets/88away-logo-white.png\";\n\nexport default function Landing() {\n  const features = [\n    {\n      icon: <BookOpen className=\"h-8 w-8 text-accent\" />,\n      title: \"Story Bible Management\",\n      description: \"Organize characters, worldbuilding, and timelines in one comprehensive system.\"\n    },\n    {\n      icon: <Lightbulb className=\"h-8 w-8 text-chart-1\" />,\n      title: \"AI Writing Assistant\",\n      description: \"Three specialized personas - Muse for creativity, Editor for polish, Coach for planning.\"\n    },\n    {\n      icon: <Users className=\"h-8 w-8 text-chart-2\" />,\n      title: \"Team Collaboration\",\n      description: \"Role-based access control with Owner, Editor, Reviewer, and Reader permissions.\"\n    },\n    {\n      icon: <Shield className=\"h-8 w-8 text-destructive\" />,\n      title: \"Version Control\",\n      description: \"Track document history and collaborate seamlessly with your team.\"\n    }\n  ];\n\n  const plans = [\n    {\n      name: \"Starter\",\n      price: \"$9\",\n      period: \"/month\",\n      features: [\n        \"1 Active Project\",\n        \"Basic AI Assistance (10 sessions/month)\",\n        \"Character & World Database\",\n        \"Export to JSON\",\n        \"Email Support\"\n      ],\n      cta: \"Start Free Trial\"\n    },\n    {\n      name: \"Professional\",\n      price: \"$29\",\n      period: \"/month\",\n      features: [\n        \"5 Active Projects\",\n        \"Advanced AI Assistance (100 sessions/month)\",\n        \"Team Collaboration (up to 5 members)\",\n        \"Advanced Export (PDF, ePub)\",\n        \"Priority Support\",\n        \"Version History\"\n      ],\n      cta: \"Get Started\",\n      popular: true\n    },\n    {\n      name: \"Enterprise\",\n      price: \"$99\",\n      period: \"/month\",\n      features: [\n        \"Unlimited Projects\",\n        \"Unlimited AI Sessions\",\n        \"Team Collaboration (unlimited)\",\n        \"Custom Export Options\",\n        \"Dedicated Support\",\n        \"Advanced Analytics\",\n        \"Custom Integrations\"\n      ],\n      cta: \"Contact Sales\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Hero Section */}\n      <div className=\"relative overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-primary/5 via-accent/5 to-chart-1/5\"></div>\n        <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-24\">\n          <div className=\"text-center\">\n            <div className=\"flex items-center justify-center mb-8\">\n              <img src={logo} alt=\"88Away Logo\" className=\"h-24 w-auto\" />\n            </div>\n            <p className=\"text-xl text-muted-foreground mb-8 max-w-3xl mx-auto\">\n              The professional writing platform that combines story bible management, \n              AI-powered assistance, and team collaboration to elevate your creative process.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button \n                size=\"lg\" \n                className=\"text-lg px-8 py-6\"\n                onClick={() => window.location.href = \"/api/login\"}\n                data-testid=\"button-get-started\"\n              >\n                <Zap className=\"mr-2 h-5 w-5\" />\n                Get Started Free\n              </Button>\n              <Button \n                size=\"lg\" \n                variant=\"outline\" \n                className=\"text-lg px-8 py-6\"\n                data-testid=\"button-learn-more\"\n              >\n                Learn More\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Features Section */}\n      <div className=\"py-24 bg-card\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl font-bold text-card-foreground mb-4\">\n              Everything you need to craft your story\n            </h2>\n            <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n              Professional writing tools designed for authors who demand the best from their creative process.\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            {features.map((feature, index) => (\n              <Card key={index} className=\"text-center hover:shadow-lg transition-shadow\">\n                <CardHeader>\n                  <div className=\"flex justify-center mb-4\">\n                    {feature.icon}\n                  </div>\n                  <CardTitle className=\"text-xl\">{feature.title}</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <CardDescription className=\"text-sm\">\n                    {feature.description}\n                  </CardDescription>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* AI Personas Section */}\n      <div className=\"py-24 bg-background\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl font-bold text-foreground mb-4\">\n              Meet Your AI Writing Companions\n            </h2>\n            <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n              Three specialized AI personas designed to assist every aspect of your writing journey.\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <Card className=\"relative overflow-hidden\">\n              <div className=\"absolute top-0 left-0 w-full h-1 bg-chart-1\"></div>\n              <CardHeader>\n                <div className=\"flex items-center space-x-3 mb-4\">\n                  <div className=\"w-12 h-12 bg-chart-1/10 rounded-lg flex items-center justify-center\">\n                    <Lightbulb className=\"h-6 w-6 text-chart-1\" />\n                  </div>\n                  <div>\n                    <CardTitle className=\"text-xl\">Muse</CardTitle>\n                    <CardDescription>Creative Inspiration</CardDescription>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground mb-4\">\n                  Generate evocative scenes with rich sensory details and emotional depth. \n                  Perfect for breaking through writer's block and sparking creativity.\n                </p>\n                <ul className=\"text-sm text-muted-foreground space-y-2\">\n                  <li>• Sensory-rich scene generation</li>\n                  <li>• Character voice development</li>\n                  <li>• Emotional depth enhancement</li>\n                </ul>\n              </CardContent>\n            </Card>\n\n            <Card className=\"relative overflow-hidden\">\n              <div className=\"absolute top-0 left-0 w-full h-1 bg-accent\"></div>\n              <CardHeader>\n                <div className=\"flex items-center space-x-3 mb-4\">\n                  <div className=\"w-12 h-12 bg-accent/10 rounded-lg flex items-center justify-center\">\n                    <Edit3 className=\"h-6 w-6 text-accent\" />\n                  </div>\n                  <div>\n                    <CardTitle className=\"text-xl\">Editor</CardTitle>\n                    <CardDescription>Polish & Refine</CardDescription>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground mb-4\">\n                  Improve clarity, grammar, and flow while preserving your unique voice. \n                  Professional editing assistance at your fingertips.\n                </p>\n                <ul className=\"text-sm text-muted-foreground space-y-2\">\n                  <li>• Grammar and clarity improvements</li>\n                  <li>• Voice preservation</li>\n                  <li>• Flow optimization</li>\n                </ul>\n              </CardContent>\n            </Card>\n\n            <Card className=\"relative overflow-hidden\">\n              <div className=\"absolute top-0 left-0 w-full h-1 bg-chart-2\"></div>\n              <CardHeader>\n                <div className=\"flex items-center space-x-3 mb-4\">\n                  <div className=\"w-12 h-12 bg-chart-2/10 rounded-lg flex items-center justify-center\">\n                    <FileText className=\"h-6 w-6 text-chart-2\" />\n                  </div>\n                  <div>\n                    <CardTitle className=\"text-xl\">Coach</CardTitle>\n                    <CardDescription>Structure & Planning</CardDescription>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground mb-4\">\n                  Create outlines, story beats, and structural guidance for your narrative. \n                  Strategic planning for compelling storytelling.\n                </p>\n                <ul className=\"text-sm text-muted-foreground space-y-2\">\n                  <li>• Story structure development</li>\n                  <li>• Beat sheet creation</li>\n                  <li>• Plot planning assistance</li>\n                </ul>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      {/* Pricing Section */}\n      <div className=\"py-24 bg-card\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl font-bold text-card-foreground mb-4\">\n              Choose Your Writing Journey\n            </h2>\n            <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n              Professional plans designed for every stage of your writing career.\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            {plans.map((plan, index) => (\n              <Card \n                key={index} \n                className={`relative ${plan.popular ? 'border-accent ring-2 ring-accent/20' : ''}`}\n              >\n                {plan.popular && (\n                  <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2\">\n                    <span className=\"bg-accent text-accent-foreground px-4 py-1 rounded-full text-sm font-medium\">\n                      Most Popular\n                    </span>\n                  </div>\n                )}\n                <CardHeader className=\"text-center\">\n                  <CardTitle className=\"text-2xl\">{plan.name}</CardTitle>\n                  <div className=\"flex items-baseline justify-center\">\n                    <span className=\"text-4xl font-bold text-card-foreground\">{plan.price}</span>\n                    <span className=\"text-muted-foreground ml-1\">{plan.period}</span>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <ul className=\"space-y-3 mb-8\">\n                    {plan.features.map((feature, featureIndex) => (\n                      <li key={featureIndex} className=\"flex items-center\">\n                        <Check className=\"h-4 w-4 text-chart-1 mr-3 flex-shrink-0\" />\n                        <span className=\"text-sm text-muted-foreground\">{feature}</span>\n                      </li>\n                    ))}\n                  </ul>\n                  <Button \n                    className=\"w-full\" \n                    variant={plan.popular ? \"default\" : \"outline\"}\n                    onClick={() => window.location.href = \"/api/login\"}\n                    data-testid={`button-plan-${plan.name.toLowerCase()}`}\n                  >\n                    {plan.cta}\n                  </Button>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* CTA Section */}\n      <div className=\"py-24 bg-background\">\n        <div className=\"max-w-4xl mx-auto text-center px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-3xl font-bold text-foreground mb-4\">\n            Ready to transform your writing process?\n          </h2>\n          <p className=\"text-lg text-muted-foreground mb-8\">\n            Join thousands of authors who trust 88Away to bring their stories to life.\n          </p>\n          <Button \n            size=\"lg\" \n            className=\"text-lg px-8 py-6\"\n            onClick={() => window.location.href = \"/api/login\"}\n            data-testid=\"button-cta-start\"\n          >\n            <Zap className=\"mr-2 h-5 w-5\" />\n            Start Your Free Trial\n          </Button>\n        </div>\n      </div>\n\n      {/* Footer */}\n      <footer className=\"bg-primary text-primary-foreground py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center\">\n            <div className=\"flex items-center justify-center mb-6\">\n              <img src={logoWhite} alt=\"88Away Logo\" className=\"h-12 w-auto brightness-0 invert opacity-90\" />\n            </div>\n            <div className=\"space-y-2 mb-4\">\n              <p className=\"text-primary-foreground/90 font-medium\">88Away LLC</p>\n              <div className=\"flex items-center justify-center space-x-4 text-sm text-primary-foreground/70\">\n                <div className=\"flex items-center\">\n                  <MapPin className=\"h-3 w-3 mr-1\" />\n                  <span>NYC</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <Mail className=\"h-3 w-3 mr-1\" />\n                  <a href=\"mailto:info@88away.com\" className=\"hover:text-primary-foreground/90 transition-colors\">\n                    info@88away.com\n                  </a>\n                </div>\n              </div>\n            </div>\n            <p className=\"text-primary-foreground/60 text-xs\">\n              © 2024 88Away LLC. All rights reserved. Professional writing platform for modern authors.\n            </p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":14308},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/project.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useParams } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useStore } from \"@/lib/store\";\nimport { useAiModalStore } from \"@/stores/ai-modal-store\";\nimport Sidebar from \"@/components/sidebar\";\nimport RichTextEditor from \"@/components/rich-text-editor\";\nimport AiAssistantModal from \"@/components/ai-assistant-modal\";\nimport AdvancedAnalysisModal from \"@/components/advanced-analysis-modal\";\nimport ExportMenu from \"@/components/export-menu\";\nimport { CollaborationProvider, useCollaboration } from \"@/components/collaboration-provider\";\nimport CommentSidebar from \"@/components/comment-sidebar\";\nimport PresenceIndicator from \"@/components/presence-indicator\";\nimport BranchSwitcher from \"@/components/branch-switcher\";\nimport BranchManagementModal from \"@/components/branch-management-modal\";\nimport VersionHistory from \"@/components/version-history\";\nimport MergeDialog from \"@/components/merge-dialog\";\nimport ConflictResolutionPanel from \"@/components/conflict-resolution-panel\";\nimport DiffViewer from \"@/components/diff-viewer\";\nimport { ActivityFeed } from \"@/components/activity-feed\";\nimport {\n  useDocumentComments,\n  useCreateComment,\n  useUpdateComment,\n  useDeleteComment,\n  useResolveComment,\n  useCommentSubscription\n} from \"@/hooks/useComments\";\nimport {\n  useBranches,\n  useCreateBranch,\n  useSwitchBranch,\n  useBranchVersions,\n  useRollback,\n  useMergeBranches,\n  useMergeEvents,\n  useMergePreview,\n  useUpdateBranch,\n  useDeleteBranch,\n  useResolveMergeConflicts,\n  useCreateVersion\n} from \"@/hooks/useBranches\";\nimport { \n  BookOpen, \n  Users, \n  Globe, \n  Clock, \n  FileText, \n  Plus,\n  Settings,\n  Share2,\n  Download,\n  Zap,\n  Edit3,\n  Save,\n  Eye,\n  Calendar,\n  BarChart3,\n  Brain,\n  MessageSquare,\n  Circle,\n  GitBranch,\n  GitMerge,\n  History\n} from \"lucide-react\";\nimport { Project as ProjectType, Document, ProjectWithCollaborators, Character, DocumentComment as Comment } from \"@shared/schema\";\n\n// Inner component that uses collaboration context\nfunction ProjectContent() {\n  const { id } = useParams();\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { currentBranch, setCurrentBranch, setCurrentDocumentId } = useStore();\n  \n  // Collaboration context\n  const { ydoc, awareness, isConnected, onlineUsers, sendComment, userColor, userRole, xmlFragment } = useCollaboration();\n  \n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n  const { isOpen: showAiModal, close: closeAiModal, openWithPrompt } = useAiModalStore();\n  const [showAdvancedAnalysisModal, setShowAdvancedAnalysisModal] = useState(false);\n  const [showCommentSidebar, setShowCommentSidebar] = useState(false);\n  const [selectedDocument, setSelectedDocument] = useState<string | null>(null);\n  const [documentContent, setDocumentContent] = useState(\"\");\n  const [activeTab, setActiveTab] = useState(\"overview\");\n  const [showCharacterModal, setShowCharacterModal] = useState(false);\n  const [editingCharacter, setEditingCharacter] = useState<Character | null>(null);\n  const [characterFormData, setCharacterFormData] = useState({\n    name: \"\",\n    description: \"\",\n    background: \"\",\n    personality: \"\",\n    appearance: \"\",\n    notes: \"\"\n  });\n  \n  // Version control state\n  const [showBranchManagement, setShowBranchManagement] = useState(false);\n  const [showVersionHistory, setShowVersionHistory] = useState(false);\n  const [showMergeDialog, setShowMergeDialog] = useState(false);\n  const [conflictResolution, setConflictResolution] = useState<any>(null);\n  const [diffComparison, setDiffComparison] = useState<{ left: any; right: any } | null>(null);\n  const [selectedVersions, setSelectedVersions] = useState<string[]>([]);\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: project, isLoading: projectLoading } = useQuery<ProjectWithCollaborators>({\n    queryKey: ['/api/projects', id],\n    enabled: !!id && isAuthenticated,\n    retry: false,\n  });\n\n  const { data: documents = [] } = useQuery<Document[]>({\n    queryKey: ['/api/projects', id, 'documents'],\n    enabled: !!id && isAuthenticated,\n    retry: false,\n  });\n\n  const { data: selectedDocumentData } = useQuery<Document>({\n    queryKey: ['/api/documents', selectedDocument],\n    enabled: !!selectedDocument && isAuthenticated,\n    retry: false,\n  });\n\n  const { data: characters = [] } = useQuery<Character[]>({\n    queryKey: ['/api/projects', id, 'characters'],\n    enabled: !!id && isAuthenticated,\n    retry: false,\n  });\n\n  // Comment hooks\n  const { data: comments = [] } = useDocumentComments(selectedDocument);\n  const createCommentMutation = useCreateComment(selectedDocument || '');\n  const updateCommentMutation = useUpdateComment(selectedDocument || '');\n  const deleteCommentMutation = useDeleteComment(selectedDocument || '');\n  const resolveCommentMutation = useResolveComment(selectedDocument || '');\n  \n  // Subscribe to real-time comment updates\n  useCommentSubscription(selectedDocument, isConnected);\n  \n  // Branch and version hooks\n  const { data: branches = [] } = useBranches(selectedDocument);\n  const { data: versions = [] } = useBranchVersions(currentBranch);\n  const { data: mergeEvents = [] } = useMergeEvents(selectedDocument);\n  const createBranchMutation = useCreateBranch();\n  const switchBranchMutation = useSwitchBranch();\n  const rollbackMutation = useRollback();\n  const mergeBranchesMutation = useMergeBranches();\n  const mergePreviewMutation = useMergePreview();\n  const updateBranchMutation = useUpdateBranch();\n  const deleteBranchMutation = useDeleteBranch();\n  const resolveMergeConflictsMutation = useResolveMergeConflicts();\n  const createVersionMutation = useCreateVersion();\n\n  // Load document content when selected\n  useEffect(() => {\n    if (selectedDocumentData?.content) {\n      setDocumentContent(selectedDocumentData.content);\n    }\n  }, [selectedDocumentData]);\n  \n  // Update store when document changes\n  useEffect(() => {\n    if (selectedDocument) {\n      setCurrentDocumentId(selectedDocument);\n    }\n  }, [selectedDocument, setCurrentDocumentId]);\n\n  const saveDocumentMutation = useMutation({\n    mutationFn: async (content: string) => {\n      if (!selectedDocument) throw new Error(\"No document selected\");\n      return apiRequest(\"PUT\", `/api/documents/${selectedDocument}`, {\n        content\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/documents', selectedDocument] });\n      queryClient.invalidateQueries({ queryKey: ['/api/projects', id, 'documents'] });\n      toast({\n        title: \"Saved\",\n        description: \"Document saved successfully.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to save document.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createDocumentMutation = useMutation({\n    mutationFn: async (data: { title: string; type: string }) => {\n      return apiRequest(\"POST\", `/api/projects/${id}/documents`, {\n        title: data.title,\n        type: data.type,\n        content: \"\",\n        orderIndex: documents.length\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/projects', id, 'documents'] });\n      toast({\n        title: \"Created\",\n        description: \"New document created successfully.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to create document.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSaveDocument = () => {\n    if (selectedDocument && documentContent !== selectedDocumentData?.content) {\n      saveDocumentMutation.mutate(documentContent);\n    }\n  };\n\n  const handleCreateDocument = () => {\n    const title = prompt(\"Document title:\");\n    if (title) {\n      createDocumentMutation.mutate({\n        title,\n        type: \"chapter\"\n      });\n    }\n  };\n\n  const createCharacterMutation = useMutation({\n    mutationFn: async (characterData: any) => {\n      return apiRequest(\"POST\", `/api/projects/${id}/characters`, characterData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/projects', id, 'characters'] });\n      setShowCharacterModal(false);\n      setCharacterFormData({\n        name: \"\",\n        description: \"\",\n        background: \"\",\n        personality: \"\",\n        appearance: \"\",\n        notes: \"\"\n      });\n      toast({\n        title: \"Success\",\n        description: \"Character created successfully!\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to create character. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCharacterSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    createCharacterMutation.mutate(characterFormData);\n  };\n\n  const handleCloseCharacterModal = () => {\n    setShowCharacterModal(false);\n    setEditingCharacter(null);\n    setCharacterFormData({\n      name: \"\",\n      description: \"\",\n      background: \"\",\n      personality: \"\",\n      appearance: \"\",\n      notes: \"\"\n    });\n  };\n\n  // Handle comment actions\n  const handleAddComment = (content: string, range?: { start: number; end: number }) => {\n    if (selectedDocument) {\n      createCommentMutation.mutate({ content, range });\n    }\n  };\n\n  const handleUpdateComment = (commentId: string, content: string) => {\n    updateCommentMutation.mutate({ commentId, content });\n  };\n\n  const handleDeleteComment = (commentId: string) => {\n    deleteCommentMutation.mutate(commentId);\n  };\n\n  const handleResolveComment = (commentId: string) => {\n    resolveCommentMutation.mutate({ commentId, resolved: true });\n  };\n\n  const handleReplyToComment = (parentId: string, content: string) => {\n    if (selectedDocument) {\n      createCommentMutation.mutate({ content, parentId });\n    }\n  };\n\n  // Determine user's role in the project\n  const getUserRole = () => {\n    if (!project || !user) return null;\n    if (project.ownerId === user.id) return 'owner';\n    const collaborator = project.collaborators?.find(c => c.userId === user.id);\n    return collaborator?.role || userRole;\n  };\n\n  const currentUserRole = getUserRole();\n\n  if (!isAuthenticated || isLoading || projectLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  if (!project) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-foreground mb-4\">Project Not Found</h1>\n          <p className=\"text-muted-foreground\">The project you're looking for doesn't exist or you don't have access to it.</p>\n        </div>\n      </div>\n    );\n  }\n\n  const progress = project.targetWordCount \n    ? Math.round(((project.currentWordCount || 0) / project.targetWordCount) * 100)\n    : 0;\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <Sidebar \n        collapsed={sidebarCollapsed} \n        onToggleCollapse={() => setSidebarCollapsed(!sidebarCollapsed)}\n        currentPath={`/projects/${id}`}\n      />\n      \n      <main className=\"flex-1 flex flex-col overflow-hidden\">\n        {/* Project Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div>\n                <h1 className=\"text-2xl font-semibold text-card-foreground\" data-testid=\"text-project-title\">\n                  {project.title}\n                </h1>\n                <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n                  <span data-testid=\"text-word-count\">\n                    {(project.currentWordCount || 0).toLocaleString()} words\n                  </span>\n                  {project.genre && (\n                    <>\n                      <span>•</span>\n                      <Badge variant=\"secondary\">{project.genre}</Badge>\n                    </>\n                  )}\n                  {project.deadline && (\n                    <>\n                      <span>•</span>\n                      <div className=\"flex items-center space-x-1\">\n                        <Calendar className=\"h-3 w-3\" />\n                        <span>\n                          Due {new Date(project.deadline).toLocaleDateString()}\n                        </span>\n                      </div>\n                    </>\n                  )}\n                </div>\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-3\">\n              {/* Connection Status */}\n              <div className=\"flex items-center space-x-2\">\n                <Circle \n                  className={`h-3 w-3 fill-current ${isConnected ? 'text-green-500' : 'text-gray-400'}`} \n                  data-testid=\"connection-status\"\n                />\n                <span className=\"text-sm text-muted-foreground\">\n                  {isConnected ? 'Connected' : 'Offline'}\n                </span>\n              </div>\n\n              {/* Presence Indicator */}\n              <PresenceIndicator \n                onlineUsers={onlineUsers} \n                currentUser={user}\n              />\n\n              {/* Comment Toggle */}\n              {selectedDocument && (\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setShowCommentSidebar(!showCommentSidebar)}\n                  data-testid=\"button-toggle-comments\"\n                >\n                  <MessageSquare className=\"h-4 w-4 mr-2\" />\n                  Comments\n                  {comments.length > 0 && (\n                    <Badge className=\"ml-2\" variant=\"secondary\">\n                      {comments.length}\n                    </Badge>\n                  )}\n                </Button>\n              )}\n\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => openWithPrompt({ persona: null, prompt: \"\" })}\n                data-testid=\"button-ai-assistant\"\n              >\n                <Zap className=\"h-4 w-4 mr-2\" />\n                AI Assistant\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setShowAdvancedAnalysisModal(true)}\n                data-testid=\"button-advanced-analysis\"\n              >\n                <Brain className=\"h-4 w-4 mr-2\" />\n                Analyze\n              </Button>\n              <ExportMenu\n                projectId={id}\n                projectTitle={project.title}\n                documents={documents}\n              />\n            </div>\n          </div>\n\n          {/* Progress Bar */}\n          {project.targetWordCount && (\n            <div className=\"mt-4\">\n              <div className=\"flex items-center justify-between text-sm text-muted-foreground mb-1\">\n                <span>\n                  <span data-testid=\"text-current-word-count\">{(project.currentWordCount || 0).toLocaleString()}</span>\n                  {' / '}\n                  <span data-testid=\"text-target-word-count\">{project.targetWordCount.toLocaleString()}</span>\n                  {' words'}\n                </span>\n                <span>{progress}%</span>\n              </div>\n              <Progress value={progress} className=\"h-2\" data-testid=\"progress-word-count\" />\n            </div>\n          )}\n        </header>\n\n        {/* Main Content Area */}\n        <div className=\"flex-1 flex overflow-hidden\">\n          <div className={`flex-1 p-6 overflow-y-auto ${showCommentSidebar ? 'mr-96' : ''}`}>\n            <Tabs value={activeTab} onValueChange={setActiveTab}>\n              <TabsList className=\"mb-6\">\n                <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">\n                  <BookOpen className=\"h-4 w-4 mr-2\" />\n                  Overview\n                </TabsTrigger>\n                <TabsTrigger value=\"documents\" data-testid=\"tab-documents\">\n                  <FileText className=\"h-4 w-4 mr-2\" />\n                  Documents\n                </TabsTrigger>\n                <TabsTrigger value=\"characters\" data-testid=\"tab-characters\">\n                  <Users className=\"h-4 w-4 mr-2\" />\n                  Characters\n                </TabsTrigger>\n                <TabsTrigger value=\"worldbuilding\" data-testid=\"tab-worldbuilding\">\n                  <Globe className=\"h-4 w-4 mr-2\" />\n                  World\n                </TabsTrigger>\n                <TabsTrigger value=\"timeline\" data-testid=\"tab-timeline\">\n                  <Clock className=\"h-4 w-4 mr-2\" />\n                  Timeline\n                </TabsTrigger>\n              </TabsList>\n\n              {/* Overview Tab */}\n              <TabsContent value=\"overview\" className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Project Details</CardTitle>\n                    <CardDescription>\n                      Manage your writing project and track your progress.\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div>\n                      <Label>Description</Label>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {project.description || \"No description provided\"}\n                      </p>\n                    </div>\n                    {project.collaborators && project.collaborators.length > 0 && (\n                      <div>\n                        <Label>Collaborators</Label>\n                        <div className=\"flex flex-wrap gap-2 mt-2\">\n                          {project.collaborators.map((collab) => (\n                            <Badge key={collab.userId} variant=\"secondary\">\n                              {collab.user?.firstName} {collab.user?.lastName}\n                              <span className=\"ml-1 text-xs opacity-70\">({collab.role})</span>\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                    <div className=\"grid grid-cols-3 gap-4 pt-4\">\n                      <Card>\n                        <CardContent className=\"p-4\">\n                          <div className=\"text-2xl font-semibold\">\n                            {documents.length}\n                          </div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            Documents\n                          </div>\n                        </CardContent>\n                      </Card>\n                      <Card>\n                        <CardContent className=\"p-4\">\n                          <div className=\"text-2xl font-semibold\">\n                            {characters.length}\n                          </div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            Characters\n                          </div>\n                        </CardContent>\n                      </Card>\n                      <Card>\n                        <CardContent className=\"p-4\">\n                          <div className=\"text-2xl font-semibold\">\n                            {project.currentWordCount || 0}\n                          </div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            Total Words\n                          </div>\n                        </CardContent>\n                      </Card>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Activity Feed */}\n                <ActivityFeed projectId={id} className=\"mt-6\" />\n              </TabsContent>\n\n              {/* Documents Tab */}\n              <TabsContent value=\"documents\" className=\"space-y-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h2 className=\"text-xl font-semibold\">Documents</h2>\n                  <Button\n                    onClick={handleCreateDocument}\n                    data-testid=\"button-create-document\"\n                    disabled={currentUserRole === 'reader'}\n                  >\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    New Document\n                  </Button>\n                </div>\n\n                {documents.length === 0 ? (\n                  <Card>\n                    <CardContent className=\"text-center py-8\">\n                      <FileText className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                      <p className=\"text-muted-foreground\">\n                        No documents yet. Create your first document to start writing.\n                      </p>\n                    </CardContent>\n                  </Card>\n                ) : (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label>Select a document</Label>\n                      <div className=\"space-y-2 max-h-[400px] overflow-y-auto\">\n                        {documents.map((doc) => (\n                          <Card\n                            key={doc.id}\n                            className={`cursor-pointer transition-colors hover:bg-accent ${\n                              selectedDocument === doc.id ? 'border-primary' : ''\n                            }`}\n                            onClick={() => setSelectedDocument(doc.id)}\n                            data-testid={`document-card-${doc.id}`}\n                          >\n                            <CardContent className=\"p-4\">\n                              <div className=\"flex items-center justify-between\">\n                                <div>\n                                  <h4 className=\"font-medium\">{doc.title}</h4>\n                                  <p className=\"text-sm text-muted-foreground\" data-testid={`text-document-word-count-${doc.id}`}>\n                                    {doc.wordCount || 0} words\n                                  </p>\n                                </div>\n                                <Badge variant=\"outline\">{doc.type}</Badge>\n                              </div>\n                            </CardContent>\n                          </Card>\n                        ))}\n                      </div>\n                    </div>\n\n                    {selectedDocument && (\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <Label>Edit Document</Label>\n                          <div className=\"flex items-center space-x-2\">\n                            {/* Branch Switcher */}\n                            <BranchSwitcher\n                              branches={branches.map(b => ({\n                                ...b,\n                                createdBy: b.createdBy || 'Unknown',\n                                createdAt: b.createdAt || new Date(),\n                                updatedAt: b.updatedAt || new Date()\n                              }))}\n                              currentBranch={branches.find(b => b.id === currentBranch) || null}\n                              onSwitchBranch={(branchId) => {\n                                switchBranchMutation.mutate({ documentId: selectedDocument, branchId });\n                              }}\n                              onCreateBranch={() => setShowBranchManagement(true)}\n                              disabled={!isConnected}\n                              userRole={currentUserRole}\n                            />\n                            \n                            {/* Version Control Buttons */}\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => setShowVersionHistory(!showVersionHistory)}\n                              data-testid=\"button-version-history\"\n                            >\n                              <History className=\"h-4 w-4\" />\n                            </Button>\n                            \n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => setShowMergeDialog(true)}\n                              disabled={branches.length < 2 || !['owner', 'editor'].includes(currentUserRole || '')}\n                              data-testid=\"button-merge\"\n                            >\n                              <GitMerge className=\"h-4 w-4\" />\n                            </Button>\n                            \n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => setShowBranchManagement(true)}\n                              data-testid=\"button-branch-management\"\n                            >\n                              <GitBranch className=\"h-4 w-4\" />\n                            </Button>\n                            \n                            {currentUserRole && currentUserRole !== 'reader' && (\n                              <Button\n                                size=\"sm\"\n                                onClick={() => {\n                                  handleSaveDocument();\n                                  // Create a version after saving\n                                  if (currentBranch) {\n                                    createVersionMutation.mutate({\n                                      branchId: currentBranch,\n                                      content: documentContent,\n                                      message: `Save at ${new Date().toLocaleTimeString()}`\n                                    });\n                                  }\n                                }}\n                                disabled={documentContent === selectedDocumentData?.content}\n                                data-testid=\"button-save-document\"\n                              >\n                                <Save className=\"h-4 w-4 mr-2\" />\n                                Save\n                              </Button>\n                            )}\n                          </div>\n                        </div>\n                        \n                        {/* Version History Panel */}\n                        {showVersionHistory && (\n                          <div className=\"mb-4\">\n                            <VersionHistory\n                              versions={versions.map(v => ({\n                                ...v,\n                                branchId: v.branchId || currentBranch || '',\n                                authorName: v.authorName || 'Unknown',\n                                createdAt: v.createdAt || new Date()\n                              }))}\n                              currentVersionId={versions[0]?.id}\n                              onRollback={async (versionId) => {\n                                await rollbackMutation.mutateAsync({ versionId, branchId: currentBranch || '' });\n                              }}\n                              onPreview={(versionId) => {\n                                const version = versions.find(v => v.id === versionId);\n                                if (version) {\n                                  setDocumentContent(version.content || '');\n                                }\n                              }}\n                              onCompare={(v1, v2) => {\n                                const left = versions.find(v => v.id === v1);\n                                const right = versions.find(v => v.id === v2);\n                                if (left && right) {\n                                  setDiffComparison({ left, right });\n                                }\n                              }}\n                              userRole={currentUserRole}\n                            />\n                          </div>\n                        )}\n                        \n                        <RichTextEditor\n                          content={documentContent}\n                          onChange={setDocumentContent}\n                          ydoc={ydoc}\n                          awareness={awareness}\n                          xmlFragment={xmlFragment}\n                          isCollaborative={isConnected}\n                          readOnly={currentUserRole === 'reader'}\n                          onlineUsers={onlineUsers}\n                          userColor={userColor}\n                          userRole={currentUserRole}\n                          userName={user ? `${user.firstName || ''} ${user.lastName || ''}`.trim() || user.email : 'Anonymous'}\n                          onCommentClick={() => setShowCommentSidebar(true)}\n                        />\n                      </div>\n                    )}\n                  </div>\n                )}\n              </TabsContent>\n\n              {/* Characters Tab */}\n              <TabsContent value=\"characters\" className=\"space-y-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h2 className=\"text-xl font-semibold\">Characters</h2>\n                  <Button\n                    onClick={() => setShowCharacterModal(true)}\n                    data-testid=\"button-create-character\"\n                    disabled={currentUserRole === 'reader'}\n                  >\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    New Character\n                  </Button>\n                </div>\n\n                {characters.length === 0 ? (\n                  <Card>\n                    <CardContent className=\"text-center py-8\">\n                      <Users className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                      <p className=\"text-muted-foreground\">\n                        No characters yet. Create your first character to bring your story to life.\n                      </p>\n                    </CardContent>\n                  </Card>\n                ) : (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                    {characters.map((character) => (\n                      <Card key={character.id} data-testid={`character-card-${character.id}`}>\n                        <CardHeader>\n                          <CardTitle className=\"text-lg\">{character.name}</CardTitle>\n                        </CardHeader>\n                        <CardContent className=\"space-y-2\">\n                          {character.description && (\n                            <p className=\"text-sm text-muted-foreground line-clamp-3\">\n                              {character.description}\n                            </p>\n                          )}\n                          <div className=\"flex items-center justify-between pt-2\">\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => {\n                                setEditingCharacter(character);\n                                setCharacterFormData({\n                                  name: character.name,\n                                  description: character.description || \"\",\n                                  background: character.background || \"\",\n                                  personality: character.personality || \"\",\n                                  appearance: character.appearance || \"\",\n                                  notes: character.notes || \"\"\n                                });\n                                setShowCharacterModal(true);\n                              }}\n                              disabled={currentUserRole === 'reader'}\n                              data-testid={`button-edit-character-${character.id}`}\n                            >\n                              <Edit3 className=\"h-4 w-4 mr-1\" />\n                              Edit\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              data-testid={`button-view-character-${character.id}`}\n                            >\n                              <Eye className=\"h-4 w-4 mr-1\" />\n                              View\n                            </Button>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                )}\n              </TabsContent>\n\n              {/* Worldbuilding Tab */}\n              <TabsContent value=\"worldbuilding\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>World Building</CardTitle>\n                    <CardDescription>\n                      Create and organize the world of your story\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"text-center py-8\">\n                    <Globe className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                    <p className=\"text-muted-foreground\">\n                      World building features coming soon!\n                    </p>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              {/* Timeline Tab */}\n              <TabsContent value=\"timeline\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Timeline</CardTitle>\n                    <CardDescription>\n                      Track events and plot points in your story\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"text-center py-8\">\n                    <Clock className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                    <p className=\"text-muted-foreground\">\n                      Timeline features coming soon!\n                    </p>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n          </div>\n\n          {/* Comment Sidebar */}\n          {showCommentSidebar && selectedDocument && (\n            <div className=\"fixed right-0 top-0 h-full w-96 bg-background shadow-xl z-20\">\n              <CommentSidebar\n                documentId={selectedDocument}\n                comments={comments}\n                currentUser={user}\n                userRole={currentUserRole}\n                onClose={() => setShowCommentSidebar(false)}\n                onAddComment={handleAddComment}\n                onUpdateComment={handleUpdateComment}\n                onDeleteComment={handleDeleteComment}\n                onResolveComment={handleResolveComment}\n                onReplyToComment={handleReplyToComment}\n              />\n            </div>\n          )}\n        </div>\n      </main>\n\n      {/* AI Assistant Modal */}\n      <AiAssistantModal\n        open={showAiModal}\n        onClose={closeAiModal}\n        projects={[project]}\n      />\n\n      {/* Advanced Analysis Modal */}\n      {showAdvancedAnalysisModal && project && (\n        <AdvancedAnalysisModal\n          isOpen={showAdvancedAnalysisModal}\n          onClose={() => setShowAdvancedAnalysisModal(false)}\n          projectId={project.id}\n          projectTitle={project.title}\n          documents={documents}\n        />\n      )}\n\n      {/* Character Modal */}\n      <Dialog open={showCharacterModal} onOpenChange={handleCloseCharacterModal}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>\n              {editingCharacter ? 'Edit Character' : 'Create New Character'}\n            </DialogTitle>\n            <DialogDescription>\n              Add details about your character\n            </DialogDescription>\n          </DialogHeader>\n          <form onSubmit={handleCharacterSubmit} className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"name\">Name</Label>\n              <Input\n                id=\"name\"\n                value={characterFormData.name}\n                onChange={(e) => setCharacterFormData({...characterFormData, name: e.target.value})}\n                placeholder=\"Character name\"\n                required\n                data-testid=\"input-character-name\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"description\">Description</Label>\n              <Textarea\n                id=\"description\"\n                value={characterFormData.description}\n                onChange={(e) => setCharacterFormData({...characterFormData, description: e.target.value})}\n                placeholder=\"Brief description of the character\"\n                className=\"min-h-[80px]\"\n                data-testid=\"textarea-character-description\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"personality\">Personality</Label>\n              <Textarea\n                id=\"personality\"\n                value={characterFormData.personality}\n                onChange={(e) => setCharacterFormData({...characterFormData, personality: e.target.value})}\n                placeholder=\"Character traits, behaviors, and quirks\"\n                className=\"min-h-[80px]\"\n                data-testid=\"textarea-character-personality\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"background\">Background</Label>\n              <Textarea\n                id=\"background\"\n                value={characterFormData.background}\n                onChange={(e) => setCharacterFormData({...characterFormData, background: e.target.value})}\n                placeholder=\"Character's history and backstory\"\n                className=\"min-h-[80px]\"\n                data-testid=\"textarea-character-background\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"appearance\">Appearance</Label>\n              <Textarea\n                id=\"appearance\"\n                value={characterFormData.appearance}\n                onChange={(e) => setCharacterFormData({...characterFormData, appearance: e.target.value})}\n                placeholder=\"Physical description\"\n                className=\"min-h-[80px]\"\n                data-testid=\"textarea-character-appearance\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"notes\">Notes</Label>\n              <Textarea\n                id=\"notes\"\n                value={characterFormData.notes}\n                onChange={(e) => setCharacterFormData({...characterFormData, notes: e.target.value})}\n                placeholder=\"Additional notes or reminders\"\n                className=\"min-h-[80px]\"\n                data-testid=\"textarea-character-notes\"\n              />\n            </div>\n            <div className=\"flex justify-end space-x-2\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={handleCloseCharacterModal}\n                data-testid=\"button-cancel-character\"\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\"\n                disabled={!characterFormData.name}\n                data-testid=\"button-save-character\"\n              >\n                {editingCharacter ? 'Update' : 'Create'} Character\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n      \n      {/* Branch Management Modal */}\n      {selectedDocument && (\n        <BranchManagementModal\n          open={showBranchManagement}\n          onClose={() => setShowBranchManagement(false)}\n          branches={branches.map(b => ({\n            ...b,\n            name: b.name || 'Unnamed',\n            createdBy: b.createdBy || 'Unknown',\n            createdAt: b.createdAt || new Date(),\n            updatedAt: b.updatedAt || new Date()\n          }))}\n          currentBranchId={currentBranch}\n          onCreateBranch={async (data) => {\n            await createBranchMutation.mutateAsync({\n              documentId: selectedDocument,\n              name: data.name,\n              description: data.description,\n              parentBranchId: data.parentBranchId\n            });\n          }}\n          onUpdateBranch={async (branchId, data) => {\n            await updateBranchMutation.mutateAsync({ branchId, data });\n          }}\n          onDeleteBranch={async (branchId) => {\n            await deleteBranchMutation.mutateAsync(branchId);\n          }}\n          userRole={currentUserRole}\n        />\n      )}\n      \n      {/* Merge Dialog */}\n      {selectedDocument && (\n        <MergeDialog\n          open={showMergeDialog}\n          onClose={() => setShowMergeDialog(false)}\n          branches={branches.map(b => ({\n            ...b,\n            id: b.id || '',\n            name: b.name || 'Unnamed',\n            updatedAt: b.updatedAt || new Date()\n          }))}\n          currentBranch={branches.find(b => b.id === currentBranch) || null}\n          onMerge={async (sourceBranchId, targetBranchId, strategy) => {\n            const result = await mergeBranchesMutation.mutateAsync({\n              documentId: selectedDocument,\n              sourceBranchId,\n              targetBranchId,\n              strategy\n            });\n            \n            if (result?.hasConflicts) {\n              setConflictResolution({\n                mergeEventId: result.id,\n                conflicts: result.conflicts,\n                sourceBranch: branches.find(b => b.id === sourceBranchId)?.name || 'Unknown',\n                targetBranch: branches.find(b => b.id === targetBranchId)?.name || 'Unknown'\n              });\n              setShowMergeDialog(false);\n            }\n          }}\n          onPreviewMerge={async (sourceBranchId, targetBranchId) => {\n            return await mergePreviewMutation.mutateAsync({\n              documentId: selectedDocument,\n              sourceBranchId,\n              targetBranchId\n            });\n          }}\n          userRole={currentUserRole}\n        />\n      )}\n      \n      {/* Conflict Resolution Panel */}\n      {conflictResolution && (\n        <Dialog open={true} onOpenChange={() => setConflictResolution(null)}>\n          <DialogContent className=\"max-w-6xl h-[90vh] p-0\">\n            <ConflictResolutionPanel\n              conflicts={conflictResolution.conflicts}\n              sourceBranch={conflictResolution.sourceBranch}\n              targetBranch={conflictResolution.targetBranch}\n              onResolve={async (resolutions) => {\n                await resolveMergeConflictsMutation.mutateAsync({\n                  mergeEventId: conflictResolution.mergeEventId,\n                  resolutions\n                });\n                setConflictResolution(null);\n              }}\n              onCancel={() => setConflictResolution(null)}\n              userRole={currentUserRole}\n            />\n          </DialogContent>\n        </Dialog>\n      )}\n      \n      {/* Diff Viewer Dialog */}\n      {diffComparison && (\n        <Dialog open={true} onOpenChange={() => setDiffComparison(null)}>\n          <DialogContent className=\"max-w-6xl h-[90vh] p-0\">\n            <DiffViewer\n              leftVersion={{\n                ...diffComparison.left,\n                branchName: branches.find(b => b.id === diffComparison.left.branchId)?.name || 'Unknown'\n              }}\n              rightVersion={{\n                ...diffComparison.right,\n                branchName: branches.find(b => b.id === diffComparison.right.branchId)?.name || 'Unknown'\n              }}\n              onClose={() => setDiffComparison(null)}\n            />\n          </DialogContent>\n        </Dialog>\n      )}\n    </div>\n  );\n}\n\n// Main component with CollaborationProvider wrapper\nexport default function Project() {\n  const { id } = useParams();\n  const { user, isAuthenticated } = useAuth();\n  \n  if (!id || !isAuthenticated || !user) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  // Wrap the entire project page with collaboration provider\n  return (\n    <CollaborationProvider documentId={id} projectId={id}>\n      <ProjectContent />\n    </CollaborationProvider>\n  );\n}","size_bytes":46881},"client/src/pages/subscription.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport Sidebar from \"@/components/sidebar\";\nimport { \n  Crown, \n  CreditCard, \n  Calendar, \n  Zap, \n  FileText, \n  Users,\n  Download,\n  CheckCircle,\n  XCircle,\n  AlertCircle,\n  TrendingUp,\n  Activity,\n  BarChart3\n} from \"lucide-react\";\nimport { Project, AiGeneration } from \"@shared/schema\";\n\ninterface SubscriptionData {\n  plan: string;\n  status: string;\n  aiSessionsUsed: number;\n  aiSessionsLimit: number;\n  projectsUsed: number;\n  projectsLimit: number;\n  collaboratorsUsed: number;\n  collaboratorsLimit: number;\n  nextBilling: string;\n  amount: string;\n}\n\nexport default function Subscription() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: projects = [] } = useQuery<Project[]>({\n    queryKey: ['/api/projects'],\n    enabled: isAuthenticated,\n    retry: false,\n  });\n\n  const { data: aiGenerations = [] } = useQuery<AiGeneration[]>({\n    queryKey: ['/api/ai/history'],\n    enabled: isAuthenticated,\n    retry: false,\n  });\n\n  // Mock subscription data - in a real app, this would come from Stripe/backend\n  const subscriptionData: SubscriptionData = {\n    plan: \"Pro Plan\",\n    status: \"active\",\n    aiSessionsUsed: aiGenerations.length || 24,\n    aiSessionsLimit: 100,\n    projectsUsed: projects.length || 3,\n    projectsLimit: 5,\n    collaboratorsUsed: 8,\n    collaboratorsLimit: 15,\n    nextBilling: new Date(Date.now() + 15 * 24 * 60 * 60 * 1000).toISOString(),\n    amount: \"$29.00\"\n  };\n\n  const getStatusInfo = (status: string) => {\n    switch (status) {\n      case \"active\":\n        return { icon: CheckCircle, color: \"text-chart-1\", bg: \"bg-chart-1/10\", label: \"Active\" };\n      case \"past_due\":\n        return { icon: AlertCircle, color: \"text-chart-2\", bg: \"bg-chart-2/10\", label: \"Past Due\" };\n      case \"canceled\":\n        return { icon: XCircle, color: \"text-destructive\", bg: \"bg-destructive/10\", label: \"Canceled\" };\n      default:\n        return { icon: AlertCircle, color: \"text-muted-foreground\", bg: \"bg-muted/10\", label: \"Unknown\" };\n    }\n  };\n\n  const statusInfo = getStatusInfo(subscriptionData.status);\n  const StatusIcon = statusInfo.icon;\n\n  const usageMetrics = [\n    {\n      title: \"AI Sessions\",\n      used: subscriptionData.aiSessionsUsed,\n      limit: subscriptionData.aiSessionsLimit,\n      icon: Zap,\n      color: \"text-chart-2\"\n    },\n    {\n      title: \"Active Projects\",\n      used: subscriptionData.projectsUsed,\n      limit: subscriptionData.projectsLimit,\n      icon: FileText,\n      color: \"text-accent\"\n    },\n    {\n      title: \"Team Members\",\n      used: subscriptionData.collaboratorsUsed,\n      limit: subscriptionData.collaboratorsLimit,\n      icon: Users,\n      color: \"text-chart-1\"\n    }\n  ];\n\n  const billingHistory = [\n    {\n      date: \"2024-11-15\",\n      amount: \"$29.00\",\n      status: \"paid\",\n      description: \"Pro Plan - Monthly\"\n    },\n    {\n      date: \"2024-10-15\",\n      amount: \"$29.00\",\n      status: \"paid\",\n      description: \"Pro Plan - Monthly\"\n    },\n    {\n      date: \"2024-09-15\",\n      amount: \"$29.00\",\n      status: \"paid\",\n      description: \"Pro Plan - Monthly\"\n    }\n  ];\n\n  const handleManageBilling = () => {\n    // In a real app, this would redirect to Stripe customer portal\n    toast({\n      title: \"Redirecting to Billing Portal\",\n      description: \"You'll be redirected to manage your subscription...\",\n    });\n  };\n\n  const handleUpgradePlan = () => {\n    // In a real app, this would initiate upgrade flow\n    toast({\n      title: \"Coming Soon\",\n      description: \"Plan upgrades will be available soon.\",\n    });\n  };\n\n  const handleDownloadInvoice = (date: string) => {\n    toast({\n      title: \"Downloading Invoice\",\n      description: `Invoice for ${date} will be downloaded.`,\n    });\n  };\n\n  if (!isAuthenticated || isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <Sidebar \n        collapsed={sidebarCollapsed} \n        onToggleCollapse={() => setSidebarCollapsed(!sidebarCollapsed)}\n        currentPath=\"/subscription\"\n      />\n      \n      <main className=\"flex-1 flex flex-col overflow-hidden\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <h1 className=\"text-2xl font-semibold text-card-foreground\" data-testid=\"text-subscription-title\">\n                Subscription & Billing\n              </h1>\n            </div>\n            \n            <Button \n              onClick={handleManageBilling}\n              data-testid=\"button-manage-billing\"\n            >\n              <CreditCard className=\"mr-2 h-4 w-4\" />\n              Manage Billing\n            </Button>\n          </div>\n        </header>\n\n        {/* Subscription Content */}\n        <div className=\"flex-1 overflow-auto p-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            \n            {/* Left Column: Plan & Usage */}\n            <div className=\"lg:col-span-2 space-y-8\">\n              \n              {/* Current Plan */}\n              <Card data-testid=\"card-current-plan\">\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-12 h-12 bg-chart-1/10 rounded-lg flex items-center justify-center\">\n                        <Crown className=\"h-6 w-6 text-chart-1\" />\n                      </div>\n                      <div>\n                        <CardTitle className=\"text-xl\">{subscriptionData.plan}</CardTitle>\n                        <div className=\"flex items-center space-x-2 mt-1\">\n                          <Badge className={`${statusInfo.bg} ${statusInfo.color} border-0`}>\n                            <StatusIcon className=\"w-3 h-3 mr-1\" />\n                            {statusInfo.label}\n                          </Badge>\n                          <span className=\"text-sm text-muted-foreground\">•</span>\n                          <span className=\"text-sm text-muted-foreground\">{subscriptionData.amount}/month</span>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <Button variant=\"outline\" onClick={handleUpgradePlan} data-testid=\"button-upgrade-plan\">\n                      <TrendingUp className=\"mr-2 h-4 w-4\" />\n                      Upgrade\n                    </Button>\n                  </div>\n                </CardHeader>\n                \n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                    {usageMetrics.map((metric) => {\n                      const percentage = (metric.used / metric.limit) * 100;\n                      const MetricIcon = metric.icon;\n                      \n                      return (\n                        <div key={metric.title} className=\"space-y-3\">\n                          <div className=\"flex items-center space-x-2\">\n                            <MetricIcon className={`h-4 w-4 ${metric.color}`} />\n                            <span className=\"text-sm font-medium text-card-foreground\">{metric.title}</span>\n                          </div>\n                          <div>\n                            <div className=\"flex justify-between text-sm mb-1\">\n                              <span className=\"text-muted-foreground\">{metric.used} used</span>\n                              <span className=\"text-muted-foreground\">{metric.limit} limit</span>\n                            </div>\n                            <Progress value={percentage} className=\"h-2\" />\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                  \n                  <Separator className=\"my-6\" />\n                  \n                  <div className=\"grid grid-cols-2 gap-6 text-center\">\n                    <div>\n                      <div className=\"text-2xl font-bold text-card-foreground mb-1\">\n                        {new Date(subscriptionData.nextBilling).toLocaleDateString()}\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">Next Billing Date</p>\n                    </div>\n                    <div>\n                      <div className=\"text-2xl font-bold text-card-foreground mb-1\">{subscriptionData.amount}</div>\n                      <p className=\"text-sm text-muted-foreground\">Monthly Amount</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              {/* Usage Analytics */}\n              <Card data-testid=\"card-usage-analytics\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <BarChart3 className=\"h-5 w-5\" />\n                    <span>Usage Analytics</span>\n                  </CardTitle>\n                  <CardDescription>Your usage patterns over the last 30 days</CardDescription>\n                </CardHeader>\n                \n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                    <div className=\"text-center p-4 bg-accent/5 rounded-lg\">\n                      <div className=\"text-3xl font-bold text-accent mb-2\">\n                        {subscriptionData.aiSessionsUsed}\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">AI Sessions This Month</p>\n                      <div className=\"flex items-center justify-center mt-2 text-xs text-chart-1\">\n                        <TrendingUp className=\"h-3 w-3 mr-1\" />\n                        +15% from last month\n                      </div>\n                    </div>\n                    \n                    <div className=\"text-center p-4 bg-chart-1/5 rounded-lg\">\n                      <div className=\"text-3xl font-bold text-chart-1 mb-2\">\n                        {projects.reduce((total, project) => total + (project.currentWordCount || 0), 0).toLocaleString()}\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">Words Written</p>\n                      <div className=\"flex items-center justify-center mt-2 text-xs text-chart-1\">\n                        <TrendingUp className=\"h-3 w-3 mr-1\" />\n                        +23% from last month\n                      </div>\n                    </div>\n                    \n                    <div className=\"text-center p-4 bg-chart-2/5 rounded-lg\">\n                      <div className=\"text-3xl font-bold text-chart-2 mb-2\">\n                        {subscriptionData.collaboratorsUsed}\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">Active Collaborators</p>\n                      <div className=\"flex items-center justify-center mt-2 text-xs text-chart-1\">\n                        <Activity className=\"h-3 w-3 mr-1\" />\n                        5 active today\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n            \n            {/* Right Column: Billing History & Features */}\n            <div className=\"space-y-8\">\n              \n              {/* Plan Features */}\n              <Card data-testid=\"card-plan-features\">\n                <CardHeader>\n                  <CardTitle>Plan Features</CardTitle>\n                  <CardDescription>What's included in your Pro Plan</CardDescription>\n                </CardHeader>\n                \n                <CardContent className=\"space-y-3\">\n                  <div className=\"flex items-center space-x-3\">\n                    <CheckCircle className=\"h-4 w-4 text-chart-1\" />\n                    <span className=\"text-sm\">100 AI sessions per month</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <CheckCircle className=\"h-4 w-4 text-chart-1\" />\n                    <span className=\"text-sm\">Up to 5 active projects</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <CheckCircle className=\"h-4 w-4 text-chart-1\" />\n                    <span className=\"text-sm\">Team collaboration (15 members)</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <CheckCircle className=\"h-4 w-4 text-chart-1\" />\n                    <span className=\"text-sm\">Advanced export formats</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <CheckCircle className=\"h-4 w-4 text-chart-1\" />\n                    <span className=\"text-sm\">Priority support</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <CheckCircle className=\"h-4 w-4 text-chart-1\" />\n                    <span className=\"text-sm\">Version history</span>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              {/* Billing History */}\n              <Card data-testid=\"card-billing-history\">\n                <CardHeader>\n                  <CardTitle>Billing History</CardTitle>\n                  <CardDescription>Your recent payments and invoices</CardDescription>\n                </CardHeader>\n                \n                <CardContent>\n                  <div className=\"space-y-3\">\n                    {billingHistory.map((invoice, index) => (\n                      <div key={index} className=\"flex items-center justify-between p-3 bg-muted/20 rounded-lg\">\n                        <div>\n                          <div className=\"font-medium text-sm\">{invoice.description}</div>\n                          <div className=\"text-xs text-muted-foreground\">\n                            {new Date(invoice.date).toLocaleDateString()}\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Badge \n                            variant={invoice.status === \"paid\" ? \"default\" : \"destructive\"}\n                            className=\"text-xs\"\n                          >\n                            {invoice.status}\n                          </Badge>\n                          <span className=\"text-sm font-medium\">{invoice.amount}</span>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleDownloadInvoice(invoice.date)}\n                            data-testid={`button-download-${index}`}\n                          >\n                            <Download className=\"h-3 w-3\" />\n                          </Button>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                  \n                  <Button \n                    variant=\"outline\" \n                    className=\"w-full mt-4\"\n                    onClick={handleManageBilling}\n                    data-testid=\"button-view-all-invoices\"\n                  >\n                    View All Invoices\n                  </Button>\n                </CardContent>\n              </Card>\n              \n              {/* Payment Method */}\n              <Card data-testid=\"card-payment-method\">\n                <CardHeader>\n                  <CardTitle>Payment Method</CardTitle>\n                </CardHeader>\n                \n                <CardContent>\n                  <div className=\"flex items-center space-x-3 p-3 bg-muted/20 rounded-lg\">\n                    <CreditCard className=\"h-8 w-8 text-muted-foreground\" />\n                    <div>\n                      <div className=\"font-medium text-sm\">•••• •••• •••• 4242</div>\n                      <div className=\"text-xs text-muted-foreground\">Expires 12/2025</div>\n                    </div>\n                  </div>\n                  \n                  <Button \n                    variant=\"outline\" \n                    className=\"w-full mt-4\"\n                    onClick={handleManageBilling}\n                    data-testid=\"button-update-payment\"\n                  >\n                    Update Payment Method\n                  </Button>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":17844},"client/src/pages/timeline.tsx":{"content":"import { useEffect, useState, useMemo } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport Sidebar from \"@/components/sidebar\";\nimport { \n  Clock, \n  Plus, \n  Edit, \n  Trash2, \n  Search,\n  Calendar,\n  MapPin,\n  Users,\n  GripVertical,\n  ChevronDown,\n  ChevronRight\n} from \"lucide-react\";\nimport { Project, TimelineEvent } from \"@shared/schema\";\nimport {\n  DndContext,\n  DragEndEvent,\n  DragStartEvent,\n  DragOverlay,\n  closestCenter,\n  PointerSensor,\n  KeyboardSensor,\n  useSensor,\n  useSensors,\n} from '@dnd-kit/core';\nimport {\n  SortableContext,\n  sortableKeyboardCoordinates,\n  verticalListSortingStrategy,\n  useSortable,\n} from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport { cn } from \"@/lib/utils\";\n\nconst importanceLevels = [\n  { value: 1, label: \"Minor\", color: \"bg-muted\" },\n  { value: 2, label: \"Notable\", color: \"bg-chart-3\" },\n  { value: 3, label: \"Significant\", color: \"bg-chart-2\" },\n  { value: 4, label: \"Major\", color: \"bg-chart-1\" },\n  { value: 5, label: \"Critical\", color: \"bg-destructive\" }\n];\n\nfunction SortableEventCard({ \n  event, \n  onEdit, \n  onDelete \n}: { \n  event: TimelineEvent; \n  onEdit: () => void; \n  onDelete: () => void; \n}) {\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging,\n  } = useSortable({ id: event.id });\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    opacity: isDragging ? 0.5 : 1,\n  };\n\n  const getImportanceInfo = (importance: number) => {\n    return importanceLevels.find(level => level.value === importance) || importanceLevels[2];\n  };\n\n  const importanceInfo = getImportanceInfo(event.importance || 3);\n\n  return (\n    <div ref={setNodeRef} style={style} className=\"relative flex space-x-4\" data-testid={`card-event-${event.id}`}>\n      <button\n        {...attributes}\n        {...listeners}\n        className=\"cursor-grab active:cursor-grabbing mt-1 text-muted-foreground hover:text-foreground z-10 flex-shrink-0\"\n        data-testid={`drag-handle-${event.id}`}\n      >\n        <GripVertical className=\"h-5 w-5\" />\n      </button>\n      <div className={`w-12 h-12 ${importanceInfo.color} rounded-lg flex items-center justify-center z-10 flex-shrink-0`}>\n        <Clock className=\"h-6 w-6 text-white\" />\n      </div>\n      <div className=\"flex-1 min-w-0\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex-1\">\n            <div className=\"flex items-center space-x-2 mb-1\">\n              <h4 className=\"font-semibold text-card-foreground\" data-testid={`text-event-title-${event.id}`}>\n                {event.title}\n              </h4>\n              <Badge variant=\"outline\" className={importanceInfo.color}>\n                {importanceInfo.label}\n              </Badge>\n            </div>\n            {event.description && (\n              <p className=\"text-muted-foreground text-sm mb-2\">\n                {event.description}\n              </p>\n            )}\n            \n            <div className=\"flex flex-wrap items-center gap-4 text-sm text-muted-foreground\">\n              {event.relatedCharacters && event.relatedCharacters.length > 0 && (\n                <div className=\"flex items-center space-x-1\">\n                  <Users className=\"h-3 w-3\" />\n                  <span>{event.relatedCharacters.join(', ')}</span>\n                </div>\n              )}\n              {event.relatedLocations && event.relatedLocations.length > 0 && (\n                <div className=\"flex items-center space-x-1\">\n                  <MapPin className=\"h-3 w-3\" />\n                  <span>{event.relatedLocations.join(', ')}</span>\n                </div>\n              )}\n            </div>\n            \n            {event.tags && event.tags.length > 0 && (\n              <div className=\"flex flex-wrap gap-1 mt-2\">\n                {event.tags.map((tag, tagIndex) => (\n                  <Badge key={tagIndex} variant=\"secondary\" className=\"text-xs\">\n                    {tag}\n                  </Badge>\n                ))}\n              </div>\n            )}\n          </div>\n          \n          <div className=\"flex items-center space-x-1 ml-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onEdit}\n              data-testid={`button-edit-event-${event.id}`}\n            >\n              <Edit className=\"h-4 w-4\" />\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onDelete}\n              data-testid={`button-delete-event-${event.id}`}\n            >\n              <Trash2 className=\"h-4 w-4 text-destructive\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default function Timeline() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClientInstance = useQueryClient();\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n  const [showEventModal, setShowEventModal] = useState(false);\n  const [editingEvent, setEditingEvent] = useState<TimelineEvent | null>(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filterImportance, setFilterImportance] = useState(\"all\");\n  const [expandedYears, setExpandedYears] = useState<Set<string>>(new Set());\n  const [activeId, setActiveId] = useState<string | null>(null);\n  const [draggedEvent, setDraggedEvent] = useState<TimelineEvent | null>(null);\n  const [formData, setFormData] = useState({\n    title: \"\",\n    description: \"\",\n    date: \"\",\n    importance: 3,\n    tags: \"\",\n    relatedCharacters: \"\",\n    relatedLocations: \"\"\n  });\n\n  // Drag sensors\n  const sensors = useSensors(\n    useSensor(PointerSensor, {\n      activationConstraint: {\n        distance: 8,\n      },\n    }),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    })\n  );\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: projects = [] } = useQuery<Project[]>({\n    queryKey: ['/api/projects'],\n    enabled: isAuthenticated,\n    retry: false,\n  });\n\n  const { data: events = [], isLoading: eventsLoading } = useQuery<TimelineEvent[]>({\n    queryKey: ['/api/timeline'],\n    enabled: isAuthenticated && projects.length > 0,\n    queryFn: async () => {\n      if (projects.length > 0) {\n        const response = await fetch(`/api/projects/${projects[0].id}/timeline`, {\n          credentials: \"include\",\n        });\n        if (!response.ok) throw new Error(`${response.status}: ${response.statusText}`);\n        return response.json();\n      }\n      return [];\n    },\n    retry: false,\n  });\n\n  const createEventMutation = useMutation({\n    mutationFn: async (eventData: any) => {\n      if (projects.length === 0) throw new Error(\"No project available\");\n      await apiRequest(\"POST\", `/api/projects/${projects[0].id}/timeline`, eventData);\n    },\n    onSuccess: () => {\n      queryClientInstance.invalidateQueries({ queryKey: ['/api/timeline'] });\n      setShowEventModal(false);\n      setFormData({\n        title: \"\",\n        description: \"\",\n        date: \"\",\n        importance: 3,\n        tags: \"\",\n        relatedCharacters: \"\",\n        relatedLocations: \"\"\n      });\n      toast({\n        title: \"Success\",\n        description: \"Timeline event created successfully!\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to create event. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateEventMutation = useMutation({\n    mutationFn: async (data: { id: string; updates: any }) => {\n      await apiRequest(\"PUT\", `/api/timeline/${data.id}`, data.updates);\n    },\n    onSuccess: () => {\n      queryClientInstance.invalidateQueries({ queryKey: ['/api/timeline'] });\n      setShowEventModal(false);\n      setEditingEvent(null);\n      toast({\n        title: \"Success\",\n        description: \"Event updated successfully!\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update event. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteEventMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/timeline/${id}`);\n    },\n    onSuccess: () => {\n      queryClientInstance.invalidateQueries({ queryKey: ['/api/timeline'] });\n      toast({\n        title: \"Success\",\n        description: \"Event deleted successfully!\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete event. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const reorderEventMutation = useMutation({\n    mutationFn: async (data: { \n      eventId: string; \n      targetId: string; \n      targetDate: string | null;\n    }) => {\n      const targetEvent = events.find(e => e.id === data.targetId);\n      \n      if (!targetEvent) return;\n      \n      const newOrderIndex = targetEvent.orderIndex ?? 0;\n      const activeEvent = events.find(e => e.id === data.eventId);\n      const dateChanged = activeEvent && activeEvent.date !== targetEvent.date;\n      \n      await apiRequest(\"PATCH\", `/api/timeline/${data.eventId}/reorder`, {\n        orderIndex: newOrderIndex,\n        ...(dateChanged && { date: targetEvent.date })\n      });\n    },\n    onMutate: async (data) => {\n      await queryClientInstance.cancelQueries({ queryKey: ['/api/timeline'] });\n      const previousEvents = queryClientInstance.getQueryData(['/api/timeline']);\n      \n      queryClientInstance.setQueryData(['/api/timeline'], (old: TimelineEvent[] | undefined) => {\n        if (!old) return old;\n        \n        const oldIndex = old.findIndex(e => e.id === data.eventId);\n        const newIndex = old.findIndex(e => e.id === data.targetId);\n        \n        if (oldIndex === -1 || newIndex === -1) return old;\n        \n        const newArray = [...old];\n        const [movedEvent] = newArray.splice(oldIndex, 1);\n        \n        const targetEvent = old[newIndex];\n        if (targetEvent && movedEvent.date !== targetEvent.date) {\n          movedEvent.date = targetEvent.date;\n        }\n        \n        newArray.splice(newIndex, 0, movedEvent);\n        \n        return newArray;\n      });\n      \n      return { previousEvents };\n    },\n    onError: (err, variables, context) => {\n      if (context?.previousEvents) {\n        queryClientInstance.setQueryData(['/api/timeline'], context.previousEvents);\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to reorder events. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n    onSuccess: () => {\n      queryClientInstance.invalidateQueries({ queryKey: ['/api/timeline'] });\n      toast({\n        title: \"Success\",\n        description: \"Event reordered successfully!\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const submitData = {\n      title: formData.title,\n      description: formData.description || undefined,\n      date: formData.date,\n      importance: formData.importance,\n      tags: formData.tags ? formData.tags.split(',').map(tag => tag.trim()).filter(Boolean) : undefined,\n      relatedCharacters: formData.relatedCharacters ? formData.relatedCharacters.split(',').map(char => char.trim()).filter(Boolean) : undefined,\n      relatedLocations: formData.relatedLocations ? formData.relatedLocations.split(',').map(loc => loc.trim()).filter(Boolean) : undefined\n    };\n\n    if (editingEvent) {\n      updateEventMutation.mutate({\n        id: editingEvent.id,\n        updates: submitData\n      });\n    } else {\n      createEventMutation.mutate(submitData);\n    }\n  };\n\n  const handleEdit = (event: TimelineEvent) => {\n    setEditingEvent(event);\n    setFormData({\n      title: event.title,\n      description: event.description || \"\",\n      date: event.date || \"\",\n      importance: event.importance || 3,\n      tags: event.tags?.join(', ') || \"\",\n      relatedCharacters: event.relatedCharacters?.join(', ') || \"\",\n      relatedLocations: event.relatedLocations?.join(', ') || \"\"\n    });\n    setShowEventModal(true);\n  };\n\n  const handleDelete = (event: TimelineEvent) => {\n    if (confirm(`Are you sure you want to delete \"${event.title}\"?`)) {\n      deleteEventMutation.mutate(event.id);\n    }\n  };\n\n  const handleCloseModal = () => {\n    setShowEventModal(false);\n    setEditingEvent(null);\n    setFormData({\n      title: \"\",\n      description: \"\",\n      date: \"\",\n      importance: 3,\n      tags: \"\",\n      relatedCharacters: \"\",\n      relatedLocations: \"\"\n    });\n  };\n\n  const handleDragStart = (event: DragStartEvent) => {\n    const { active } = event;\n    setActiveId(active.id as string);\n    const draggedEvt = events.find(e => e.id === active.id);\n    setDraggedEvent(draggedEvt || null);\n  };\n\n  const handleDragEnd = (event: DragEndEvent) => {\n    const { active, over } = event;\n    \n    if (!over || active.id === over.id) {\n      setActiveId(null);\n      setDraggedEvent(null);\n      return;\n    }\n\n    const activeEvent = events.find(e => e.id === active.id);\n    const overEvent = events.find(e => e.id === over.id);\n    \n    if (!activeEvent || !overEvent) {\n      setActiveId(null);\n      setDraggedEvent(null);\n      return;\n    }\n\n    reorderEventMutation.mutate({\n      eventId: activeEvent.id,\n      targetId: overEvent.id,\n      targetDate: overEvent.date || null,\n    });\n\n    setActiveId(null);\n    setDraggedEvent(null);\n  };\n\n  // Group events by year/era with sorting by orderIndex first, then importance\n  const groupedEvents = useMemo(() => {\n    const filtered = events.filter((event: TimelineEvent) => {\n      const matchesSearch = event.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        event.description?.toLowerCase().includes(searchTerm.toLowerCase());\n      const matchesImportance = filterImportance === \"all\" || (event.importance || 3).toString() === filterImportance;\n      return matchesSearch && matchesImportance;\n    });\n\n    const grouped = filtered.reduce((acc: { [key: string]: TimelineEvent[] }, event: TimelineEvent) => {\n      const year = event.date || \"Undated\";\n      if (!acc[year]) {\n        acc[year] = [];\n      }\n      acc[year].push(event);\n      return acc;\n    }, {});\n\n    // Sort each group by orderIndex first, then importance\n    Object.keys(grouped).forEach(year => {\n      grouped[year].sort((a, b) => {\n        const aOrder = a.orderIndex ?? 0;\n        const bOrder = b.orderIndex ?? 0;\n        if (aOrder !== bOrder) return aOrder - bOrder;\n        return (b.importance ?? 3) - (a.importance ?? 3);\n      });\n    });\n\n    return grouped;\n  }, [events, searchTerm, filterImportance]);\n\n  // Sort years/eras\n  const sortedYears = useMemo(() => {\n    return Object.keys(groupedEvents).sort((a, b) => {\n      if (a === \"Undated\") return 1;\n      if (b === \"Undated\") return -1;\n      return a.localeCompare(b);\n    });\n  }, [groupedEvents]);\n\n  const toggleYear = (year: string) => {\n    const newExpanded = new Set(expandedYears);\n    if (newExpanded.has(year)) {\n      newExpanded.delete(year);\n    } else {\n      newExpanded.add(year);\n    }\n    setExpandedYears(newExpanded);\n  };\n\n  if (!isAuthenticated || isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <Sidebar \n        collapsed={sidebarCollapsed} \n        onToggleCollapse={() => setSidebarCollapsed(!sidebarCollapsed)}\n        currentPath=\"/timeline\"\n      />\n      \n      <main className=\"flex-1 flex flex-col overflow-hidden\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <h1 className=\"text-2xl font-semibold text-card-foreground\" data-testid=\"text-timeline-title\">\n                Timeline\n              </h1>\n              <Badge variant=\"secondary\" data-testid=\"badge-event-count\">\n                {events.length} events\n              </Badge>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Select value={filterImportance} onValueChange={setFilterImportance}>\n                  <SelectTrigger className=\"w-40\" data-testid=\"select-filter-importance\">\n                    <SelectValue placeholder=\"Filter by importance\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Levels</SelectItem>\n                    {importanceLevels.map((level) => (\n                      <SelectItem key={level.value} value={level.value.toString()}>\n                        {level.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                \n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    placeholder=\"Search events...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-10 w-64\"\n                    data-testid=\"input-search-events\"\n                  />\n                </div>\n              </div>\n              \n              <Button \n                onClick={() => setShowEventModal(true)}\n                data-testid=\"button-add-event\"\n              >\n                <Plus className=\"mr-2 h-4 w-4\" />\n                Add Event\n              </Button>\n            </div>\n          </div>\n        </header>\n\n        {/* Timeline Content */}\n        <div className=\"flex-1 overflow-auto p-6\">\n          {eventsLoading ? (\n            <div className=\"space-y-6\">\n              {[1, 2, 3].map(i => (\n                <Card key={i} className=\"animate-pulse\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"h-4 bg-muted rounded w-1/4 mb-4\"></div>\n                    <div className=\"space-y-4\">\n                      {[1, 2].map(j => (\n                        <div key={j} className=\"flex space-x-4\">\n                          <div className=\"w-12 h-12 bg-muted rounded-lg\"></div>\n                          <div className=\"flex-1\">\n                            <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\n                            <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : Object.keys(groupedEvents).length === 0 ? (\n            <div className=\"text-center py-16\" data-testid=\"empty-events-state\">\n              <Clock className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-card-foreground mb-2\">\n                {searchTerm || filterImportance !== \"all\" ? \"No events found\" : \"No timeline events yet\"}\n              </h3>\n              <p className=\"text-muted-foreground mb-4\">\n                {searchTerm || filterImportance !== \"all\"\n                  ? \"Try adjusting your search or filter.\"\n                  : \"Start building your story's chronology with important events.\"\n                }\n              </p>\n              {!searchTerm && filterImportance === \"all\" && (\n                <Button \n                  onClick={() => setShowEventModal(true)}\n                  data-testid=\"button-create-first-event\"\n                >\n                  <Plus className=\"mr-2 h-4 w-4\" />\n                  Create Your First Event\n                </Button>\n              )}\n            </div>\n          ) : (\n            <DndContext\n              sensors={sensors}\n              collisionDetection={closestCenter}\n              onDragStart={handleDragStart}\n              onDragEnd={handleDragEnd}\n            >\n              <div className=\"space-y-6\">\n                {sortedYears.map((year) => {\n                  const yearEvents = groupedEvents[year];\n                  const isExpanded = expandedYears.has(year);\n                  \n                  return (\n                    <Card key={year} data-testid={`card-year-${year}`}>\n                      <CardHeader \n                        className=\"cursor-pointer hover:bg-muted/30 transition-colors\"\n                        onClick={() => toggleYear(year)}\n                      >\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center space-x-3\">\n                            {isExpanded ? (\n                              <ChevronDown className=\"h-5 w-5 text-muted-foreground\" />\n                            ) : (\n                              <ChevronRight className=\"h-5 w-5 text-muted-foreground\" />\n                            )}\n                            <div className=\"flex items-center space-x-2\">\n                              <Calendar className=\"h-5 w-5 text-accent\" />\n                              <CardTitle className=\"text-xl\">{year}</CardTitle>\n                            </div>\n                          </div>\n                          <Badge variant=\"outline\">\n                            {yearEvents.length} event{yearEvents.length !== 1 ? 's' : ''}\n                          </Badge>\n                        </div>\n                      </CardHeader>\n                      \n                      {isExpanded && (\n                        <CardContent className=\"space-y-4\">\n                          <div className=\"relative\">\n                            <div className=\"absolute left-6 top-0 bottom-0 w-px bg-border\"></div>\n                            <SortableContext\n                              items={yearEvents.map(e => e.id)}\n                              strategy={verticalListSortingStrategy}\n                            >\n                              <div className=\"space-y-6\">\n                                {yearEvents.map((event) => (\n                                  <SortableEventCard\n                                    key={event.id}\n                                    event={event}\n                                    onEdit={() => handleEdit(event)}\n                                    onDelete={() => handleDelete(event)}\n                                  />\n                                ))}\n                              </div>\n                            </SortableContext>\n                          </div>\n                        </CardContent>\n                      )}\n                    </Card>\n                  );\n                })}\n              </div>\n              <DragOverlay>\n                {draggedEvent ? (\n                  <Card className=\"shadow-2xl opacity-90\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n                          <Clock className=\"h-5 w-5 text-white\" />\n                        </div>\n                        <div>\n                          <h4 className=\"font-semibold\">{draggedEvent.title}</h4>\n                          {draggedEvent.date && (\n                            <p className=\"text-sm text-muted-foreground\">{draggedEvent.date}</p>\n                          )}\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ) : null}\n              </DragOverlay>\n            </DndContext>\n          )}\n        </div>\n      </main>\n\n      {/* Event Modal */}\n      <Dialog open={showEventModal} onOpenChange={handleCloseModal}>\n        <DialogContent className=\"sm:max-w-lg max-h-[90vh] overflow-y-auto\" data-testid=\"modal-timeline-event\">\n          <DialogHeader>\n            <DialogTitle>\n              {editingEvent ? \"Edit Timeline Event\" : \"Create New Timeline Event\"}\n            </DialogTitle>\n            <DialogDescription>\n              {editingEvent ? \"Update your timeline event.\" : \"Add a new event to your story's chronology.\"}\n            </DialogDescription>\n          </DialogHeader>\n          \n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"title\">Event Title *</Label>\n              <Input\n                id=\"title\"\n                value={formData.title}\n                onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n                placeholder=\"Enter event title\"\n                required\n                data-testid=\"input-event-title\"\n              />\n            </div>\n            \n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"date\">Date/Era</Label>\n                <Input\n                  id=\"date\"\n                  value={formData.date}\n                  onChange={(e) => setFormData({ ...formData, date: e.target.value })}\n                  placeholder=\"e.g., 1485, Age of Dragons\"\n                  data-testid=\"input-event-date\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"importance\">Importance *</Label>\n                <Select value={formData.importance.toString()} onValueChange={(value) => setFormData({ ...formData, importance: parseInt(value) })}>\n                  <SelectTrigger data-testid=\"select-event-importance\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {importanceLevels.map((level) => (\n                      <SelectItem key={level.value} value={level.value.toString()}>\n                        {level.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"description\">Description</Label>\n              <Textarea\n                id=\"description\"\n                value={formData.description}\n                onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                placeholder=\"Describe what happens in this event\"\n                rows={3}\n                data-testid=\"textarea-event-description\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"relatedCharacters\">Related Characters</Label>\n              <Input\n                id=\"relatedCharacters\"\n                value={formData.relatedCharacters}\n                onChange={(e) => setFormData({ ...formData, relatedCharacters: e.target.value })}\n                placeholder=\"Character names separated by commas\"\n                data-testid=\"input-event-characters\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"relatedLocations\">Related Locations</Label>\n              <Input\n                id=\"relatedLocations\"\n                value={formData.relatedLocations}\n                onChange={(e) => setFormData({ ...formData, relatedLocations: e.target.value })}\n                placeholder=\"Location names separated by commas\"\n                data-testid=\"input-event-locations\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"tags\">Tags</Label>\n              <Input\n                id=\"tags\"\n                value={formData.tags}\n                onChange={(e) => setFormData({ ...formData, tags: e.target.value })}\n                placeholder=\"Tags separated by commas\"\n                data-testid=\"input-event-tags\"\n              />\n            </div>\n            \n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={handleCloseModal}\n                data-testid=\"button-cancel-event\"\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\"\n                disabled={createEventMutation.isPending || updateEventMutation.isPending}\n                data-testid=\"button-save-event\"\n              >\n                {createEventMutation.isPending || updateEventMutation.isPending ? \"Saving...\" : (editingEvent ? \"Update Event\" : \"Create Event\")}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":31174},"client/src/pages/worldbuilding.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Sidebar from \"@/components/sidebar\";\nimport { \n  Globe, \n  Plus, \n  Edit, \n  Trash2, \n  Search,\n  MapPin,\n  Mountain,\n  Building,\n  Crown,\n  Scroll,\n  Sparkles\n} from \"lucide-react\";\nimport { Project, WorldbuildingEntry, WorldbuildingDetails } from \"@shared/schema\";\n\nconst entryTypes = [\n  { value: \"location\", label: \"Location\", icon: MapPin, color: \"text-chart-1\" },\n  { value: \"culture\", label: \"Culture\", icon: Crown, color: \"text-chart-2\" },\n  { value: \"organization\", label: \"Organization\", icon: Building, color: \"text-accent\" },\n  { value: \"magic_system\", label: \"Magic System\", icon: Sparkles, color: \"text-chart-5\" },\n  { value: \"technology\", label: \"Technology\", icon: Scroll, color: \"text-chart-4\" },\n  { value: \"history\", label: \"History\", icon: Mountain, color: \"text-destructive\" },\n  { value: \"other\", label: \"Other\", icon: Globe, color: \"text-muted-foreground\" }\n];\n\nexport default function Worldbuilding() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n  const [showEntryModal, setShowEntryModal] = useState(false);\n  const [editingEntry, setEditingEntry] = useState<WorldbuildingEntry | null>(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filterType, setFilterType] = useState(\"all\");\n  const [formData, setFormData] = useState({\n    title: \"\",\n    type: \"\",\n    description: \"\",\n    details: \"\",\n    tags: \"\"\n  });\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: projects = [] } = useQuery<Project[]>({\n    queryKey: ['/api/projects'],\n    enabled: isAuthenticated,\n    retry: false,\n  });\n\n  const { data: entries = [], isLoading: entriesLoading } = useQuery<WorldbuildingEntry[]>({\n    queryKey: ['/api/worldbuilding'],\n    enabled: isAuthenticated && projects.length > 0,\n    queryFn: async () => {\n      if (projects.length > 0) {\n        const response = await fetch(`/api/projects/${projects[0].id}/worldbuilding`, {\n          credentials: \"include\",\n        });\n        if (!response.ok) throw new Error(`${response.status}: ${response.statusText}`);\n        return response.json();\n      }\n      return [];\n    },\n    retry: false,\n  });\n\n  const createEntryMutation = useMutation({\n    mutationFn: async (entryData: any) => {\n      if (projects.length === 0) throw new Error(\"No project available\");\n      await apiRequest(\"POST\", `/api/projects/${projects[0].id}/worldbuilding`, entryData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/worldbuilding'] });\n      setShowEntryModal(false);\n      setFormData({\n        title: \"\",\n        type: \"\",\n        description: \"\",\n        details: \"\",\n        tags: \"\"\n      });\n      toast({\n        title: \"Success\",\n        description: \"Worldbuilding entry created successfully!\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to create entry. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateEntryMutation = useMutation({\n    mutationFn: async (data: { id: string; updates: any }) => {\n      await apiRequest(\"PUT\", `/api/worldbuilding/${data.id}`, data.updates);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/worldbuilding'] });\n      setShowEntryModal(false);\n      setEditingEntry(null);\n      toast({\n        title: \"Success\",\n        description: \"Entry updated successfully!\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update entry. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteEntryMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/worldbuilding/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/worldbuilding'] });\n      toast({\n        title: \"Success\",\n        description: \"Entry deleted successfully!\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete entry. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const submitData = {\n      title: formData.title,\n      type: formData.type,\n      description: formData.description || undefined,\n      details: formData.details ? { content: formData.details } : undefined,\n      tags: formData.tags ? formData.tags.split(',').map(tag => tag.trim()).filter(Boolean) : undefined\n    };\n\n    if (editingEntry) {\n      updateEntryMutation.mutate({\n        id: editingEntry.id,\n        updates: submitData\n      });\n    } else {\n      createEntryMutation.mutate(submitData);\n    }\n  };\n\n  const handleEdit = (entry: WorldbuildingEntry) => {\n    setEditingEntry(entry);\n    setFormData({\n      title: entry.title,\n      type: entry.type,\n      description: entry.description || \"\",\n      details: entry.details && typeof entry.details === 'object' && 'content' in entry.details && typeof entry.details.content === 'string' ? entry.details.content : \"\",\n      tags: entry.tags?.join(', ') || \"\"\n    });\n    setShowEntryModal(true);\n  };\n\n  const handleDelete = (entry: WorldbuildingEntry) => {\n    if (confirm(`Are you sure you want to delete \"${entry.title}\"?`)) {\n      deleteEntryMutation.mutate(entry.id);\n    }\n  };\n\n  const handleCloseModal = () => {\n    setShowEntryModal(false);\n    setEditingEntry(null);\n    setFormData({\n      title: \"\",\n      type: \"\",\n      description: \"\",\n      details: \"\",\n      tags: \"\"\n    });\n  };\n\n  const filteredEntries = entries.filter((entry: WorldbuildingEntry) => {\n    const matchesSearch = entry.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      entry.description?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesType = filterType === \"all\" || entry.type === filterType;\n    return matchesSearch && matchesType;\n  });\n\n  const getTypeInfo = (type: string) => {\n    return entryTypes.find(t => t.value === type) || entryTypes[entryTypes.length - 1];\n  };\n\n  if (!isAuthenticated || isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <Sidebar \n        collapsed={sidebarCollapsed} \n        onToggleCollapse={() => setSidebarCollapsed(!sidebarCollapsed)}\n        currentPath=\"/worldbuilding\"\n      />\n      \n      <main className=\"flex-1 flex flex-col overflow-hidden\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <h1 className=\"text-2xl font-semibold text-card-foreground\" data-testid=\"text-worldbuilding-title\">\n                World Building\n              </h1>\n              <Badge variant=\"secondary\" data-testid=\"badge-entry-count\">\n                {entries.length} entries\n              </Badge>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Select value={filterType} onValueChange={setFilterType}>\n                  <SelectTrigger className=\"w-40\" data-testid=\"select-filter-type\">\n                    <SelectValue placeholder=\"Filter by type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Types</SelectItem>\n                    {entryTypes.map((type) => (\n                      <SelectItem key={type.value} value={type.value}>\n                        {type.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                \n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    placeholder=\"Search entries...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-10 w-64\"\n                    data-testid=\"input-search-entries\"\n                  />\n                </div>\n              </div>\n              \n              <Button \n                onClick={() => setShowEntryModal(true)}\n                data-testid=\"button-add-entry\"\n              >\n                <Plus className=\"mr-2 h-4 w-4\" />\n                Add Entry\n              </Button>\n            </div>\n          </div>\n        </header>\n\n        {/* Worldbuilding Content */}\n        <div className=\"flex-1 overflow-auto p-6\">\n          {entriesLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {[1, 2, 3, 4, 5, 6].map(i => (\n                <Card key={i} className=\"animate-pulse\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\n                    <div className=\"h-3 bg-muted rounded w-1/2 mb-4\"></div>\n                    <div className=\"space-y-2\">\n                      <div className=\"h-3 bg-muted rounded\"></div>\n                      <div className=\"h-3 bg-muted rounded w-5/6\"></div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : filteredEntries.length === 0 ? (\n            <div className=\"text-center py-16\" data-testid=\"empty-entries-state\">\n              <Globe className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-card-foreground mb-2\">\n                {searchTerm || filterType !== \"all\" ? \"No entries found\" : \"No worldbuilding entries yet\"}\n              </h3>\n              <p className=\"text-muted-foreground mb-4\">\n                {searchTerm || filterType !== \"all\"\n                  ? \"Try adjusting your search or filter.\"\n                  : \"Start building your world with locations, cultures, and systems.\"\n                }\n              </p>\n              {!searchTerm && filterType === \"all\" && (\n                <Button \n                  onClick={() => setShowEntryModal(true)}\n                  data-testid=\"button-create-first-entry\"\n                >\n                  <Plus className=\"mr-2 h-4 w-4\" />\n                  Create Your First Entry\n                </Button>\n              )}\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {filteredEntries.map((entry: WorldbuildingEntry) => {\n                const typeInfo = getTypeInfo(entry.type);\n                const IconComponent = typeInfo.icon;\n                \n                return (\n                  <Card key={entry.id} className=\"hover:shadow-lg transition-shadow\" data-testid={`card-entry-${entry.id}`}>\n                    <CardHeader className=\"pb-3\">\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"w-12 h-12 bg-accent/10 rounded-lg flex items-center justify-center\">\n                            <IconComponent className={`h-6 w-6 ${typeInfo.color}`} />\n                          </div>\n                          <div>\n                            <CardTitle className=\"text-lg\" data-testid={`text-entry-title-${entry.id}`}>\n                              {entry.title}\n                            </CardTitle>\n                            <Badge variant=\"outline\" className=\"mt-1\">\n                              {typeInfo.label}\n                            </Badge>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-1\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleEdit(entry)}\n                            data-testid={`button-edit-entry-${entry.id}`}\n                          >\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleDelete(entry)}\n                            data-testid={`button-delete-entry-${entry.id}`}\n                          >\n                            <Trash2 className=\"h-4 w-4 text-destructive\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </CardHeader>\n                    <CardContent className=\"space-y-3\">\n                      {entry.description && (\n                        <div>\n                          <p className=\"text-sm text-muted-foreground line-clamp-3\">\n                            {entry.description}\n                          </p>\n                        </div>\n                      )}\n                      \n                      {entry.details && typeof entry.details === 'object' && 'content' in entry.details && entry.details.content && (\n                        <div>\n                          <h4 className=\"text-sm font-medium text-card-foreground mb-1\">Details</h4>\n                          <p className=\"text-sm text-muted-foreground line-clamp-2\">\n                            {entry.details && typeof entry.details === 'object' && 'content' in entry.details && typeof entry.details.content === 'string' ? entry.details.content : ''}\n                          </p>\n                        </div>\n                      )}\n\n                      {entry.tags && entry.tags.length > 0 && (\n                        <div className=\"flex flex-wrap gap-1\">\n                          {entry.tags.slice(0, 3).map((tag, index) => (\n                            <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                              {tag}\n                            </Badge>\n                          ))}\n                          {entry.tags.length > 3 && (\n                            <Badge variant=\"secondary\" className=\"text-xs\">\n                              +{entry.tags.length - 3} more\n                            </Badge>\n                          )}\n                        </div>\n                      )}\n\n                      <div className=\"pt-2 border-t border-border\">\n                        <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n                          <span>Created {entry.createdAt ? new Date(entry.createdAt).toLocaleDateString() : 'Unknown'}</span>\n                          <span>Updated {entry.updatedAt ? new Date(entry.updatedAt).toLocaleDateString() : 'Unknown'}</span>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n          )}\n        </div>\n      </main>\n\n      {/* Entry Modal */}\n      <Dialog open={showEntryModal} onOpenChange={handleCloseModal}>\n        <DialogContent className=\"sm:max-w-lg max-h-[90vh] overflow-y-auto\" data-testid=\"modal-worldbuilding-entry\">\n          <DialogHeader>\n            <DialogTitle>\n              {editingEntry ? \"Edit World Entry\" : \"Create New World Entry\"}\n            </DialogTitle>\n            <DialogDescription>\n              {editingEntry ? \"Update your worldbuilding entry.\" : \"Add a new element to your world.\"}\n            </DialogDescription>\n          </DialogHeader>\n          \n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"title\">Title *</Label>\n              <Input\n                id=\"title\"\n                value={formData.title}\n                onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n                placeholder=\"Enter entry title\"\n                required\n                data-testid=\"input-entry-title\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"type\">Type *</Label>\n              <Select value={formData.type} onValueChange={(value) => setFormData({ ...formData, type: value })}>\n                <SelectTrigger data-testid=\"select-entry-type\">\n                  <SelectValue placeholder=\"Select entry type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {entryTypes.map((type) => (\n                    <SelectItem key={type.value} value={type.value}>\n                      {type.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"description\">Description</Label>\n              <Textarea\n                id=\"description\"\n                value={formData.description}\n                onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                placeholder=\"Brief description of this world element...\"\n                className=\"resize-none h-20\"\n                data-testid=\"input-entry-description\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"details\">Detailed Information</Label>\n              <Textarea\n                id=\"details\"\n                value={formData.details}\n                onChange={(e) => setFormData({ ...formData, details: e.target.value })}\n                placeholder=\"Detailed information, history, rules, or characteristics...\"\n                className=\"resize-none h-32\"\n                data-testid=\"input-entry-details\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"tags\">Tags</Label>\n              <Input\n                id=\"tags\"\n                value={formData.tags}\n                onChange={(e) => setFormData({ ...formData, tags: e.target.value })}\n                placeholder=\"Enter tags separated by commas\"\n                data-testid=\"input-entry-tags\"\n              />\n              <p className=\"text-xs text-muted-foreground\">\n                Use tags to organize and categorize your entries (e.g., \"capital city, trade hub, ancient\")\n              </p>\n            </div>\n            \n            <div className=\"flex items-center justify-end space-x-3 pt-4 border-t border-border\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={handleCloseModal}\n                disabled={createEntryMutation.isPending || updateEntryMutation.isPending}\n                data-testid=\"button-cancel-entry\"\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={createEntryMutation.isPending || updateEntryMutation.isPending || !formData.title.trim() || !formData.type}\n                data-testid=\"button-save-entry\"\n              >\n                {createEntryMutation.isPending || updateEntryMutation.isPending\n                  ? \"Saving...\" \n                  : editingEntry ? \"Update Entry\" : \"Create Entry\"\n                }\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":22031},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/export-menu.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n  DropdownMenuSeparator,\n  DropdownMenuLabel,\n} from \"@/components/ui/dropdown-menu\";\nimport { Download, FileText, File, Globe, Crown } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { type OnboardingProgress } from \"@shared/schema\";\n\ninterface ExportMenuProps {\n  projectId: string;\n  projectTitle: string;\n  userPlan?: string;\n}\n\nexport default function ExportMenu({ projectId, projectTitle, userPlan = \"starter\" }: ExportMenuProps) {\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  const [isExporting, setIsExporting] = useState(false);\n\n  const { data: onboardingProgress } = useQuery<OnboardingProgress>({\n    queryKey: ['/api/user/onboarding'],\n    enabled: !!user,\n    retry: false,\n  });\n\n  const updateOnboardingMutation = useMutation({\n    mutationFn: async (progress: Partial<OnboardingProgress>) => {\n      await apiRequest(\"PATCH\", \"/api/user/onboarding\", progress);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/user/onboarding'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/user'] });\n    },\n  });\n\n  const handleExport = async (format: string) => {\n    // Check if user has access to advanced formats\n    const advancedFormats = [\"pdf\", \"epub\", \"docx\"];\n    const isProfessionalFeature = advancedFormats.includes(format);\n    const hasAccess = userPlan === \"professional\" || userPlan === \"enterprise\" || userPlan === \"pro\";\n\n    if (isProfessionalFeature && !hasAccess) {\n      toast({\n        title: \"Premium Feature\",\n        description: `${format.toUpperCase()} export is available for Professional plan subscribers. Upgrade to access advanced export formats.`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsExporting(true);\n    \n    try {\n      const url = `/api/projects/${projectId}/export?format=${format}`;\n      \n      // Create a temporary link and trigger download\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = ''; // Let the server set the filename\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n\n      toast({\n        title: \"Export Started\",\n        description: `Your ${format.toUpperCase()} export is being generated and will download shortly.`,\n      });\n\n      if (user && !user.hasCompletedOnboarding && onboardingProgress && !onboardingProgress.steps.tryExport) {\n        updateOnboardingMutation.mutate({\n          steps: { ...onboardingProgress.steps, tryExport: true }\n        });\n      }\n    } catch (error) {\n      console.error(\"Export error:\", error);\n      toast({\n        title: \"Export Failed\",\n        description: \"There was an error exporting your project. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  const exportOptions = [\n    {\n      format: \"json\",\n      label: \"JSON Data\",\n      description: \"Raw project data\",\n      icon: <File className=\"h-4 w-4\" />,\n      isPremium: false,\n    },\n    {\n      format: \"html\",\n      label: \"HTML Document\",\n      description: \"Web-formatted export\",\n      icon: <Globe className=\"h-4 w-4\" />,\n      isPremium: false,\n    },\n    {\n      format: \"pdf\",\n      label: \"PDF Document\",\n      description: \"Professional print format\",\n      icon: <FileText className=\"h-4 w-4\" />,\n      isPremium: true,\n    },\n    {\n      format: \"docx\",\n      label: \"Word Document\",\n      description: \"Microsoft Word format\",\n      icon: <FileText className=\"h-4 w-4\" />,\n      isPremium: true,\n    },\n    {\n      format: \"epub\",\n      label: \"ePub eBook\",\n      description: \"Digital publishing format\",\n      icon: <FileText className=\"h-4 w-4\" />,\n      isPremium: true,\n    },\n  ];\n\n  const hasAccess = userPlan === \"professional\" || userPlan === \"enterprise\" || userPlan === \"pro\";\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button \n          variant=\"outline\" \n          size=\"sm\" \n          disabled={isExporting}\n          data-testid=\"button-export-menu\"\n        >\n          <Download className=\"h-4 w-4 mr-2\" />\n          {isExporting ? \"Exporting...\" : \"Export\"}\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" className=\"w-56\">\n        <DropdownMenuLabel>Export Formats</DropdownMenuLabel>\n        <DropdownMenuSeparator />\n        \n        {exportOptions.filter(option => !option.isPremium).map((option) => (\n          <DropdownMenuItem\n            key={option.format}\n            onClick={() => handleExport(option.format)}\n            className=\"cursor-pointer\"\n            data-testid={`export-${option.format}`}\n          >\n            <div className=\"flex items-center space-x-3\">\n              {option.icon}\n              <div className=\"flex-1\">\n                <div className=\"font-medium\">{option.label}</div>\n                <div className=\"text-xs text-muted-foreground\">{option.description}</div>\n              </div>\n            </div>\n          </DropdownMenuItem>\n        ))}\n        \n        <DropdownMenuSeparator />\n        <DropdownMenuLabel className=\"flex items-center space-x-2\">\n          <Crown className=\"h-4 w-4 text-yellow-500\" />\n          <span>Professional Formats</span>\n        </DropdownMenuLabel>\n        \n        {exportOptions.filter(option => option.isPremium).map((option) => (\n          <DropdownMenuItem\n            key={option.format}\n            onClick={() => handleExport(option.format)}\n            className={`cursor-pointer ${!hasAccess ? 'opacity-50' : ''}`}\n            data-testid={`export-${option.format}`}\n          >\n            <div className=\"flex items-center space-x-3\">\n              {option.icon}\n              <div className=\"flex-1\">\n                <div className=\"font-medium flex items-center space-x-2\">\n                  <span>{option.label}</span>\n                  {!hasAccess && <Crown className=\"h-3 w-3 text-yellow-500\" />}\n                </div>\n                <div className=\"text-xs text-muted-foreground\">{option.description}</div>\n              </div>\n            </div>\n          </DropdownMenuItem>\n        ))}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}","size_bytes":6588},"server/export-utils.ts":{"content":"import htmlPdf from 'html-pdf-node';\nimport archiver from 'archiver';\nimport { Readable } from 'stream';\nimport { ProjectWithCollaborators } from '@shared/schema';\nimport * as cheerio from 'cheerio';\nimport type { Element, AnyNode } from 'domhandler';\nimport { \n  Document, \n  Packer, \n  Paragraph, \n  TextRun, \n  HeadingLevel, \n  AlignmentType,\n  UnderlineType,\n  NumberFormat,\n  convertInchesToTwip,\n  LevelFormat\n} from 'docx';\n\ninterface ExportData {\n  project: {\n    title: string;\n    description: string | null;\n    genre: string | null;\n    targetWordCount?: number | null;\n    currentWordCount?: number | null;\n  };\n  characters: any[];\n  worldbuilding: any[];\n  timeline: any[];\n  documents: any[];\n  exportedAt: string;\n}\n\nexport class ExportGenerator {\n  static async generateHTML(data: ExportData): Promise<string> {\n    const { project, characters, worldbuilding, timeline, documents } = data;\n    \n    return `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>${project.title}</title>\n  <style>\n    body {\n      font-family: 'Times New Roman', serif;\n      line-height: 1.6;\n      max-width: 800px;\n      margin: 0 auto;\n      padding: 40px 20px;\n      color: #333;\n    }\n    h1 {\n      color: #1a1a1a;\n      border-bottom: 2px solid #333;\n      padding-bottom: 10px;\n      margin-bottom: 30px;\n    }\n    h2 {\n      color: #444;\n      margin-top: 40px;\n      margin-bottom: 20px;\n      border-left: 4px solid #007acc;\n      padding-left: 15px;\n    }\n    h3 {\n      color: #666;\n      margin-top: 30px;\n      margin-bottom: 15px;\n    }\n    .metadata {\n      background: #f8f9fa;\n      padding: 20px;\n      border-radius: 8px;\n      margin-bottom: 30px;\n    }\n    .character, .worldbuilding-entry, .timeline-event, .document {\n      background: #fff;\n      border: 1px solid #e0e0e0;\n      border-radius: 6px;\n      padding: 20px;\n      margin-bottom: 20px;\n      box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n    }\n    .character-name, .entry-name, .event-title, .document-title {\n      font-weight: bold;\n      font-size: 1.2em;\n      margin-bottom: 10px;\n      color: #007acc;\n    }\n    .description, .content {\n      margin-bottom: 15px;\n    }\n    .tags {\n      margin-top: 10px;\n    }\n    .tag {\n      display: inline-block;\n      background: #e3f2fd;\n      color: #1976d2;\n      padding: 4px 8px;\n      border-radius: 4px;\n      font-size: 0.9em;\n      margin-right: 8px;\n      margin-bottom: 4px;\n    }\n    .stats {\n      display: flex;\n      gap: 20px;\n      margin-bottom: 20px;\n    }\n    .stat {\n      background: #f0f0f0;\n      padding: 10px;\n      border-radius: 4px;\n      text-align: center;\n    }\n    .document-content {\n      white-space: pre-wrap;\n      font-family: 'Georgia', serif;\n      line-height: 1.8;\n    }\n  </style>\n</head>\n<body>\n  <h1>${project.title}</h1>\n  \n  <div class=\"metadata\">\n    <div class=\"stats\">\n      ${project.currentWordCount !== undefined && project.currentWordCount !== null ? `<div class=\"stat\"><strong>${project.currentWordCount.toLocaleString()}</strong><br>Current Words</div>` : ''}\n      ${project.targetWordCount !== undefined && project.targetWordCount !== null ? `<div class=\"stat\"><strong>${project.targetWordCount.toLocaleString()}</strong><br>Target Words</div>` : ''}\n      <div class=\"stat\"><strong>${characters.length}</strong><br>Characters</div>\n      <div class=\"stat\"><strong>${documents.length}</strong><br>Documents</div>\n    </div>\n    \n    ${project.description ? `<h3>Description</h3><p>${project.description}</p>` : ''}\n    ${project.genre ? `<p><strong>Genre:</strong> ${project.genre}</p>` : ''}\n  </div>\n\n  ${characters.length > 0 ? `\n  <h2>Characters</h2>\n  ${characters.map(char => `\n    <div class=\"character\">\n      <div class=\"character-name\">${char.name}</div>\n      ${char.description ? `<div class=\"description\">${char.description}</div>` : ''}\n      ${char.background ? `<p><strong>Background:</strong> ${char.background}</p>` : ''}\n      ${char.personality ? `<p><strong>Personality:</strong> ${char.personality}</p>` : ''}\n      ${char.appearance ? `<p><strong>Appearance:</strong> ${char.appearance}</p>` : ''}\n      ${char.notes ? `<p><strong>Notes:</strong> ${char.notes}</p>` : ''}\n    </div>\n  `).join('')}\n  ` : ''}\n\n  ${worldbuilding.length > 0 ? `\n  <h2>World Building</h2>\n  ${worldbuilding.map(entry => `\n    <div class=\"worldbuilding-entry\">\n      <div class=\"entry-name\">${entry.name}</div>\n      ${entry.description ? `<div class=\"description\">${entry.description}</div>` : ''}\n      ${entry.category ? `<p><strong>Category:</strong> ${entry.category}</p>` : ''}\n      ${entry.tags && entry.tags.length > 0 ? `\n        <div class=\"tags\">\n          ${entry.tags.map((tag: string) => `<span class=\"tag\">${tag}</span>`).join('')}\n        </div>\n      ` : ''}\n    </div>\n  `).join('')}\n  ` : ''}\n\n  ${timeline.length > 0 ? `\n  <h2>Timeline</h2>\n  ${timeline.map(event => `\n    <div class=\"timeline-event\">\n      <div class=\"event-title\">${event.title}</div>\n      ${event.description ? `<div class=\"description\">${event.description}</div>` : ''}\n      ${event.date ? `<p><strong>Date:</strong> ${event.date}</p>` : ''}\n      ${event.category ? `<p><strong>Category:</strong> ${event.category}</p>` : ''}\n    </div>\n  `).join('')}\n  ` : ''}\n\n  ${documents.length > 0 ? `\n  <h2>Documents</h2>\n  ${documents.map(doc => `\n    <div class=\"document\">\n      <div class=\"document-title\">${doc.title}</div>\n      ${doc.content ? `<div class=\"document-content\">${doc.content}</div>` : ''}\n    </div>\n  `).join('')}\n  ` : ''}\n\n  <div style=\"margin-top: 40px; padding-top: 20px; border-top: 1px solid #ddd; text-align: center; color: #666; font-size: 0.9em;\">\n    Exported from WriteCraft Pro on ${new Date(data.exportedAt).toLocaleDateString()}\n  </div>\n</body>\n</html>`;\n  }\n\n  static async generatePDF(data: ExportData): Promise<Buffer> {\n    const html = await this.generateHTML(data);\n    \n    const options = {\n      format: 'A4',\n      margin: {\n        top: '1in',\n        right: '1in',\n        bottom: '1in',\n        left: '1in'\n      },\n      printBackground: true,\n      preferCSSPageSize: true\n    };\n\n    try {\n      const file = { content: html };\n      const pdfBuffer = await htmlPdf.generatePdf(file, options);\n      return pdfBuffer as Buffer;\n    } catch (error) {\n      console.error('PDF generation error:', error);\n      // Fallback: return HTML as text if PDF generation fails\n      throw new Error('PDF generation failed. Please try again or contact support.');\n    }\n  }\n\n  static async generateEPub(data: ExportData): Promise<Buffer> {\n    const { project, characters, worldbuilding, timeline, documents } = data;\n    \n    return new Promise<Buffer>((resolve, reject) => {\n      const archive = archiver('zip', {\n        zlib: { level: 9 }\n      });\n      \n      const chunks: Buffer[] = [];\n      \n      archive.on('data', (chunk) => {\n        chunks.push(chunk);\n      });\n      \n      archive.on('end', () => {\n        resolve(Buffer.concat(chunks));\n      });\n      \n      archive.on('error', (err) => {\n        reject(err);\n      });\n\n      // Required ePub structure\n      \n      // 1. mimetype file (must be first and uncompressed)\n      archive.append('application/epub+zip', { name: 'mimetype', store: true });\n      \n      // 2. META-INF/container.xml\n      const containerXml = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<container version=\"1.0\" xmlns=\"urn:oasis:names:tc:opendocument:xmlns:container\">\n  <rootfiles>\n    <rootfile full-path=\"OEBPS/content.opf\" media-type=\"application/oebps-package+xml\"/>\n  </rootfiles>\n</container>`;\n      archive.append(containerXml, { name: 'META-INF/container.xml' });\n      \n      // 3. Content.opf (package document)\n      const contentOpf = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<package xmlns=\"http://www.idpf.org/2007/opf\" unique-identifier=\"BookId\" version=\"2.0\">\n  <metadata xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:opf=\"http://www.idpf.org/2007/opf\">\n    <dc:identifier id=\"BookId\">${project.title.replace(/[^a-zA-Z0-9]/g, '')}_${Date.now()}</dc:identifier>\n    <dc:title>${project.title}</dc:title>\n    <dc:creator>WriteCraft Pro Export</dc:creator>\n    <dc:language>en</dc:language>\n    <dc:date>${new Date().toISOString().split('T')[0]}</dc:date>\n    ${project.description ? `<dc:description>${project.description}</dc:description>` : ''}\n    <dc:publisher>WriteCraft Pro</dc:publisher>\n  </metadata>\n  <manifest>\n    <item id=\"ncx\" href=\"toc.ncx\" media-type=\"application/x-dtbncx+xml\"/>\n    <item id=\"stylesheet\" href=\"styles.css\" media-type=\"text/css\"/>\n    <item id=\"overview\" href=\"overview.xhtml\" media-type=\"application/xhtml+xml\"/>\n    ${characters.length > 0 ? '<item id=\"characters\" href=\"characters.xhtml\" media-type=\"application/xhtml+xml\"/>' : ''}\n    ${worldbuilding.length > 0 ? '<item id=\"worldbuilding\" href=\"worldbuilding.xhtml\" media-type=\"application/xhtml+xml\"/>' : ''}\n    ${timeline.length > 0 ? '<item id=\"timeline\" href=\"timeline.xhtml\" media-type=\"application/xhtml+xml\"/>' : ''}\n    ${documents.map((doc, index) => `<item id=\"doc${index}\" href=\"document_${index}.xhtml\" media-type=\"application/xhtml+xml\"/>`).join('\\n    ')}\n  </manifest>\n  <spine toc=\"ncx\">\n    <itemref idref=\"overview\"/>\n    ${characters.length > 0 ? '<itemref idref=\"characters\"/>' : ''}\n    ${worldbuilding.length > 0 ? '<itemref idref=\"worldbuilding\"/>' : ''}\n    ${timeline.length > 0 ? '<itemref idref=\"timeline\"/>' : ''}\n    ${documents.map((doc, index) => `<itemref idref=\"doc${index}\"/>`).join('\\n    ')}\n  </spine>\n</package>`;\n      archive.append(contentOpf, { name: 'OEBPS/content.opf' });\n      \n      // 4. Table of Contents (toc.ncx)\n      const tocNcx = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<ncx xmlns=\"http://www.daisy.org/z3986/2005/ncx/\" version=\"2005-1\">\n  <head>\n    <meta name=\"dtb:uid\" content=\"${project.title.replace(/[^a-zA-Z0-9]/g, '')}_${Date.now()}\"/>\n    <meta name=\"dtb:depth\" content=\"1\"/>\n    <meta name=\"dtb:totalPageCount\" content=\"0\"/>\n    <meta name=\"dtb:maxPageNumber\" content=\"0\"/>\n  </head>\n  <docTitle>\n    <text>${project.title}</text>\n  </docTitle>\n  <navMap>\n    <navPoint id=\"navpoint-1\" playOrder=\"1\">\n      <navLabel><text>Overview</text></navLabel>\n      <content src=\"overview.xhtml\"/>\n    </navPoint>\n    ${characters.length > 0 ? `\n    <navPoint id=\"navpoint-2\" playOrder=\"2\">\n      <navLabel><text>Characters</text></navLabel>\n      <content src=\"characters.xhtml\"/>\n    </navPoint>` : ''}\n    ${worldbuilding.length > 0 ? `\n    <navPoint id=\"navpoint-3\" playOrder=\"3\">\n      <navLabel><text>World Building</text></navLabel>\n      <content src=\"worldbuilding.xhtml\"/>\n    </navPoint>` : ''}\n    ${timeline.length > 0 ? `\n    <navPoint id=\"navpoint-4\" playOrder=\"4\">\n      <navLabel><text>Timeline</text></navLabel>\n      <content src=\"timeline.xhtml\"/>\n    </navPoint>` : ''}\n    ${documents.map((doc, index) => `\n    <navPoint id=\"navpoint-${5 + index}\" playOrder=\"${5 + index}\">\n      <navLabel><text>${doc.title}</text></navLabel>\n      <content src=\"document_${index}.xhtml\"/>\n    </navPoint>`).join('')}\n  </navMap>\n</ncx>`;\n      archive.append(tocNcx, { name: 'OEBPS/toc.ncx' });\n      \n      // 5. CSS Styles\n      const styles = `\nbody {\n  font-family: Georgia, serif;\n  line-height: 1.6;\n  margin: 20px;\n  color: #333;\n}\nh1 {\n  color: #1a1a1a;\n  border-bottom: 2px solid #333;\n  padding-bottom: 10px;\n  margin-bottom: 20px;\n}\nh2 {\n  color: #444;\n  margin-top: 30px;\n  margin-bottom: 15px;\n}\nh3 {\n  color: #666;\n  margin-top: 20px;\n  margin-bottom: 10px;\n}\n.metadata {\n  background: #f8f9fa;\n  padding: 15px;\n  border-radius: 5px;\n  margin-bottom: 20px;\n}\n.character, .entry, .event {\n  border: 1px solid #e0e0e0;\n  border-radius: 5px;\n  padding: 15px;\n  margin-bottom: 15px;\n}\n.name {\n  font-weight: bold;\n  color: #007acc;\n  font-size: 1.1em;\n  margin-bottom: 8px;\n}\n`;\n      archive.append(styles, { name: 'OEBPS/styles.css' });\n      \n      // 6. XHTML Content Files\n      \n      // Overview\n      let overviewContent = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n  <title>${project.title}</title>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\"/>\n</head>\n<body>\n  <h1>${project.title}</h1>\n  ${project.description ? `<p>${project.description}</p>` : ''}\n  ${project.genre ? `<p><strong>Genre:</strong> ${project.genre}</p>` : ''}\n  <div class=\"metadata\">\n    ${project.currentWordCount !== undefined && project.currentWordCount !== null ? `<p><strong>Current Words:</strong> ${project.currentWordCount.toLocaleString()}</p>` : ''}\n    ${project.targetWordCount !== undefined && project.targetWordCount !== null ? `<p><strong>Target Words:</strong> ${project.targetWordCount.toLocaleString()}</p>` : ''}\n    <p><strong>Characters:</strong> ${characters.length}</p>\n    <p><strong>Documents:</strong> ${documents.length}</p>\n  </div>\n</body>\n</html>`;\n      archive.append(overviewContent, { name: 'OEBPS/overview.xhtml' });\n      \n      // Characters\n      if (characters.length > 0) {\n        let charactersContent = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n  <title>Characters</title>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\"/>\n</head>\n<body>\n  <h1>Characters</h1>\n  ${characters.map(char => `\n  <div class=\"character\">\n    <div class=\"name\">${char.name}</div>\n    ${char.description ? `<p>${char.description}</p>` : ''}\n    ${char.background ? `<p><strong>Background:</strong> ${char.background}</p>` : ''}\n    ${char.personality ? `<p><strong>Personality:</strong> ${char.personality}</p>` : ''}\n    ${char.appearance ? `<p><strong>Appearance:</strong> ${char.appearance}</p>` : ''}\n    ${char.notes ? `<p><strong>Notes:</strong> ${char.notes}</p>` : ''}\n  </div>\n  `).join('')}\n</body>\n</html>`;\n        archive.append(charactersContent, { name: 'OEBPS/characters.xhtml' });\n      }\n      \n      // World Building\n      if (worldbuilding.length > 0) {\n        let worldbuildingContent = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n  <title>World Building</title>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\"/>\n</head>\n<body>\n  <h1>World Building</h1>\n  ${worldbuilding.map(entry => `\n  <div class=\"entry\">\n    <div class=\"name\">${entry.name}</div>\n    ${entry.description ? `<p>${entry.description}</p>` : ''}\n    ${entry.category ? `<p><strong>Category:</strong> ${entry.category}</p>` : ''}\n    ${entry.tags && entry.tags.length > 0 ? `<p><strong>Tags:</strong> ${entry.tags.join(', ')}</p>` : ''}\n  </div>\n  `).join('')}\n</body>\n</html>`;\n        archive.append(worldbuildingContent, { name: 'OEBPS/worldbuilding.xhtml' });\n      }\n      \n      // Timeline\n      if (timeline.length > 0) {\n        let timelineContent = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n  <title>Timeline</title>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\"/>\n</head>\n<body>\n  <h1>Timeline</h1>\n  ${timeline.map(event => `\n  <div class=\"event\">\n    <div class=\"name\">${event.title}</div>\n    ${event.description ? `<p>${event.description}</p>` : ''}\n    ${event.date ? `<p><strong>Date:</strong> ${event.date}</p>` : ''}\n    ${event.category ? `<p><strong>Category:</strong> ${event.category}</p>` : ''}\n  </div>\n  `).join('')}\n</body>\n</html>`;\n        archive.append(timelineContent, { name: 'OEBPS/timeline.xhtml' });\n      }\n      \n      // Documents\n      documents.forEach((doc, index) => {\n        const documentContent = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n  <title>${doc.title}</title>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\"/>\n</head>\n<body>\n  <h1>${doc.title}</h1>\n  ${doc.content ? `<div style=\"white-space: pre-wrap;\">${doc.content}</div>` : ''}\n</body>\n</html>`;\n        archive.append(documentContent, { name: `OEBPS/document_${index}.xhtml` });\n      });\n      \n      archive.finalize();\n    });\n  }\n\n  static async generateDOCX(data: ExportData): Promise<Buffer> {\n    const { project, characters, worldbuilding, timeline, documents } = data;\n\n    const parseHTMLToTextRuns = (html: string): TextRun[] => {\n      if (!html) return [];\n      \n      const textRuns: TextRun[] = [];\n      const tempDiv = html;\n      \n      const regex = /<(\\/?)(strong|em|u|s|code|p|br|h[1-6])>|([^<]+)/gi;\n      let match;\n      const stack: string[] = [];\n      let currentText = '';\n      \n      const createRun = (text: string, bold = false, italic = false, underline = false, strike = false, code = false) => {\n        if (!text) return null;\n        return new TextRun({\n          text: text,\n          bold: bold,\n          italics: italic,\n          underline: underline ? { type: UnderlineType.SINGLE } : undefined,\n          strike: strike,\n          font: code ? 'Courier New' : undefined,\n          size: code ? 20 : undefined,\n        });\n      };\n      \n      const flushText = () => {\n        if (currentText) {\n          const bold = stack.includes('strong');\n          const italic = stack.includes('em');\n          const underline = stack.includes('u');\n          const strike = stack.includes('s');\n          const code = stack.includes('code');\n          const run = createRun(currentText, bold, italic, underline, strike, code);\n          if (run) textRuns.push(run);\n          currentText = '';\n        }\n      };\n      \n      while ((match = regex.exec(tempDiv)) !== null) {\n        const [full, isClosing, tag, textContent] = match;\n        \n        if (textContent) {\n          currentText += textContent;\n        } else if (tag) {\n          if (tag === 'br') {\n            flushText();\n            textRuns.push(new TextRun({ text: '', break: 1 }));\n          } else if (tag === 'p' && !isClosing) {\n            flushText();\n          } else if (tag === 'p' && isClosing) {\n            flushText();\n          } else if (!isClosing) {\n            flushText();\n            stack.push(tag);\n          } else {\n            flushText();\n            const lastTag = stack.pop();\n          }\n        }\n      }\n      \n      flushText();\n      \n      if (textRuns.length === 0 && html) {\n        const cleanText = html.replace(/<[^>]*>/g, '');\n        if (cleanText) {\n          textRuns.push(new TextRun({ text: cleanText }));\n        }\n      }\n      \n      return textRuns;\n    };\n\n    const parseHTMLToParagraphs = (html: string): Paragraph[] => {\n      if (!html) return [];\n      \n      const paragraphs: Paragraph[] = [];\n      const $ = cheerio.load(html, { xmlMode: false });\n      \n      const processInlineContent = (element: cheerio.Cheerio<AnyNode>): TextRun[] => {\n        const textRuns: TextRun[] = [];\n        \n        const processNode = (node: cheerio.Cheerio<AnyNode>, formatting: any = {}): void => {\n          node.contents().each((_, child) => {\n            if (child.type === 'text') {\n              const text = $(child).text();\n              if (text) {\n                textRuns.push(new TextRun({\n                  text: text,\n                  ...formatting,\n                }));\n              }\n            } else if (child.type === 'tag') {\n              const tagName = (child as Element).name;\n              const newFormatting = { ...formatting };\n              \n              if (tagName === 'strong' || tagName === 'b') {\n                newFormatting.bold = true;\n              } else if (tagName === 'em' || tagName === 'i') {\n                newFormatting.italics = true;\n              } else if (tagName === 'u') {\n                newFormatting.underline = { type: UnderlineType.SINGLE };\n              } else if (tagName === 's' || tagName === 'strike') {\n                newFormatting.strike = true;\n              } else if (tagName === 'code') {\n                newFormatting.font = 'Courier New';\n                newFormatting.size = 20;\n              } else if (tagName === 'br') {\n                textRuns.push(new TextRun({ text: '', break: 1 }));\n                return;\n              }\n              \n              processNode($(child), newFormatting);\n            }\n          });\n        };\n        \n        processNode(element);\n        return textRuns;\n      };\n      \n      const processBlockElement = (element: Element, level: number = 0, listType: 'bullet' | 'ordered' | null = null): void => {\n        const tagName = element.name;\n        const $element = $(element);\n        \n        if (tagName === 'p') {\n          const textRuns = processInlineContent($element);\n          if (textRuns.length > 0) {\n            paragraphs.push(new Paragraph({\n              children: textRuns,\n              spacing: { after: 200 },\n            }));\n          }\n        } else if (tagName === 'h1' || tagName === 'h2' || tagName === 'h3') {\n          const textRuns = processInlineContent($element);\n          const headingLevel = tagName === 'h1' ? HeadingLevel.HEADING_1 :\n                              tagName === 'h2' ? HeadingLevel.HEADING_2 :\n                              HeadingLevel.HEADING_3;\n          if (textRuns.length > 0) {\n            paragraphs.push(new Paragraph({\n              children: textRuns,\n              heading: headingLevel,\n              spacing: { after: 200 },\n            }));\n          }\n        } else if (tagName === 'ul' || tagName === 'ol') {\n          const currentListType = tagName === 'ul' ? 'bullet' : 'ordered';\n          $element.children('li').each((_, child) => {\n            processBlockElement(child as Element, level, currentListType);\n          });\n        } else if (tagName === 'li') {\n          const textRuns = processInlineContent($element.clone().children('ul, ol').remove().end());\n          if (textRuns.length > 0) {\n            const paragraphOptions: any = {\n              children: textRuns,\n              spacing: { after: 100 },\n              indent: { left: convertInchesToTwip(0.5 * (level + 1)) },\n            };\n            \n            if (listType === 'bullet') {\n              paragraphOptions.bullet = { level: level };\n            } else if (listType === 'ordered') {\n              paragraphOptions.numbering = {\n                reference: 'default-numbering',\n                level: level,\n              };\n            }\n            \n            paragraphs.push(new Paragraph(paragraphOptions));\n          }\n          \n          $element.children('ul, ol').each((_, child) => {\n            processBlockElement(child as Element, level + 1, null);\n          });\n        } else if (tagName === 'blockquote') {\n          $element.children().each((_, child) => {\n            if (child.type === 'tag') {\n              const childElement = child as Element;\n              if (childElement.name === 'p') {\n                const textRuns = processInlineContent($(child));\n                if (textRuns.length > 0) {\n                  paragraphs.push(new Paragraph({\n                    children: textRuns,\n                    indent: { left: convertInchesToTwip(0.5) },\n                    spacing: { after: 200 },\n                    border: {\n                      left: {\n                        color: '999999',\n                        space: 1,\n                        style: 'single',\n                        size: 6,\n                      },\n                    },\n                  }));\n                }\n              } else {\n                processBlockElement(childElement, level, listType);\n              }\n            }\n          });\n          \n          if ($element.children().length === 0) {\n            const textRuns = processInlineContent($element);\n            if (textRuns.length > 0) {\n              paragraphs.push(new Paragraph({\n                children: textRuns,\n                indent: { left: convertInchesToTwip(0.5) },\n                spacing: { after: 200 },\n                border: {\n                  left: {\n                    color: '999999',\n                    space: 1,\n                    style: 'single',\n                    size: 6,\n                  },\n                },\n              }));\n            }\n          }\n        } else if (tagName === 'pre') {\n          const codeElement = $element.find('code');\n          const code = (codeElement.length > 0 ? codeElement.text() : $element.text()).trim();\n          if (code) {\n            const lines = code.split('\\n');\n            lines.forEach((line, index) => {\n              paragraphs.push(new Paragraph({\n                children: [new TextRun({\n                  text: line || ' ',\n                  font: 'Courier New',\n                  size: 20,\n                })],\n                spacing: { after: index === lines.length - 1 ? 200 : 0 },\n                shading: {\n                  type: 'clear',\n                  color: 'auto',\n                  fill: 'F5F5F5',\n                },\n              }));\n            });\n          }\n        } else if (tagName === 'div' || tagName === 'section' || tagName === 'article') {\n          $element.children().each((_, child) => {\n            if (child.type === 'tag') {\n              processBlockElement(child as Element, level, listType);\n            }\n          });\n        } else if (tagName === 'html' || tagName === 'body') {\n          $element.children().each((_, child) => {\n            if (child.type === 'tag') {\n              processBlockElement(child as Element, level, listType);\n            }\n          });\n        }\n      };\n      \n      if ($('body').length) {\n        $('body').children().each((_, node) => {\n          if (node.type === 'tag') {\n            processBlockElement(node as Element, 0, null);\n          }\n        });\n      } else {\n        $.root().children().each((_, node) => {\n          if (node.type === 'tag') {\n            processBlockElement(node as Element, 0, null);\n          }\n        });\n      }\n      \n      if (paragraphs.length === 0 && html) {\n        const cleanText = $.text().trim();\n        if (cleanText) {\n          paragraphs.push(new Paragraph({\n            children: [new TextRun({ text: cleanText })],\n            spacing: { after: 200 },\n          }));\n        }\n      }\n      \n      return paragraphs;\n    };\n\n    const sections: Paragraph[] = [];\n\n    sections.push(\n      new Paragraph({\n        text: project.title,\n        heading: HeadingLevel.TITLE,\n        alignment: AlignmentType.CENTER,\n        spacing: { after: 400 },\n      })\n    );\n\n    if (project.description || project.genre || project.currentWordCount || project.targetWordCount) {\n      sections.push(\n        new Paragraph({\n          text: 'Project Information',\n          heading: HeadingLevel.HEADING_1,\n          spacing: { before: 400, after: 200 },\n        })\n      );\n\n      if (project.description) {\n        sections.push(\n          new Paragraph({\n            children: [\n              new TextRun({ text: 'Description: ', bold: true }),\n              new TextRun({ text: project.description }),\n            ],\n            spacing: { after: 200 },\n          })\n        );\n      }\n\n      if (project.genre) {\n        sections.push(\n          new Paragraph({\n            children: [\n              new TextRun({ text: 'Genre: ', bold: true }),\n              new TextRun({ text: project.genre }),\n            ],\n            spacing: { after: 200 },\n          })\n        );\n      }\n\n      if (project.currentWordCount !== undefined && project.currentWordCount !== null) {\n        sections.push(\n          new Paragraph({\n            children: [\n              new TextRun({ text: 'Current Word Count: ', bold: true }),\n              new TextRun({ text: project.currentWordCount.toLocaleString() }),\n            ],\n            spacing: { after: 200 },\n          })\n        );\n      }\n\n      if (project.targetWordCount !== undefined && project.targetWordCount !== null) {\n        sections.push(\n          new Paragraph({\n            children: [\n              new TextRun({ text: 'Target Word Count: ', bold: true }),\n              new TextRun({ text: project.targetWordCount.toLocaleString() }),\n            ],\n            spacing: { after: 200 },\n          })\n        );\n      }\n    }\n\n    if (characters.length > 0) {\n      sections.push(\n        new Paragraph({\n          text: 'Characters',\n          heading: HeadingLevel.HEADING_1,\n          spacing: { before: 600, after: 300 },\n        })\n      );\n\n      for (const char of characters) {\n        sections.push(\n          new Paragraph({\n            text: char.name,\n            heading: HeadingLevel.HEADING_2,\n            spacing: { before: 400, after: 200 },\n          })\n        );\n\n        if (char.description) {\n          sections.push(\n            new Paragraph({\n              children: [\n                new TextRun({ text: 'Description: ', bold: true }),\n                new TextRun({ text: char.description }),\n              ],\n              spacing: { after: 200 },\n            })\n          );\n        }\n\n        if (char.background) {\n          sections.push(\n            new Paragraph({\n              children: [\n                new TextRun({ text: 'Background: ', bold: true }),\n                new TextRun({ text: char.background }),\n              ],\n              spacing: { after: 200 },\n            })\n          );\n        }\n\n        if (char.personality) {\n          sections.push(\n            new Paragraph({\n              children: [\n                new TextRun({ text: 'Personality: ', bold: true }),\n                new TextRun({ text: char.personality }),\n              ],\n              spacing: { after: 200 },\n            })\n          );\n        }\n\n        if (char.appearance) {\n          sections.push(\n            new Paragraph({\n              children: [\n                new TextRun({ text: 'Appearance: ', bold: true }),\n                new TextRun({ text: char.appearance }),\n              ],\n              spacing: { after: 200 },\n            })\n          );\n        }\n\n        if (char.notes) {\n          sections.push(\n            new Paragraph({\n              children: [\n                new TextRun({ text: 'Notes: ', bold: true }),\n                new TextRun({ text: char.notes }),\n              ],\n              spacing: { after: 200 },\n            })\n          );\n        }\n      }\n    }\n\n    if (worldbuilding.length > 0) {\n      sections.push(\n        new Paragraph({\n          text: 'World Building',\n          heading: HeadingLevel.HEADING_1,\n          spacing: { before: 600, after: 300 },\n        })\n      );\n\n      for (const entry of worldbuilding) {\n        sections.push(\n          new Paragraph({\n            text: entry.name,\n            heading: HeadingLevel.HEADING_2,\n            spacing: { before: 400, after: 200 },\n          })\n        );\n\n        if (entry.description) {\n          sections.push(\n            new Paragraph({\n              children: [\n                new TextRun({ text: 'Description: ', bold: true }),\n                new TextRun({ text: entry.description }),\n              ],\n              spacing: { after: 200 },\n            })\n          );\n        }\n\n        if (entry.category) {\n          sections.push(\n            new Paragraph({\n              children: [\n                new TextRun({ text: 'Category: ', bold: true }),\n                new TextRun({ text: entry.category }),\n              ],\n              spacing: { after: 200 },\n            })\n          );\n        }\n\n        if (entry.tags && entry.tags.length > 0) {\n          sections.push(\n            new Paragraph({\n              children: [\n                new TextRun({ text: 'Tags: ', bold: true }),\n                new TextRun({ text: entry.tags.join(', ') }),\n              ],\n              spacing: { after: 200 },\n            })\n          );\n        }\n      }\n    }\n\n    if (timeline.length > 0) {\n      sections.push(\n        new Paragraph({\n          text: 'Timeline',\n          heading: HeadingLevel.HEADING_1,\n          spacing: { before: 600, after: 300 },\n        })\n      );\n\n      for (const event of timeline) {\n        sections.push(\n          new Paragraph({\n            text: event.title,\n            heading: HeadingLevel.HEADING_2,\n            spacing: { before: 400, after: 200 },\n          })\n        );\n\n        if (event.description) {\n          sections.push(\n            new Paragraph({\n              children: [\n                new TextRun({ text: 'Description: ', bold: true }),\n                new TextRun({ text: event.description }),\n              ],\n              spacing: { after: 200 },\n            })\n          );\n        }\n\n        if (event.date) {\n          sections.push(\n            new Paragraph({\n              children: [\n                new TextRun({ text: 'Date: ', bold: true }),\n                new TextRun({ text: event.date }),\n              ],\n              spacing: { after: 200 },\n            })\n          );\n        }\n\n        if (event.category) {\n          sections.push(\n            new Paragraph({\n              children: [\n                new TextRun({ text: 'Category: ', bold: true }),\n                new TextRun({ text: event.category }),\n              ],\n              spacing: { after: 200 },\n            })\n          );\n        }\n      }\n    }\n\n    if (documents.length > 0) {\n      sections.push(\n        new Paragraph({\n          text: 'Documents',\n          heading: HeadingLevel.HEADING_1,\n          spacing: { before: 600, after: 300 },\n        })\n      );\n\n      for (const doc of documents) {\n        sections.push(\n          new Paragraph({\n            text: doc.title,\n            heading: HeadingLevel.HEADING_2,\n            spacing: { before: 400, after: 200 },\n          })\n        );\n\n        if (doc.content) {\n          const contentParagraphs = parseHTMLToParagraphs(doc.content);\n          sections.push(...contentParagraphs);\n        }\n      }\n    }\n\n    sections.push(\n      new Paragraph({\n        children: [\n          new TextRun({\n            text: `Exported from WriteCraft Pro on ${new Date(data.exportedAt).toLocaleDateString()}`,\n            italics: true,\n          })\n        ],\n        alignment: AlignmentType.CENTER,\n        spacing: { before: 600 },\n      })\n    );\n\n    const docx = new Document({\n      numbering: {\n        config: [\n          {\n            reference: 'default-numbering',\n            levels: [\n              {\n                level: 0,\n                format: LevelFormat.DECIMAL,\n                text: '%1.',\n                alignment: AlignmentType.LEFT,\n                style: {\n                  paragraph: {\n                    indent: { left: convertInchesToTwip(0.5), hanging: convertInchesToTwip(0.25) },\n                  },\n                },\n              },\n              {\n                level: 1,\n                format: LevelFormat.DECIMAL,\n                text: '%2.',\n                alignment: AlignmentType.LEFT,\n                style: {\n                  paragraph: {\n                    indent: { left: convertInchesToTwip(1.0), hanging: convertInchesToTwip(0.25) },\n                  },\n                },\n              },\n              {\n                level: 2,\n                format: LevelFormat.DECIMAL,\n                text: '%3.',\n                alignment: AlignmentType.LEFT,\n                style: {\n                  paragraph: {\n                    indent: { left: convertInchesToTwip(1.5), hanging: convertInchesToTwip(0.25) },\n                  },\n                },\n              },\n            ],\n          },\n        ],\n      },\n      sections: [{\n        properties: {\n          page: {\n            margin: {\n              top: convertInchesToTwip(1),\n              right: convertInchesToTwip(1),\n              bottom: convertInchesToTwip(1),\n              left: convertInchesToTwip(1),\n            },\n          },\n        },\n        children: sections,\n      }],\n    });\n\n    const buffer = await Packer.toBuffer(docx);\n    return buffer;\n  }\n}","size_bytes":36356},"client/src/pages/analytics.tsx":{"content":"import { useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useParams, useLocation } from 'wouter';\nimport { apiRequest } from '@/lib/queryClient';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Progress } from '@/components/ui/progress';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { \n  BarChart3, \n  TrendingUp, \n  Users, \n  Brain, \n  Clock, \n  Target,\n  Calendar,\n  Activity,\n  FileText,\n  PenTool,\n  ArrowLeft,\n  Crown,\n  Zap,\n  DollarSign,\n  TrendingDown\n} from 'lucide-react';\nimport {\n  LineChart,\n  Line,\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  PieChart,\n  Pie,\n  Cell,\n  ResponsiveContainer,\n  Area,\n  AreaChart\n} from 'recharts';\nimport { formatDistanceToNow } from 'date-fns';\nimport { useAuth } from '@/hooks/useAuth';\nimport { type OnboardingProgress } from '@shared/schema';\n\ninterface ProjectAnalytics {\n  overview: {\n    totalProjects: number;\n    totalDocuments: number;\n    totalWordCount: number;\n    totalCharacters: number;\n    totalWorldbuildingEntries: number;\n    totalTimelineEvents: number;\n    aiGenerationsCount: number;\n  };\n  writingProgress: {\n    daily: Array<{ date: string; words: number; sessions: number }>;\n    weekly: Array<{ week: string; words: number; sessions: number }>;\n    monthly: Array<{ month: string; words: number; sessions: number }>;\n    streak: {\n      currentStreak: number;\n      longestStreak: number;\n      lastActiveDate: string;\n    };\n    weeklyStats: {\n      totalWords: number;\n      averageDaily: number;\n      mostProductiveDay: string;\n    };\n    monthlyStats: {\n      totalWords: number;\n      averageDaily: number;\n    };\n  };\n  aiUsage: {\n    totalGenerations: number;\n    byPersona: Array<{ persona: string; count: number }>;\n    recent: Array<{\n      id: string;\n      persona: string;\n      prompt: string;\n      createdAt: string;\n      metadata?: any;\n    }>;\n    tokenUsageOverTime?: Array<{ date: string; tokens: number; cost: number }>;\n    totalTokensUsed?: number;\n    estimatedCost?: number;\n  };\n  collaboration: {\n    totalCollaborators: number;\n    activeCollaborators: number;\n    recentActivity: Array<{\n      id: string;\n      userName: string;\n      action: string;\n      entityType: string;\n      createdAt: string;\n    }>;\n  };\n  productivity: {\n    averageSessionDuration: number;\n    totalWritingTime: number;\n    mostProductiveHour: number;\n    consistencyScore: number;\n  };\n}\n\nconst COLORS = ['#3b82f6', '#8b5cf6', '#06b6d4', '#10b981', '#f59e0b', '#ef4444'];\n\nconst personaIcons = {\n  muse: '✨',\n  editor: '✏️',\n  coach: '🎯'\n};\n\nexport default function AnalyticsPage() {\n  const { id: projectId } = useParams();\n  const [, setLocation] = useLocation();\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n\n  const { data: analytics, isLoading, error } = useQuery<ProjectAnalytics>({\n    queryKey: ['/api/projects', projectId, 'analytics'],\n    enabled: !!projectId\n  });\n\n  const { data: onboardingProgress } = useQuery<OnboardingProgress>({\n    queryKey: ['/api/user/onboarding'],\n    enabled: !!user,\n    retry: false,\n  });\n\n  const updateOnboardingMutation = useMutation({\n    mutationFn: async (progress: Partial<OnboardingProgress>) => {\n      await apiRequest(\"PATCH\", \"/api/user/onboarding\", progress);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/user/onboarding'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/user'] });\n    },\n  });\n\n  useEffect(() => {\n    if (user && !user.hasCompletedOnboarding && onboardingProgress && !onboardingProgress.steps.viewAnalytics) {\n      updateOnboardingMutation.mutate({\n        steps: { ...onboardingProgress.steps, viewAnalytics: true }\n      });\n    }\n  }, [user, onboardingProgress]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 dark:from-slate-900 dark:to-slate-800\">\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"animate-pulse space-y-6\">\n            <div className=\"h-8 bg-slate-200 dark:bg-slate-700 rounded w-1/3\"></div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              {Array.from({ length: 4 }).map((_, i) => (\n                <div key={i} className=\"h-32 bg-slate-200 dark:bg-slate-700 rounded-lg\"></div>\n              ))}\n            </div>\n            <div className=\"h-96 bg-slate-200 dark:bg-slate-700 rounded-lg\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !analytics) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 dark:from-slate-900 dark:to-slate-800\">\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"text-center py-12\">\n            <h2 className=\"text-2xl font-bold text-slate-900 dark:text-slate-100 mb-4\">\n              Analytics Unavailable\n            </h2>\n            <p className=\"text-slate-600 dark:text-slate-400 mb-8\">\n              Unable to load analytics data. Please try again or ensure you have access to this project.\n            </p>\n            <Button onClick={() => setLocation('/')} className=\"inline-flex items-center gap-2\">\n              <ArrowLeft className=\"h-4 w-4\" />\n              Back to Dashboard\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const isPremium = user?.subscriptionPlan === 'professional' || user?.subscriptionPlan === 'enterprise';\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 dark:from-slate-900 dark:to-slate-800\">\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-8\">\n          <div className=\"flex items-center gap-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setLocation(`/projects/${projectId}`)}\n              className=\"text-slate-600 dark:text-slate-400 hover:text-slate-900 dark:hover:text-slate-100\"\n              data-testid=\"button-back-project\"\n            >\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to Project\n            </Button>\n            <div>\n              <h1 className=\"text-3xl font-bold text-slate-900 dark:text-slate-100 flex items-center gap-3\">\n                <BarChart3 className=\"h-8 w-8 text-blue-600\" />\n                Project Analytics\n              </h1>\n              <p className=\"text-slate-600 dark:text-slate-400\">\n                Comprehensive insights into your writing progress and collaboration\n              </p>\n            </div>\n          </div>\n          {!isPremium && (\n            <Badge variant=\"secondary\" className=\"flex items-center gap-1\">\n              <Crown className=\"h-3 w-3\" />\n              Premium Feature\n            </Badge>\n          )}\n        </div>\n\n        {/* Overview Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"bg-white/80 dark:bg-slate-800/80 backdrop-blur border-blue-200 dark:border-blue-800\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-slate-600 dark:text-slate-400\">\n                Total Words\n              </CardTitle>\n              <PenTool className=\"h-4 w-4 text-blue-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-slate-900 dark:text-slate-100\">\n                {analytics.overview.totalWordCount.toLocaleString()}\n              </div>\n              <p className=\"text-xs text-slate-600 dark:text-slate-400\">\n                Across {analytics.overview.totalDocuments} documents\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white/80 dark:bg-slate-800/80 backdrop-blur border-purple-200 dark:border-purple-800\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-slate-600 dark:text-slate-400\">\n                AI Generations\n              </CardTitle>\n              <Brain className=\"h-4 w-4 text-purple-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-slate-900 dark:text-slate-100\">\n                {analytics.aiUsage.totalGenerations}\n              </div>\n              <p className=\"text-xs text-slate-600 dark:text-slate-400\">\n                AI-powered assistance\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white/80 dark:bg-slate-800/80 backdrop-blur border-green-200 dark:border-green-800\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-slate-600 dark:text-slate-400\">\n                Collaborators\n              </CardTitle>\n              <Users className=\"h-4 w-4 text-green-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-slate-900 dark:text-slate-100\">\n                {analytics.collaboration.totalCollaborators}\n              </div>\n              <p className=\"text-xs text-slate-600 dark:text-slate-400\">\n                {analytics.collaboration.activeCollaborators} active this week\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white/80 dark:bg-slate-800/80 backdrop-blur border-orange-200 dark:border-orange-800\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-slate-600 dark:text-slate-400\">\n                Consistency\n              </CardTitle>\n              <Target className=\"h-4 w-4 text-orange-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-slate-900 dark:text-slate-100\">\n                {analytics.productivity.consistencyScore}%\n              </div>\n              <p className=\"text-xs text-slate-600 dark:text-slate-400\">\n                Writing days this month\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Analytics */}\n        <Tabs defaultValue=\"progress\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-4 bg-white/50 dark:bg-slate-800/50 backdrop-blur\">\n            <TabsTrigger value=\"progress\" className=\"flex items-center gap-2\" data-testid=\"tab-progress\">\n              <TrendingUp className=\"h-4 w-4\" />\n              Progress\n            </TabsTrigger>\n            <TabsTrigger value=\"ai\" className=\"flex items-center gap-2\" data-testid=\"tab-ai\">\n              <Brain className=\"h-4 w-4\" />\n              AI Usage\n            </TabsTrigger>\n            <TabsTrigger value=\"collaboration\" className=\"flex items-center gap-2\" data-testid=\"tab-collaboration\">\n              <Users className=\"h-4 w-4\" />\n              Team\n            </TabsTrigger>\n            <TabsTrigger value=\"productivity\" className=\"flex items-center gap-2\" data-testid=\"tab-productivity\">\n              <Clock className=\"h-4 w-4\" />\n              Productivity\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"progress\" className=\"space-y-6\">\n            {/* Writing Streaks */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <Card className=\"bg-gradient-to-br from-orange-50 to-red-50 dark:from-orange-950/20 dark:to-red-950/20 backdrop-blur border-orange-200 dark:border-orange-800\">\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium text-slate-700 dark:text-slate-300\">\n                    Current Streak\n                  </CardTitle>\n                  <div className=\"text-2xl\">🔥</div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-3xl font-bold text-orange-600 dark:text-orange-400\" data-testid=\"text-current-streak\">\n                    {analytics.writingProgress.streak.currentStreak} days\n                  </div>\n                  <p className=\"text-xs text-slate-600 dark:text-slate-400 mt-1\">\n                    Keep the momentum going!\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-gradient-to-br from-purple-50 to-pink-50 dark:from-purple-950/20 dark:to-pink-950/20 backdrop-blur border-purple-200 dark:border-purple-800\">\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium text-slate-700 dark:text-slate-300\">\n                    Longest Streak\n                  </CardTitle>\n                  <div className=\"text-2xl\">🏆</div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-3xl font-bold text-purple-600 dark:text-purple-400\" data-testid=\"text-longest-streak\">\n                    {analytics.writingProgress.streak.longestStreak} days\n                  </div>\n                  <p className=\"text-xs text-slate-600 dark:text-slate-400 mt-1\">\n                    Personal best record\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-gradient-to-br from-blue-50 to-cyan-50 dark:from-blue-950/20 dark:to-cyan-950/20 backdrop-blur border-blue-200 dark:border-blue-800\">\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium text-slate-700 dark:text-slate-300\">\n                    Last Active\n                  </CardTitle>\n                  <Calendar className=\"h-4 w-4 text-blue-600\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-xl font-bold text-blue-600 dark:text-blue-400\" data-testid=\"text-last-active\">\n                    {analytics.writingProgress.streak.lastActiveDate || 'N/A'}\n                  </div>\n                  <p className=\"text-xs text-slate-600 dark:text-slate-400 mt-1\">\n                    Most recent writing session\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Weekly & Monthly KPI Cards */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              <Card className=\"bg-white/80 dark:bg-slate-800/80 backdrop-blur border-green-200 dark:border-green-800\">\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium text-slate-600 dark:text-slate-400\">\n                    Words This Week\n                  </CardTitle>\n                  <PenTool className=\"h-4 w-4 text-green-600\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-slate-900 dark:text-slate-100\" data-testid=\"text-weekly-words\">\n                    {analytics.writingProgress.weeklyStats.totalWords.toLocaleString()}\n                  </div>\n                  <p className=\"text-xs text-slate-600 dark:text-slate-400\">\n                    Last 7 days\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-white/80 dark:bg-slate-800/80 backdrop-blur border-blue-200 dark:border-blue-800\">\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium text-slate-600 dark:text-slate-400\">\n                    Daily Average (Week)\n                  </CardTitle>\n                  <TrendingUp className=\"h-4 w-4 text-blue-600\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-slate-900 dark:text-slate-100\" data-testid=\"text-weekly-average\">\n                    {analytics.writingProgress.weeklyStats.averageDaily.toLocaleString()}\n                  </div>\n                  <p className=\"text-xs text-slate-600 dark:text-slate-400\">\n                    Words per day\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-white/80 dark:bg-slate-800/80 backdrop-blur border-purple-200 dark:border-purple-800\">\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium text-slate-600 dark:text-slate-400\">\n                    Most Productive Day\n                  </CardTitle>\n                  <Zap className=\"h-4 w-4 text-purple-600\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-xl font-bold text-slate-900 dark:text-slate-100\" data-testid=\"text-productive-day\">\n                    {analytics.writingProgress.weeklyStats.mostProductiveDay}\n                  </div>\n                  <p className=\"text-xs text-slate-600 dark:text-slate-400\">\n                    This week\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-white/80 dark:bg-slate-800/80 backdrop-blur border-orange-200 dark:border-orange-800\">\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium text-slate-600 dark:text-slate-400\">\n                    Monthly Average\n                  </CardTitle>\n                  <Activity className=\"h-4 w-4 text-orange-600\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-slate-900 dark:text-slate-100\" data-testid=\"text-monthly-average\">\n                    {analytics.writingProgress.monthlyStats.averageDaily.toLocaleString()}\n                  </div>\n                  <p className=\"text-xs text-slate-600 dark:text-slate-400\">\n                    Words per day (30 days)\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Writing Progress Charts */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card className=\"bg-white/80 dark:bg-slate-800/80 backdrop-blur\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Calendar className=\"h-5 w-5 text-blue-600\" />\n                    Daily Writing Progress\n                  </CardTitle>\n                  <CardDescription>\n                    Words written per day over the last 30 days\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <ResponsiveContainer width=\"100%\" height={300}>\n                    <AreaChart data={analytics.writingProgress.daily}>\n                      <CartesianGrid strokeDasharray=\"3 3\" className=\"opacity-30\" />\n                      <XAxis \n                        dataKey=\"date\" \n                        className=\"text-xs\"\n                        tick={{ fontSize: 12 }}\n                      />\n                      <YAxis className=\"text-xs\" tick={{ fontSize: 12 }} />\n                      <Tooltip \n                        contentStyle={{ \n                          backgroundColor: 'rgba(255, 255, 255, 0.95)',\n                          border: '1px solid #e2e8f0',\n                          borderRadius: '8px'\n                        }}\n                      />\n                      <Area \n                        type=\"monotone\" \n                        dataKey=\"words\" \n                        stroke=\"#3b82f6\" \n                        fill=\"#3b82f6\" \n                        fillOpacity={0.3}\n                        strokeWidth={2}\n                      />\n                    </AreaChart>\n                  </ResponsiveContainer>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-white/80 dark:bg-slate-800/80 backdrop-blur\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Activity className=\"h-5 w-5 text-green-600\" />\n                    Weekly Overview\n                  </CardTitle>\n                  <CardDescription>\n                    Writing sessions and word count by week\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <ResponsiveContainer width=\"100%\" height={300}>\n                    <BarChart data={analytics.writingProgress.weekly}>\n                      <CartesianGrid strokeDasharray=\"3 3\" className=\"opacity-30\" />\n                      <XAxis \n                        dataKey=\"week\" \n                        className=\"text-xs\"\n                        tick={{ fontSize: 12 }}\n                      />\n                      <YAxis className=\"text-xs\" tick={{ fontSize: 12 }} />\n                      <Tooltip \n                        contentStyle={{ \n                          backgroundColor: 'rgba(255, 255, 255, 0.95)',\n                          border: '1px solid #e2e8f0',\n                          borderRadius: '8px'\n                        }}\n                      />\n                      <Bar dataKey=\"words\" fill=\"#10b981\" />\n                      <Bar dataKey=\"sessions\" fill=\"#3b82f6\" />\n                    </BarChart>\n                  </ResponsiveContainer>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"ai\" className=\"space-y-6\">\n            {/* Token Usage & Cost Overview Cards */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <Card className=\"bg-white/80 dark:bg-slate-800/80 backdrop-blur border-purple-200 dark:border-purple-800\">\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium text-slate-600 dark:text-slate-400\">\n                    Total Tokens Used\n                  </CardTitle>\n                  <Zap className=\"h-4 w-4 text-purple-600\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-slate-900 dark:text-slate-100\" data-testid=\"text-total-tokens\">\n                    {analytics.aiUsage.totalTokensUsed?.toLocaleString() || '0'}\n                  </div>\n                  <p className=\"text-xs text-slate-600 dark:text-slate-400\">\n                    Across all AI generations\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-white/80 dark:bg-slate-800/80 backdrop-blur border-green-200 dark:border-green-800\">\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium text-slate-600 dark:text-slate-400\">\n                    Estimated Cost\n                  </CardTitle>\n                  <DollarSign className=\"h-4 w-4 text-green-600\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-slate-900 dark:text-slate-100\" data-testid=\"text-estimated-cost\">\n                    ${(analytics.aiUsage.estimatedCost || 0).toFixed(3)}\n                  </div>\n                  <p className=\"text-xs text-slate-600 dark:text-slate-400\">\n                    Based on current token usage\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Token Usage Over Time */}\n              {analytics.aiUsage.tokenUsageOverTime && analytics.aiUsage.tokenUsageOverTime.length > 0 && (\n                <Card className=\"bg-white/80 dark:bg-slate-800/80 backdrop-blur\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <TrendingDown className=\"h-5 w-5 text-blue-600\" />\n                      Token Usage Trend\n                    </CardTitle>\n                    <CardDescription>\n                      Daily token consumption over the last 30 days\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <ResponsiveContainer width=\"100%\" height={250}>\n                      <LineChart data={analytics.aiUsage.tokenUsageOverTime}>\n                        <CartesianGrid strokeDasharray=\"3 3\" className=\"opacity-30\" />\n                        <XAxis \n                          dataKey=\"date\" \n                          className=\"text-xs\"\n                          tick={{ fontSize: 12 }}\n                        />\n                        <YAxis className=\"text-xs\" tick={{ fontSize: 12 }} />\n                        <Tooltip \n                          contentStyle={{ \n                            backgroundColor: 'rgba(255, 255, 255, 0.95)',\n                            border: '1px solid #e2e8f0',\n                            borderRadius: '8px'\n                          }}\n                        />\n                        <Line \n                          type=\"monotone\" \n                          dataKey=\"tokens\" \n                          stroke=\"#8b5cf6\" \n                          strokeWidth={2}\n                          dot={{ fill: '#8b5cf6' }}\n                        />\n                      </LineChart>\n                    </ResponsiveContainer>\n                  </CardContent>\n                </Card>\n              )}\n\n              {/* AI Usage by Persona */}\n              <Card className=\"bg-white/80 dark:bg-slate-800/80 backdrop-blur\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Brain className=\"h-5 w-5 text-purple-600\" />\n                    AI Persona Usage\n                  </CardTitle>\n                  <CardDescription>\n                    Which AI assistants you use most\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <ResponsiveContainer width=\"100%\" height={250}>\n                    <PieChart>\n                      <Pie\n                        data={analytics.aiUsage.byPersona}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        innerRadius={60}\n                        outerRadius={100}\n                        paddingAngle={5}\n                        dataKey=\"count\"\n                        nameKey=\"persona\"\n                      >\n                        {analytics.aiUsage.byPersona.map((entry, index) => (\n                          <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                        ))}\n                      </Pie>\n                      <Tooltip />\n                    </PieChart>\n                  </ResponsiveContainer>\n                  <div className=\"flex justify-center gap-4 mt-4\">\n                    {analytics.aiUsage.byPersona.map((entry, index) => (\n                      <div key={entry.persona} className=\"flex items-center gap-2\" data-testid={`persona-${entry.persona}`}>\n                        <div \n                          className=\"w-3 h-3 rounded-full\"\n                          style={{ backgroundColor: COLORS[index % COLORS.length] }}\n                        />\n                        <span className=\"text-sm capitalize\">{entry.persona}</span>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Recent AI Generations */}\n              <Card className=\"bg-white/80 dark:bg-slate-800/80 backdrop-blur\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Zap className=\"h-5 w-5 text-yellow-600\" />\n                    Recent AI Activity\n                  </CardTitle>\n                  <CardDescription>\n                    Latest AI-generated content with token usage\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <ScrollArea className=\"h-[250px]\">\n                    <div className=\"space-y-3\">\n                      {analytics.aiUsage.recent.map((generation) => {\n                        const tokens = generation.metadata?.tokens_in + generation.metadata?.tokens_out || 0;\n                        const cost = (tokens / 1000) * 0.002;\n                        \n                        return (\n                          <div key={generation.id} className=\"p-3 bg-slate-50 dark:bg-slate-700/50 rounded-lg\" data-testid={`generation-${generation.id}`}>\n                            <div className=\"flex items-center justify-between mb-2\">\n                              <div className=\"flex items-center gap-2\">\n                                <span className=\"text-lg\">\n                                  {personaIcons[generation.persona as keyof typeof personaIcons]}\n                                </span>\n                                <Badge variant=\"outline\" className=\"text-xs capitalize\">\n                                  {generation.persona}\n                                </Badge>\n                                {tokens > 0 && (\n                                  <Badge variant=\"secondary\" className=\"text-xs\">\n                                    {tokens.toLocaleString()} tokens\n                                  </Badge>\n                                )}\n                              </div>\n                              <span className=\"text-xs text-slate-500\">\n                                {formatDistanceToNow(new Date(generation.createdAt), { addSuffix: true })}\n                              </span>\n                            </div>\n                            <p className=\"text-sm text-slate-600 dark:text-slate-400 truncate\">\n                              {generation.prompt}\n                            </p>\n                            {cost > 0 && (\n                              <p className=\"text-xs text-green-600 dark:text-green-400 mt-1\">\n                                ~${cost.toFixed(4)} cost\n                              </p>\n                            )}\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </ScrollArea>\n                </CardContent>\n              </Card>\n\n              {/* Cost Analysis */}\n              {analytics.aiUsage.tokenUsageOverTime && analytics.aiUsage.tokenUsageOverTime.length > 0 && (\n                <Card className=\"bg-white/80 dark:bg-slate-800/80 backdrop-blur\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <DollarSign className=\"h-5 w-5 text-green-600\" />\n                      Cost Analysis\n                    </CardTitle>\n                    <CardDescription>\n                      Estimated daily AI costs\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <ResponsiveContainer width=\"100%\" height={250}>\n                      <BarChart data={analytics.aiUsage.tokenUsageOverTime}>\n                        <CartesianGrid strokeDasharray=\"3 3\" className=\"opacity-30\" />\n                        <XAxis \n                          dataKey=\"date\" \n                          className=\"text-xs\"\n                          tick={{ fontSize: 12 }}\n                        />\n                        <YAxis className=\"text-xs\" tick={{ fontSize: 12 }} />\n                        <Tooltip \n                          contentStyle={{ \n                            backgroundColor: 'rgba(255, 255, 255, 0.95)',\n                            border: '1px solid #e2e8f0',\n                            borderRadius: '8px'\n                          }}\n                          formatter={(value: number) => `$${value.toFixed(4)}`}\n                        />\n                        <Bar dataKey=\"cost\" fill=\"#10b981\" />\n                      </BarChart>\n                    </ResponsiveContainer>\n                    <div className=\"mt-4 p-3 bg-slate-50 dark:bg-slate-700/50 rounded-lg\">\n                      <p className=\"text-xs text-slate-600 dark:text-slate-400\">\n                        * Estimated at $0.002 per 1K tokens (GPT-4 avg)\n                      </p>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"collaboration\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Team Activity */}\n              <Card className=\"bg-white/80 dark:bg-slate-800/80 backdrop-blur\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Users className=\"h-5 w-5 text-blue-600\" />\n                    Team Activity\n                  </CardTitle>\n                  <CardDescription>\n                    Recent collaborative actions\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <ScrollArea className=\"h-[300px]\">\n                    <div className=\"space-y-3\">\n                      {analytics.collaboration.recentActivity.map((activity) => (\n                        <div key={activity.id} className=\"flex items-center gap-3 p-3 bg-slate-50 dark:bg-slate-700/50 rounded-lg\">\n                          <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900/30 rounded-full flex items-center justify-center\">\n                            <FileText className=\"h-4 w-4 text-blue-600\" />\n                          </div>\n                          <div className=\"flex-1\">\n                            <p className=\"text-sm font-medium text-slate-900 dark:text-slate-100\">\n                              {activity.userName}\n                            </p>\n                            <p className=\"text-xs text-slate-600 dark:text-slate-400\">\n                              {activity.action} {activity.entityType}\n                            </p>\n                          </div>\n                          <span className=\"text-xs text-slate-500\">\n                            {formatDistanceToNow(new Date(activity.createdAt), { addSuffix: true })}\n                          </span>\n                        </div>\n                      ))}\n                    </div>\n                  </ScrollArea>\n                </CardContent>\n              </Card>\n\n              {/* Collaboration Stats */}\n              <Card className=\"bg-white/80 dark:bg-slate-800/80 backdrop-blur\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <TrendingUp className=\"h-5 w-5 text-green-600\" />\n                    Collaboration Metrics\n                  </CardTitle>\n                  <CardDescription>\n                    Team engagement statistics\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div>\n                    <div className=\"flex justify-between items-center mb-2\">\n                      <span className=\"text-sm font-medium\">Active Collaborators</span>\n                      <span className=\"text-sm text-slate-600\">\n                        {analytics.collaboration.activeCollaborators} / {analytics.collaboration.totalCollaborators}\n                      </span>\n                    </div>\n                    <Progress \n                      value={analytics.collaboration.totalCollaborators ? \n                        (analytics.collaboration.activeCollaborators / analytics.collaboration.totalCollaborators) * 100 : 0} \n                      className=\"h-2\"\n                    />\n                  </div>\n                  \n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"text-center p-4 bg-slate-50 dark:bg-slate-700/50 rounded-lg\">\n                      <div className=\"text-2xl font-bold text-slate-900 dark:text-slate-100\">\n                        {analytics.collaboration.totalCollaborators}\n                      </div>\n                      <div className=\"text-xs text-slate-600 dark:text-slate-400\">Total Team</div>\n                    </div>\n                    <div className=\"text-center p-4 bg-slate-50 dark:bg-slate-700/50 rounded-lg\">\n                      <div className=\"text-2xl font-bold text-green-600\">\n                        {analytics.collaboration.activeCollaborators}\n                      </div>\n                      <div className=\"text-xs text-slate-600 dark:text-slate-400\">Active</div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"productivity\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Productivity Metrics */}\n              <Card className=\"bg-white/80 dark:bg-slate-800/80 backdrop-blur\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Clock className=\"h-5 w-5 text-orange-600\" />\n                    Writing Sessions\n                  </CardTitle>\n                  <CardDescription>\n                    Your writing productivity patterns\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"text-center p-4 bg-slate-50 dark:bg-slate-700/50 rounded-lg\">\n                      <div className=\"text-2xl font-bold text-slate-900 dark:text-slate-100\">\n                        {analytics.productivity.averageSessionDuration}m\n                      </div>\n                      <div className=\"text-xs text-slate-600 dark:text-slate-400\">Avg Session</div>\n                    </div>\n                    <div className=\"text-center p-4 bg-slate-50 dark:bg-slate-700/50 rounded-lg\">\n                      <div className=\"text-2xl font-bold text-slate-900 dark:text-slate-100\">\n                        {Math.round(analytics.productivity.totalWritingTime / 60)}h\n                      </div>\n                      <div className=\"text-xs text-slate-600 dark:text-slate-400\">Total Time</div>\n                    </div>\n                  </div>\n\n                  <div>\n                    <div className=\"flex justify-between items-center mb-2\">\n                      <span className=\"text-sm font-medium\">Consistency Score</span>\n                      <span className=\"text-sm text-slate-600\">\n                        {analytics.productivity.consistencyScore}%\n                      </span>\n                    </div>\n                    <Progress value={analytics.productivity.consistencyScore} className=\"h-2\" />\n                    <p className=\"text-xs text-slate-500 mt-1\">\n                      Based on writing activity over the last 30 days\n                    </p>\n                  </div>\n\n                  <div className=\"text-center p-4 bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-900/20 dark:to-purple-900/20 rounded-lg\">\n                    <div className=\"text-lg font-semibold text-slate-900 dark:text-slate-100 mb-1\">\n                      Most Productive Hour\n                    </div>\n                    <div className=\"text-2xl font-bold text-blue-600\">\n                      {analytics.productivity.mostProductiveHour}:00\n                    </div>\n                    <div className=\"text-xs text-slate-600 dark:text-slate-400\">\n                      Peak writing time\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Progress Towards Goals */}\n              <Card className=\"bg-white/80 dark:bg-slate-800/80 backdrop-blur\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Target className=\"h-5 w-5 text-red-600\" />\n                    Progress Overview\n                  </CardTitle>\n                  <CardDescription>\n                    Project milestones and achievements\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"grid grid-cols-2 gap-4 text-center\">\n                    <div className=\"p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n                      <div className=\"text-2xl font-bold text-blue-600\">\n                        {analytics.overview.totalDocuments}\n                      </div>\n                      <div className=\"text-xs text-slate-600 dark:text-slate-400\">Documents</div>\n                    </div>\n                    <div className=\"p-4 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n                      <div className=\"text-2xl font-bold text-green-600\">\n                        {analytics.overview.totalCharacters}\n                      </div>\n                      <div className=\"text-xs text-slate-600 dark:text-slate-400\">Characters</div>\n                    </div>\n                    <div className=\"p-4 bg-purple-50 dark:bg-purple-900/20 rounded-lg\">\n                      <div className=\"text-2xl font-bold text-purple-600\">\n                        {analytics.overview.totalWorldbuildingEntries}\n                      </div>\n                      <div className=\"text-xs text-slate-600 dark:text-slate-400\">World</div>\n                    </div>\n                    <div className=\"p-4 bg-orange-50 dark:bg-orange-900/20 rounded-lg\">\n                      <div className=\"text-2xl font-bold text-orange-600\">\n                        {analytics.overview.totalTimelineEvents}\n                      </div>\n                      <div className=\"text-xs text-slate-600 dark:text-slate-400\">Timeline</div>\n                    </div>\n                  </div>\n\n                  <div className=\"p-4 bg-gradient-to-r from-slate-50 to-slate-100 dark:from-slate-800 dark:to-slate-700 rounded-lg\">\n                    <div className=\"text-center\">\n                      <div className=\"text-3xl font-bold text-slate-900 dark:text-slate-100 mb-2\">\n                        {analytics.overview.totalWordCount.toLocaleString()}\n                      </div>\n                      <div className=\"text-sm text-slate-600 dark:text-slate-400\">\n                        Total words written\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":43456},"server/analytics.ts":{"content":"import { db } from './db';\nimport { \n  projects, \n  documents, \n  documentVersions,\n  characters, \n  worldbuildingEntries, \n  timelineEvents,\n  aiGenerations,\n  writingSessions,\n  activityLogs,\n  projectCollaborators,\n  users\n} from '@shared/schema';\nimport { sql, and, eq, gte, desc, count, sum, avg } from 'drizzle-orm';\n\nexport interface ProjectAnalytics {\n  overview: {\n    totalProjects: number;\n    totalDocuments: number;\n    totalWordCount: number;\n    totalCharacters: number;\n    totalWorldbuildingEntries: number;\n    totalTimelineEvents: number;\n    aiGenerationsCount: number;\n  };\n  writingProgress: {\n    daily: Array<{ date: string; words: number; sessions: number }>;\n    weekly: Array<{ week: string; words: number; sessions: number }>;\n    monthly: Array<{ month: string; words: number; sessions: number }>;\n    streak: {\n      currentStreak: number;\n      longestStreak: number;\n      lastActiveDate: string;\n    };\n    weeklyStats: {\n      totalWords: number;\n      averageDaily: number;\n      mostProductiveDay: string;\n    };\n    monthlyStats: {\n      totalWords: number;\n      averageDaily: number;\n    };\n  };\n  aiUsage: {\n    totalGenerations: number;\n    byPersona: Array<{ persona: string; count: number }>;\n    recent: Array<{\n      id: string;\n      persona: string;\n      prompt: string;\n      createdAt: string;\n      metadata?: any;\n    }>;\n    tokenUsageOverTime?: Array<{ date: string; tokens: number; cost: number }>;\n    totalTokensUsed?: number;\n    estimatedCost?: number;\n  };\n  collaboration: {\n    totalCollaborators: number;\n    activeCollaborators: number;\n    recentActivity: Array<{\n      id: string;\n      userName: string;\n      action: string;\n      entityType: string;\n      createdAt: string;\n    }>;\n  };\n  productivity: {\n    averageSessionDuration: number;\n    totalWritingTime: number;\n    mostProductiveHour: number;\n    consistencyScore: number;\n  };\n}\n\nexport class AnalyticsService {\n  static async getProjectAnalytics(projectId: string, userId: string): Promise<ProjectAnalytics> {\n    // Verify user has access to this project\n    const projectAccess = await db\n      .select()\n      .from(projects)\n      .leftJoin(projectCollaborators, eq(projects.id, projectCollaborators.projectId))\n      .where(\n        and(\n          eq(projects.id, projectId),\n          sql`(${projects.ownerId} = ${userId} OR ${projectCollaborators.userId} = ${userId})`\n        )\n      )\n      .limit(1);\n\n    if (!projectAccess.length) {\n      throw new Error('Access denied - not authorized for this project');\n    }\n\n    const [overview, writingProgress, aiUsage, collaboration, productivity] = await Promise.all([\n      this.getOverviewMetrics(projectId),\n      this.getWritingProgressMetrics(projectId),\n      this.getAiUsageMetrics(projectId),\n      this.getCollaborationMetrics(projectId),\n      this.getProductivityMetrics(projectId),\n    ]);\n\n    return {\n      overview,\n      writingProgress,\n      aiUsage,\n      collaboration,\n      productivity,\n    };\n  }\n\n  private static async getOverviewMetrics(projectId: string) {\n    const [\n      projectCount,\n      documentStats,\n      characterCount,\n      worldbuildingCount,\n      timelineCount,\n      aiCount,\n    ] = await Promise.all([\n      db.select({ count: count() }).from(projects).where(eq(projects.id, projectId)),\n      db.select({ \n        count: count(),\n        totalWords: sum(documents.wordCount)\n      }).from(documents).where(eq(documents.projectId, projectId)),\n      db.select({ count: count() }).from(characters).where(eq(characters.projectId, projectId)),\n      db.select({ count: count() }).from(worldbuildingEntries).where(eq(worldbuildingEntries.projectId, projectId)),\n      db.select({ count: count() }).from(timelineEvents).where(eq(timelineEvents.projectId, projectId)),\n      db.select({ count: count() }).from(aiGenerations).where(eq(aiGenerations.projectId, projectId)),\n    ]);\n\n    return {\n      totalProjects: projectCount[0]?.count || 0,\n      totalDocuments: documentStats[0]?.count || 0,\n      totalWordCount: Number(documentStats[0]?.totalWords) || 0,\n      totalCharacters: characterCount[0]?.count || 0,\n      totalWorldbuildingEntries: worldbuildingCount[0]?.count || 0,\n      totalTimelineEvents: timelineCount[0]?.count || 0,\n      aiGenerationsCount: aiCount[0]?.count || 0,\n    };\n  }\n\n  private static async getWritingProgressMetrics(projectId: string) {\n    const now = new Date();\n    const thirtyDaysAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n\n    // Daily progress for last 30 days\n    const dailyProgress = await db\n      .select({\n        date: sql<string>`DATE(${writingSessions.createdAt})`,\n        words: sum(writingSessions.wordsWritten),\n        sessions: count(writingSessions.id),\n      })\n      .from(writingSessions)\n      .where(\n        and(\n          eq(writingSessions.projectId, projectId),\n          gte(writingSessions.createdAt, thirtyDaysAgo)\n        )\n      )\n      .groupBy(sql`DATE(${writingSessions.createdAt})`)\n      .orderBy(sql`DATE(${writingSessions.createdAt})`);\n\n    // Weekly progress for last 12 weeks\n    const weeklyProgress = await db\n      .select({\n        week: sql<string>`DATE_TRUNC('week', ${writingSessions.createdAt})`,\n        words: sum(writingSessions.wordsWritten),\n        sessions: count(writingSessions.id),\n      })\n      .from(writingSessions)\n      .where(\n        and(\n          eq(writingSessions.projectId, projectId),\n          gte(writingSessions.createdAt, new Date(now.getTime() - 12 * 7 * 24 * 60 * 60 * 1000))\n        )\n      )\n      .groupBy(sql`DATE_TRUNC('week', ${writingSessions.createdAt})`)\n      .orderBy(sql`DATE_TRUNC('week', ${writingSessions.createdAt})`);\n\n    // Monthly progress for last 12 months\n    const monthlyProgress = await db\n      .select({\n        month: sql<string>`DATE_TRUNC('month', ${writingSessions.createdAt})`,\n        words: sum(writingSessions.wordsWritten),\n        sessions: count(writingSessions.id),\n      })\n      .from(writingSessions)\n      .where(\n        and(\n          eq(writingSessions.projectId, projectId),\n          gte(writingSessions.createdAt, new Date(now.getTime() - 12 * 30 * 24 * 60 * 60 * 1000))\n        )\n      )\n      .groupBy(sql`DATE_TRUNC('month', ${writingSessions.createdAt})`)\n      .orderBy(sql`DATE_TRUNC('month', ${writingSessions.createdAt})`);\n\n    // Calculate writing streaks from document updates\n    const streak = await this.calculateWritingStreak(projectId);\n\n    // Calculate weekly stats\n    const sevenDaysAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n    const weeklyData = await db\n      .select({\n        date: sql<string>`DATE(${writingSessions.createdAt})`,\n        words: sum(writingSessions.wordsWritten),\n      })\n      .from(writingSessions)\n      .where(\n        and(\n          eq(writingSessions.projectId, projectId),\n          gte(writingSessions.createdAt, sevenDaysAgo)\n        )\n      )\n      .groupBy(sql`DATE(${writingSessions.createdAt})`);\n\n    const weeklyTotalWords = weeklyData.reduce((acc, row) => acc + (Number(row.words) || 0), 0);\n    const weeklyAverageDaily = weeklyData.length > 0 ? Math.round(weeklyTotalWords / 7) : 0;\n    \n    // Find most productive day this week\n    let mostProductiveDay = 'N/A';\n    let maxWords = 0;\n    for (const row of weeklyData) {\n      const words = Number(row.words) || 0;\n      if (words > maxWords) {\n        maxWords = words;\n        mostProductiveDay = new Date(row.date).toLocaleDateString('en-US', { weekday: 'long' });\n      }\n    }\n\n    // Calculate monthly stats\n    const thirtyOneDaysAgo = new Date(now.getTime() - 31 * 24 * 60 * 60 * 1000);\n    const monthlyData = await db\n      .select({\n        words: sum(writingSessions.wordsWritten),\n      })\n      .from(writingSessions)\n      .where(\n        and(\n          eq(writingSessions.projectId, projectId),\n          gte(writingSessions.createdAt, thirtyOneDaysAgo)\n        )\n      );\n\n    const monthlyTotalWords = Number(monthlyData[0]?.words) || 0;\n    const monthlyAverageDaily = Math.round(monthlyTotalWords / 31);\n\n    return {\n      daily: dailyProgress.map(row => ({\n        date: row.date,\n        words: Number(row.words) || 0,\n        sessions: Number(row.sessions) || 0,\n      })),\n      weekly: weeklyProgress.map(row => ({\n        week: row.week,\n        words: Number(row.words) || 0,\n        sessions: Number(row.sessions) || 0,\n      })),\n      monthly: monthlyProgress.map(row => ({\n        month: row.month,\n        words: Number(row.words) || 0,\n        sessions: Number(row.sessions) || 0,\n      })),\n      streak,\n      weeklyStats: {\n        totalWords: weeklyTotalWords,\n        averageDaily: weeklyAverageDaily,\n        mostProductiveDay,\n      },\n      monthlyStats: {\n        totalWords: monthlyTotalWords,\n        averageDaily: monthlyAverageDaily,\n      },\n    };\n  }\n\n  private static async calculateWritingStreak(projectId: string): Promise<{\n    currentStreak: number;\n    longestStreak: number;\n    lastActiveDate: string;\n  }> {\n    // Get all unique dates when documents were updated or versions were created\n    const [documentDates, versionDates] = await Promise.all([\n      db\n        .select({ date: sql<string>`DATE(${documents.updatedAt})` })\n        .from(documents)\n        .where(eq(documents.projectId, projectId))\n        .groupBy(sql`DATE(${documents.updatedAt})`),\n      db\n        .select({ date: sql<string>`DATE(${documentVersions.createdAt})` })\n        .from(documentVersions)\n        .innerJoin(documents, eq(documentVersions.documentId, documents.id))\n        .where(eq(documents.projectId, projectId))\n        .groupBy(sql`DATE(${documentVersions.createdAt})`),\n    ]);\n\n    // Combine and deduplicate dates\n    const allDatesSet = new Set<string>();\n    documentDates.forEach(row => allDatesSet.add(row.date));\n    versionDates.forEach(row => allDatesSet.add(row.date));\n\n    // Convert to sorted array\n    const sortedDates = Array.from(allDatesSet)\n      .map(dateStr => new Date(dateStr))\n      .sort((a, b) => a.getTime() - b.getTime());\n\n    if (sortedDates.length === 0) {\n      return {\n        currentStreak: 0,\n        longestStreak: 0,\n        lastActiveDate: '',\n      };\n    }\n\n    const lastActiveDate = sortedDates[sortedDates.length - 1].toISOString().split('T')[0];\n\n    // Helper function to check if two dates are consecutive\n    const isConsecutive = (date1: Date, date2: Date): boolean => {\n      const diffMs = date2.getTime() - date1.getTime();\n      const diffDays = Math.round(diffMs / (1000 * 60 * 60 * 24));\n      return diffDays === 1;\n    };\n\n    // Calculate longest streak\n    let longestStreak = 1;\n    let currentStreakCount = 1;\n\n    for (let i = 1; i < sortedDates.length; i++) {\n      if (isConsecutive(sortedDates[i - 1], sortedDates[i])) {\n        currentStreakCount++;\n        longestStreak = Math.max(longestStreak, currentStreakCount);\n      } else {\n        currentStreakCount = 1;\n      }\n    }\n\n    // Calculate current streak (counting backward from most recent date)\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const mostRecentDate = sortedDates[sortedDates.length - 1];\n    mostRecentDate.setHours(0, 0, 0, 0);\n\n    // Check if the most recent writing was today or yesterday\n    const daysSinceLastWrite = Math.round((today.getTime() - mostRecentDate.getTime()) / (1000 * 60 * 60 * 24));\n    \n    let currentStreak = 0;\n    if (daysSinceLastWrite <= 1) {\n      // Start from the most recent date and count backward\n      currentStreak = 1;\n      for (let i = sortedDates.length - 2; i >= 0; i--) {\n        if (isConsecutive(sortedDates[i], sortedDates[i + 1])) {\n          currentStreak++;\n        } else {\n          break;\n        }\n      }\n    }\n\n    return {\n      currentStreak,\n      longestStreak,\n      lastActiveDate,\n    };\n  }\n\n  private static async getAiUsageMetrics(projectId: string) {\n    const now = new Date();\n    const thirtyDaysAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n\n    const [totalCount, byPersona, recent, allGenerations] = await Promise.all([\n      db.select({ count: count() }).from(aiGenerations).where(eq(aiGenerations.projectId, projectId)),\n      db.select({\n        persona: aiGenerations.persona,\n        count: count(),\n      })\n        .from(aiGenerations)\n        .where(eq(aiGenerations.projectId, projectId))\n        .groupBy(aiGenerations.persona),\n      db.select({\n        id: aiGenerations.id,\n        persona: aiGenerations.persona,\n        prompt: aiGenerations.prompt,\n        createdAt: aiGenerations.createdAt,\n        metadata: aiGenerations.metadata,\n      })\n        .from(aiGenerations)\n        .where(eq(aiGenerations.projectId, projectId))\n        .orderBy(desc(aiGenerations.createdAt))\n        .limit(10),\n      db.select({\n        createdAt: aiGenerations.createdAt,\n        metadata: aiGenerations.metadata,\n      })\n        .from(aiGenerations)\n        .where(\n          and(\n            eq(aiGenerations.projectId, projectId),\n            gte(aiGenerations.createdAt, thirtyDaysAgo)\n          )\n        )\n        .orderBy(aiGenerations.createdAt),\n    ]);\n\n    // Calculate token usage over time\n    const tokenUsageByDate = new Map<string, { tokens: number; cost: number }>();\n    let totalTokensUsed = 0;\n\n    for (const gen of allGenerations) {\n      if (gen.metadata && typeof gen.metadata === 'object') {\n        const metadata = gen.metadata as any;\n        const tokensIn = metadata.tokens_in || 0;\n        const tokensOut = metadata.tokens_out || 0;\n        const totalTokens = tokensIn + tokensOut;\n        totalTokensUsed += totalTokens;\n\n        const date = gen.createdAt?.toISOString().split('T')[0] || '';\n        const existing = tokenUsageByDate.get(date) || { tokens: 0, cost: 0 };\n        const cost = (totalTokens / 1000) * 0.002; // $0.002 per 1K tokens estimate\n        \n        tokenUsageByDate.set(date, {\n          tokens: existing.tokens + totalTokens,\n          cost: existing.cost + cost,\n        });\n      }\n    }\n\n    const tokenUsageOverTime = Array.from(tokenUsageByDate.entries()).map(([date, data]) => ({\n      date,\n      tokens: data.tokens,\n      cost: data.cost,\n    }));\n\n    const estimatedCost = (totalTokensUsed / 1000) * 0.002;\n\n    return {\n      totalGenerations: totalCount[0]?.count || 0,\n      byPersona: byPersona.map(row => ({\n        persona: row.persona,\n        count: Number(row.count),\n      })),\n      recent: recent.map(row => ({\n        id: row.id,\n        persona: row.persona,\n        prompt: row.prompt.substring(0, 100) + '...',\n        createdAt: row.createdAt?.toISOString() || '',\n        metadata: row.metadata,\n      })),\n      tokenUsageOverTime,\n      totalTokensUsed,\n      estimatedCost,\n    };\n  }\n\n  private static async getCollaborationMetrics(projectId: string) {\n    const [collaboratorCount, activityData] = await Promise.all([\n      db.select({ count: count() }).from(projectCollaborators).where(eq(projectCollaborators.projectId, projectId)),\n      db.select({\n        id: activityLogs.id,\n        userName: sql<string>`${users.firstName} || ' ' || ${users.lastName}`,\n        action: activityLogs.action,\n        entityType: activityLogs.entityType,\n        createdAt: activityLogs.createdAt,\n      })\n        .from(activityLogs)\n        .innerJoin(users, eq(activityLogs.userId, users.id))\n        .where(eq(activityLogs.projectId, projectId))\n        .orderBy(desc(activityLogs.createdAt))\n        .limit(20),\n    ]);\n\n    // Calculate active collaborators (those who have done something in last 7 days)\n    const sevenDaysAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);\n    const activeCollaborators = await db\n      .select({ count: sql<number>`COUNT(DISTINCT ${activityLogs.userId})` })\n      .from(activityLogs)\n      .where(\n        and(\n          eq(activityLogs.projectId, projectId),\n          gte(activityLogs.createdAt, sevenDaysAgo)\n        )\n      );\n\n    return {\n      totalCollaborators: collaboratorCount[0]?.count || 0,\n      activeCollaborators: Number(activeCollaborators[0]?.count) || 0,\n      recentActivity: activityData.map(row => ({\n        id: row.id,\n        userName: row.userName || 'Unknown User',\n        action: row.action,\n        entityType: row.entityType,\n        createdAt: row.createdAt?.toISOString() || '',\n      })),\n    };\n  }\n\n  private static async getProductivityMetrics(projectId: string) {\n    const [avgDuration, totalTime, hourlyData] = await Promise.all([\n      db.select({ avg: avg(writingSessions.duration) })\n        .from(writingSessions)\n        .where(eq(writingSessions.projectId, projectId)),\n      db.select({ total: sum(writingSessions.duration) })\n        .from(writingSessions)\n        .where(eq(writingSessions.projectId, projectId)),\n      db.select({\n        hour: sql<number>`EXTRACT(HOUR FROM ${writingSessions.startTime})`,\n        sessions: count(),\n        words: sum(writingSessions.wordsWritten),\n      })\n        .from(writingSessions)\n        .where(eq(writingSessions.projectId, projectId))\n        .groupBy(sql`EXTRACT(HOUR FROM ${writingSessions.startTime})`)\n        .orderBy(desc(count())),\n    ]);\n\n    // Find most productive hour\n    const mostProductiveHour = hourlyData.length > 0 ? Number(hourlyData[0].hour) : 0;\n\n    // Calculate consistency score (percentage of days with writing activity in last 30 days)\n    const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);\n    const activeDays = await db\n      .select({ count: sql<number>`COUNT(DISTINCT DATE(${writingSessions.createdAt}))` })\n      .from(writingSessions)\n      .where(\n        and(\n          eq(writingSessions.projectId, projectId),\n          gte(writingSessions.createdAt, thirtyDaysAgo)\n        )\n      );\n\n    const consistencyScore = Math.round((Number(activeDays[0]?.count) || 0) / 30 * 100);\n\n    return {\n      averageSessionDuration: Math.round(Number(avgDuration[0]?.avg) || 0),\n      totalWritingTime: Number(totalTime[0]?.total) || 0,\n      mostProductiveHour,\n      consistencyScore,\n    };\n  }\n\n  static async logActivity(\n    projectId: string,\n    userId: string,\n    action: string,\n    entityType: string,\n    entityId?: string,\n    details?: any\n  ) {\n    await db.insert(activityLogs).values({\n      projectId,\n      userId,\n      action,\n      entityType,\n      entityId,\n      details,\n    });\n  }\n\n  static async startWritingSession(\n    projectId: string,\n    userId: string,\n    documentId?: string\n  ) {\n    const [session] = await db.insert(writingSessions).values({\n      projectId,\n      userId,\n      documentId,\n      sessionType: 'writing',\n    }).returning();\n\n    return session.id;\n  }\n\n  static async endWritingSession(\n    sessionId: string,\n    wordsWritten: number,\n    duration: number\n  ) {\n    await db.update(writingSessions)\n      .set({\n        wordsWritten,\n        duration,\n        endTime: new Date(),\n      })\n      .where(eq(writingSessions.id, sessionId));\n  }\n}","size_bytes":18914},"client/src/components/advanced-analysis-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { \n  Brain, \n  BookCheck, \n  Users, \n  Wind,\n  Download,\n  RefreshCw,\n  AlertCircle,\n  TrendingUp,\n  TrendingDown,\n  Minus,\n  Sparkles,\n  CheckCircle,\n  XCircle,\n  AlertTriangle\n} from \"lucide-react\";\nimport type { Character } from \"@shared/schema\";\nimport { \n  LineChart, Line, BarChart, Bar, RadarChart, Radar,\n  PolarGrid, PolarAngleAxis, PolarRadiusAxis,\n  XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer,\n  PieChart, Pie, Cell, Legend\n} from \"recharts\";\n\ninterface AdvancedAnalysisModalProps {\n  open: boolean;\n  onClose: () => void;\n  projectId: string;\n  projectTitle: string;\n  characters: Character[];\n}\n\nexport default function AdvancedAnalysisModal({ \n  open, \n  onClose, \n  projectId, \n  projectTitle,\n  characters = []\n}: AdvancedAnalysisModalProps) {\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState(\"style\");\n  const [selectedCharacter, setSelectedCharacter] = useState<string>(\"\");\n\n  // Style Analysis Query\n  const styleAnalysis = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"POST\", `/api/projects/${projectId}/analysis/style`, {});\n    },\n    onError: (error: any) => {\n      if (error?.requiresUpgrade) {\n        toast({\n          title: \"Premium Feature\",\n          description: \"This feature requires a Professional or Enterprise subscription.\",\n          variant: \"destructive\",\n        });\n      } else if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n      } else {\n        toast({\n          title: \"Analysis Failed\",\n          description: \"Failed to analyze writing style. Please try again.\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  });\n\n  // Plot Consistency Analysis\n  const plotAnalysis = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"POST\", `/api/projects/${projectId}/analysis/plot`, {});\n    },\n    onError: (error: any) => {\n      if (error?.requiresUpgrade) {\n        toast({\n          title: \"Premium Feature\",\n          description: \"This feature requires a Professional or Enterprise subscription.\",\n          variant: \"destructive\",\n        });\n      } else {\n        toast({\n          title: \"Analysis Failed\",\n          description: \"Failed to analyze plot consistency.\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  });\n\n  // Character Development Analysis\n  const characterAnalysis = useMutation({\n    mutationFn: async (characterId: string) => {\n      return await apiRequest(\"POST\", `/api/projects/${projectId}/analysis/character/${characterId}`, {});\n    },\n    onError: (error: any) => {\n      if (error?.requiresUpgrade) {\n        toast({\n          title: \"Premium Feature\",\n          description: \"This feature requires a Professional or Enterprise subscription.\",\n          variant: \"destructive\",\n        });\n      } else {\n        toast({\n          title: \"Analysis Failed\",\n          description: \"Failed to analyze character development.\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  });\n\n  // Narrative Flow Analysis\n  const narrativeAnalysis = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"POST\", `/api/projects/${projectId}/analysis/narrative`, {\n        targetPacing: \"moderate\"\n      });\n    },\n    onError: (error: any) => {\n      if (error?.requiresUpgrade) {\n        toast({\n          title: \"Premium Feature\",\n          description: \"This feature requires a Professional or Enterprise subscription.\",\n          variant: \"destructive\",\n        });\n      } else {\n        toast({\n          title: \"Analysis Failed\",\n          description: \"Failed to analyze narrative flow.\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  });\n\n  // Check for cached results\n  const { data: cachedStyle } = useQuery({\n    queryKey: [`/api/projects/${projectId}/analysis/cache/style`],\n    enabled: false // Only load when requested\n  });\n\n  const handleRunAnalysis = (type: string) => {\n    switch(type) {\n      case 'style':\n        styleAnalysis.mutate();\n        break;\n      case 'plot':\n        plotAnalysis.mutate();\n        break;\n      case 'character':\n        if (selectedCharacter) {\n          characterAnalysis.mutate(selectedCharacter);\n        } else {\n          toast({\n            title: \"Select Character\",\n            description: \"Please select a character to analyze.\",\n            variant: \"destructive\",\n          });\n        }\n        break;\n      case 'narrative':\n        narrativeAnalysis.mutate();\n        break;\n    }\n  };\n\n  const handleExportReport = (analysisData: any, type: string) => {\n    const report = {\n      project: projectTitle,\n      analysisType: type,\n      timestamp: new Date().toISOString(),\n      data: analysisData\n    };\n    \n    const blob = new Blob([JSON.stringify(report, null, 2)], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `${projectTitle}_${type}_analysis_${new Date().toISOString().split('T')[0]}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n    \n    toast({\n      title: \"Report Exported\",\n      description: \"Analysis report has been downloaded.\",\n    });\n  };\n\n  const renderStyleAnalysis = () => {\n    const data = styleAnalysis.data?.data;\n    if (!data && !styleAnalysis.isPending) {\n      return (\n        <div className=\"text-center py-12\">\n          <Brain className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n          <h3 className=\"text-lg font-medium mb-2\">Style Analysis</h3>\n          <p className=\"text-muted-foreground mb-4\">Analyze your writing style across all documents</p>\n          <Button onClick={() => handleRunAnalysis('style')} data-testid=\"button-run-style-analysis\">\n            <Sparkles className=\"mr-2 h-4 w-4\" />\n            Run Style Analysis\n          </Button>\n        </div>\n      );\n    }\n\n    if (styleAnalysis.isPending) {\n      return (\n        <div className=\"space-y-4\">\n          <Skeleton className=\"h-32 w-full\" />\n          <Skeleton className=\"h-48 w-full\" />\n          <Skeleton className=\"h-24 w-full\" />\n        </div>\n      );\n    }\n\n    const chartData = data ? [\n      { metric: 'Tone Consistency', value: data.tone?.consistency || 0, fullMark: 100 },\n      { metric: 'Voice Consistency', value: data.voice?.consistency || 0, fullMark: 100 },\n      { metric: 'Sentence Variety', value: data.sentenceVariety?.variation_score || 0, fullMark: 100 },\n      { metric: 'Vocabulary Richness', value: data.vocabulary?.richness_score || 0, fullMark: 100 },\n      { metric: 'Genre Alignment', value: data.style?.genre_alignment || 0, fullMark: 100 },\n      { metric: 'Pacing Effectiveness', value: data.pacing?.effectiveness || 0, fullMark: 100 }\n    ] : [];\n\n    return (\n      <div className=\"space-y-6\">\n        {/* Overall Metrics */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm\">Primary Tone</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{data?.tone?.primary || 'N/A'}</div>\n              <Progress value={data?.tone?.consistency || 0} className=\"mt-2\" />\n              <span className=\"text-xs text-muted-foreground\">{data?.tone?.consistency || 0}% consistent</span>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm\">Reading Level</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">Grade {data?.readingLevel?.grade || 'N/A'}</div>\n              <Badge variant=\"outline\" className=\"mt-2\">{data?.readingLevel?.complexity || 'N/A'}</Badge>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm\">Vocabulary</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{data?.vocabulary?.richness_score || 0}%</div>\n              <span className=\"text-xs text-muted-foreground\">{data?.vocabulary?.sophistication || 'N/A'}</span>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Radar Chart */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Style Metrics Overview</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <RadarChart data={chartData}>\n                <PolarGrid />\n                <PolarAngleAxis dataKey=\"metric\" />\n                <PolarRadiusAxis angle={90} domain={[0, 100]} />\n                <Radar name=\"Score\" dataKey=\"value\" stroke=\"#8884d8\" fill=\"#8884d8\" fillOpacity={0.6} />\n                <Tooltip />\n              </RadarChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        {/* Strengths and Weaknesses */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-sm flex items-center\">\n                <CheckCircle className=\"mr-2 h-4 w-4 text-green-500\" />\n                Strengths\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ul className=\"space-y-1\">\n                {data?.style?.strengths?.map((strength: string, i: number) => (\n                  <li key={i} className=\"text-sm\">{strength}</li>\n                )) || <li className=\"text-sm text-muted-foreground\">No data available</li>}\n              </ul>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-sm flex items-center\">\n                <AlertCircle className=\"mr-2 h-4 w-4 text-yellow-500\" />\n                Areas to Improve\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ul className=\"space-y-1\">\n                {data?.style?.weaknesses?.map((weakness: string, i: number) => (\n                  <li key={i} className=\"text-sm\">{weakness}</li>\n                )) || <li className=\"text-sm text-muted-foreground\">No data available</li>}\n              </ul>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Recommendations */}\n        {styleAnalysis.data?.recommendations && styleAnalysis.data.recommendations.length > 0 && (\n          <Alert>\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription>\n              <strong>Recommendations:</strong>\n              <ul className=\"mt-2 space-y-1\">\n                {styleAnalysis.data.recommendations.map((rec: string, i: number) => (\n                  <li key={i}>{rec}</li>\n                ))}\n              </ul>\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {/* Export Button */}\n        {data && (\n          <div className=\"flex justify-end\">\n            <Button onClick={() => handleExportReport(styleAnalysis.data, 'style')} variant=\"outline\" data-testid=\"button-export-style\">\n              <Download className=\"mr-2 h-4 w-4\" />\n              Export Report\n            </Button>\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  const renderPlotAnalysis = () => {\n    const data = plotAnalysis.data?.data;\n    if (!data && !plotAnalysis.isPending) {\n      return (\n        <div className=\"text-center py-12\">\n          <BookCheck className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n          <h3 className=\"text-lg font-medium mb-2\">Plot Consistency Analysis</h3>\n          <p className=\"text-muted-foreground mb-4\">Check for plot holes and timeline inconsistencies</p>\n          <Button onClick={() => handleRunAnalysis('plot')} data-testid=\"button-run-plot-analysis\">\n            <Sparkles className=\"mr-2 h-4 w-4\" />\n            Run Plot Analysis\n          </Button>\n        </div>\n      );\n    }\n\n    if (plotAnalysis.isPending) {\n      return (\n        <div className=\"space-y-4\">\n          <Skeleton className=\"h-32 w-full\" />\n          <Skeleton className=\"h-48 w-full\" />\n          <Skeleton className=\"h-24 w-full\" />\n        </div>\n      );\n    }\n\n    const severityColors = {\n      minor: \"#fbbf24\",\n      major: \"#fb923c\", \n      critical: \"#ef4444\"\n    };\n\n    const importanceColors = {\n      low: \"#94a3b8\",\n      medium: \"#fbbf24\",\n      high: \"#ef4444\"\n    };\n\n    return (\n      <div className=\"space-y-6\">\n        {/* Overall Score */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Overall Consistency Score</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"text-3xl font-bold\">{data?.overallConsistency || 0}%</div>\n              <Progress value={data?.overallConsistency || 0} className=\"flex-1\" />\n              {data?.overallConsistency >= 80 && <Badge variant=\"default\" className=\"bg-green-500\">Excellent</Badge>}\n              {data?.overallConsistency >= 60 && data?.overallConsistency < 80 && <Badge variant=\"default\" className=\"bg-yellow-500\">Good</Badge>}\n              {data?.overallConsistency < 60 && <Badge variant=\"default\" className=\"bg-red-500\">Needs Work</Badge>}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Plot Holes */}\n        {data?.plotHoles && data.plotHoles.length > 0 && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <AlertTriangle className=\"mr-2 h-5 w-5 text-orange-500\" />\n                Plot Holes Detected\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {data.plotHoles.map((hole: any, i: number) => (\n                  <div key={i} className=\"border rounded-lg p-3\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <Badge style={{ backgroundColor: severityColors[hole.severity as keyof typeof severityColors] }}>\n                        {hole.severity}\n                      </Badge>\n                      <span className=\"text-sm text-muted-foreground\">{hole.location}</span>\n                    </div>\n                    <p className=\"text-sm mb-2\">{hole.description}</p>\n                    <p className=\"text-sm text-muted-foreground italic\">Suggestion: {hole.suggestion}</p>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Unresolved Threads */}\n        {data?.unresolvedThreads && data.unresolvedThreads.length > 0 && (\n          <Card>\n            <CardHeader>\n              <CardTitle>Story Threads Status</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                {data.unresolvedThreads.map((thread: any, i: number) => (\n                  <div key={i} className=\"flex items-center justify-between p-2 rounded hover:bg-muted/50\">\n                    <div className=\"flex-1\">\n                      <div className=\"font-medium text-sm\">{thread.thread}</div>\n                      <div className=\"text-xs text-muted-foreground\">Introduced: {thread.introduced}</div>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Badge variant=\"outline\">{thread.status}</Badge>\n                      <Badge style={{ backgroundColor: importanceColors[thread.importance as keyof typeof importanceColors] }}>\n                        {thread.importance}\n                      </Badge>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Timeline Issues */}\n        {data?.timelineIssues && data.timelineIssues.length > 0 && (\n          <Alert variant=\"destructive\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription>\n              <strong>Timeline Inconsistencies Found:</strong>\n              <ul className=\"mt-2 space-y-1\">\n                {data.timelineIssues.map((issue: any, i: number) => (\n                  <li key={i}>\n                    {issue.description} (Chapters: {issue.chapters.join(', ')})\n                  </li>\n                ))}\n              </ul>\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {/* Strong Points */}\n        {data?.strongPoints && data.strongPoints.length > 0 && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <CheckCircle className=\"mr-2 h-5 w-5 text-green-500\" />\n                Strong Points\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ul className=\"space-y-1\">\n                {data.strongPoints.map((point: string, i: number) => (\n                  <li key={i} className=\"text-sm flex items-start\">\n                    <CheckCircle className=\"mr-2 h-4 w-4 text-green-500 mt-0.5 flex-shrink-0\" />\n                    {point}\n                  </li>\n                ))}\n              </ul>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Export Button */}\n        {data && (\n          <div className=\"flex justify-end\">\n            <Button onClick={() => handleExportReport(plotAnalysis.data, 'plot')} variant=\"outline\" data-testid=\"button-export-plot\">\n              <Download className=\"mr-2 h-4 w-4\" />\n              Export Report\n            </Button>\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  const renderCharacterAnalysis = () => {\n    const data = characterAnalysis.data?.data;\n    \n    if (!selectedCharacter) {\n      return (\n        <div className=\"space-y-4\">\n          <Alert>\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription>\n              Select a character to analyze their development throughout the story.\n            </AlertDescription>\n          </Alert>\n          <div>\n            <Label className=\"text-sm font-medium mb-2\">Select Character</Label>\n            <Select value={selectedCharacter} onValueChange={setSelectedCharacter}>\n              <SelectTrigger data-testid=\"select-character-analysis\">\n                <SelectValue placeholder=\"Choose a character\" />\n              </SelectTrigger>\n              <SelectContent>\n                {characters.map((character) => (\n                  <SelectItem key={character.id} value={character.id}>\n                    {character.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n          {selectedCharacter && (\n            <Button onClick={() => handleRunAnalysis('character')} data-testid=\"button-run-character-analysis\">\n              <Sparkles className=\"mr-2 h-4 w-4\" />\n              Analyze Character Development\n            </Button>\n          )}\n        </div>\n      );\n    }\n\n    if (!data && !characterAnalysis.isPending && selectedCharacter) {\n      return (\n        <div className=\"text-center py-12\">\n          <Users className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n          <h3 className=\"text-lg font-medium mb-2\">Character Development Analysis</h3>\n          <p className=\"text-muted-foreground mb-4\">Track character arcs and growth</p>\n          <Button onClick={() => handleRunAnalysis('character')} data-testid=\"button-run-character-analysis-2\">\n            <Sparkles className=\"mr-2 h-4 w-4\" />\n            Analyze Character\n          </Button>\n        </div>\n      );\n    }\n\n    if (characterAnalysis.isPending) {\n      return (\n        <div className=\"space-y-4\">\n          <Skeleton className=\"h-32 w-full\" />\n          <Skeleton className=\"h-48 w-full\" />\n          <Skeleton className=\"h-24 w-full\" />\n        </div>\n      );\n    }\n\n    const developmentData = data?.arc ? [\n      { stage: 'Start', progress: 0 },\n      { stage: 'Current', progress: data.arc.completeness },\n      { stage: 'Projected', progress: 100 }\n    ] : [];\n\n    return (\n      <div className=\"space-y-6\">\n        {/* Character Arc Overview */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Character Arc</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <span className=\"text-sm text-muted-foreground\">Arc Type</span>\n                  <p className=\"font-medium\">{data?.arc?.type || 'N/A'}</p>\n                </div>\n                <div>\n                  <span className=\"text-sm text-muted-foreground\">Completeness</span>\n                  <div className=\"flex items-center space-x-2\">\n                    <Progress value={data?.arc?.completeness || 0} className=\"flex-1\" />\n                    <span className=\"text-sm font-medium\">{data?.arc?.completeness || 0}%</span>\n                  </div>\n                </div>\n              </div>\n              \n              <ResponsiveContainer width=\"100%\" height={200}>\n                <LineChart data={developmentData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"stage\" />\n                  <YAxis />\n                  <Tooltip />\n                  <Line type=\"monotone\" dataKey=\"progress\" stroke=\"#8884d8\" strokeWidth={2} />\n                </LineChart>\n              </ResponsiveContainer>\n\n              <div className=\"space-y-2\">\n                <div>\n                  <span className=\"text-sm text-muted-foreground\">Start Point:</span>\n                  <p className=\"text-sm\">{data?.arc?.startPoint || 'N/A'}</p>\n                </div>\n                <div>\n                  <span className=\"text-sm text-muted-foreground\">Current Point:</span>\n                  <p className=\"text-sm\">{data?.arc?.currentPoint || 'N/A'}</p>\n                </div>\n                <div>\n                  <span className=\"text-sm text-muted-foreground\">Projected Ending:</span>\n                  <p className=\"text-sm\">{data?.arc?.projected || 'N/A'}</p>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Growth & Consistency */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-sm\">Character Growth</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm\">Overall Growth</span>\n                  <Badge>{data?.growth?.overall_growth || 0}%</Badge>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm\">Believability</span>\n                  <Badge>{data?.growth?.believability || 0}%</Badge>\n                </div>\n                {data?.growth?.areas && data.growth.areas.length > 0 && (\n                  <div className=\"mt-3 space-y-2\">\n                    <span className=\"text-sm font-medium\">Growth Areas:</span>\n                    {data.growth.areas.map((area: any, i: number) => (\n                      <div key={i} className=\"text-sm text-muted-foreground\">\n                        • {area.aspect}: {area.change} (Ch. {area.chapter})\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-sm\">Consistency</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center space-x-2\">\n                  <Progress value={data?.consistency?.score || 0} className=\"flex-1\" />\n                  <span className=\"font-medium\">{data?.consistency?.score || 0}%</span>\n                </div>\n                {data?.consistency?.inconsistencies && data.consistency.inconsistencies.length > 0 && (\n                  <div className=\"space-y-2\">\n                    <span className=\"text-sm font-medium text-orange-500\">Issues Found:</span>\n                    {data.consistency.inconsistencies.map((issue: any, i: number) => (\n                      <div key={i} className=\"text-sm\">\n                        <AlertCircle className=\"inline h-3 w-3 mr-1 text-orange-500\" />\n                        {issue.issue} ({issue.location})\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Key Moments */}\n        {data?.keyMoments && data.keyMoments.length > 0 && (\n          <Card>\n            <CardHeader>\n              <CardTitle>Key Character Moments</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {data.keyMoments.map((moment: any, i: number) => (\n                  <div key={i} className=\"border-l-2 border-primary pl-4\">\n                    <div className=\"font-medium text-sm\">{moment.chapter}</div>\n                    <p className=\"text-sm text-muted-foreground\">{moment.moment}</p>\n                    <p className=\"text-xs text-muted-foreground italic\">Significance: {moment.significance}</p>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Relationships */}\n        {data?.relationships && data.relationships.length > 0 && (\n          <Card>\n            <CardHeader>\n              <CardTitle>Relationship Evolution</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {data.relationships.map((rel: any, i: number) => (\n                  <div key={i} className=\"flex items-center justify-between p-2 rounded hover:bg-muted/50\">\n                    <div className=\"flex-1\">\n                      <div className=\"font-medium text-sm\">{rel.character}</div>\n                      <div className=\"text-xs text-muted-foreground\">{rel.evolution}</div>\n                      <div className=\"text-xs\">Current: {rel.current_status}</div>\n                    </div>\n                    <div className=\"text-right\">\n                      <Progress value={rel.development_quality} className=\"w-20\" />\n                      <span className=\"text-xs\">{rel.development_quality}%</span>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Export Button */}\n        {data && (\n          <div className=\"flex justify-end\">\n            <Button onClick={() => handleExportReport(characterAnalysis.data, 'character')} variant=\"outline\" data-testid=\"button-export-character\">\n              <Download className=\"mr-2 h-4 w-4\" />\n              Export Report\n            </Button>\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  const renderNarrativeAnalysis = () => {\n    const data = narrativeAnalysis.data?.data;\n    \n    if (!data && !narrativeAnalysis.isPending) {\n      return (\n        <div className=\"text-center py-12\">\n          <Wind className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n          <h3 className=\"text-lg font-medium mb-2\">Narrative Flow Analysis</h3>\n          <p className=\"text-muted-foreground mb-4\">Analyze pacing, rhythm, and story momentum</p>\n          <Button onClick={() => handleRunAnalysis('narrative')} data-testid=\"button-run-narrative-analysis\">\n            <Sparkles className=\"mr-2 h-4 w-4\" />\n            Run Narrative Analysis\n          </Button>\n        </div>\n      );\n    }\n\n    if (narrativeAnalysis.isPending) {\n      return (\n        <div className=\"space-y-4\">\n          <Skeleton className=\"h-32 w-full\" />\n          <Skeleton className=\"h-48 w-full\" />\n          <Skeleton className=\"h-24 w-full\" />\n        </div>\n      );\n    }\n\n    const tensionData = [\n      ...(data?.tensionCurve?.peaks || []).map((peak: any) => ({\n        chapter: `Ch ${peak.chapter}`,\n        intensity: peak.intensity,\n        type: 'peak'\n      })),\n      ...(data?.tensionCurve?.valleys || []).map((valley: any) => ({\n        chapter: `Ch ${valley.chapter}`,\n        intensity: valley.intensity,\n        type: 'valley'\n      }))\n    ].sort((a, b) => {\n      const aNum = parseInt(a.chapter.replace('Ch ', ''));\n      const bNum = parseInt(b.chapter.replace('Ch ', ''));\n      return aNum - bNum;\n    });\n\n    const pacingColors = {\n      slow: \"#3b82f6\",\n      moderate: \"#10b981\",\n      fast: \"#f59e0b\",\n      varied: \"#8b5cf6\"\n    };\n\n    return (\n      <div className=\"space-y-6\">\n        {/* Overall Pacing */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Pacing Overview</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-3 gap-4 mb-4\">\n              <div>\n                <span className=\"text-sm text-muted-foreground\">Overall Pace</span>\n                <div className=\"flex items-center space-x-2 mt-1\">\n                  <Badge style={{ backgroundColor: pacingColors[data?.pacing?.overall as keyof typeof pacingColors] }}>\n                    {data?.pacing?.overall || 'N/A'}\n                  </Badge>\n                </div>\n              </div>\n              <div>\n                <span className=\"text-sm text-muted-foreground\">Effectiveness</span>\n                <div className=\"flex items-center space-x-2 mt-1\">\n                  <Progress value={data?.pacing?.effectiveness || 0} className=\"flex-1\" />\n                  <span className=\"text-sm font-medium\">{data?.pacing?.effectiveness || 0}%</span>\n                </div>\n              </div>\n              <div>\n                <span className=\"text-sm text-muted-foreground\">Momentum</span>\n                <div className=\"flex items-center space-x-2 mt-1\">\n                  {data?.momentum?.building ? (\n                    <TrendingUp className=\"h-5 w-5 text-green-500\" />\n                  ) : (\n                    <TrendingDown className=\"h-5 w-5 text-red-500\" />\n                  )}\n                  <span className=\"text-sm\">{data?.momentum?.maintained || 0}% maintained</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Chapter-by-chapter pacing */}\n            {data?.pacing?.chapters && data.pacing.chapters.length > 0 && (\n              <div className=\"mt-4\">\n                <h4 className=\"text-sm font-medium mb-2\">Chapter Pacing</h4>\n                <div className=\"flex flex-wrap gap-2\">\n                  {data.pacing.chapters.map((ch: any, i: number) => (\n                    <div key={i} className=\"flex items-center space-x-1 p-2 border rounded\">\n                      <span className=\"text-xs\">Ch {ch.number}:</span>\n                      <Badge variant=\"outline\" className=\"text-xs\">{ch.pace}</Badge>\n                      {ch.issue && (\n                        <AlertCircle className=\"h-3 w-3 text-orange-500\" />\n                      )}\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Tension Curve */}\n        {tensionData.length > 0 && (\n          <Card>\n            <CardHeader>\n              <CardTitle>Story Tension Curve</CardTitle>\n              <CardDescription>\n                Pattern: {data?.tensionCurve?.pattern || 'N/A'} | \n                Effectiveness: {data?.tensionCurve?.effectiveness || 0}%\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={250}>\n                <BarChart data={tensionData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"chapter\" />\n                  <YAxis domain={[0, 10]} />\n                  <Tooltip />\n                  <Bar dataKey=\"intensity\" fill=\"#8884d8\" />\n                </BarChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Rhythm & Transitions */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-sm\">Narrative Rhythm</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <div>\n                  <span className=\"text-sm text-muted-foreground\">Variety</span>\n                  <Progress value={data?.rhythm?.variety || 0} className=\"mt-1\" />\n                </div>\n                <div>\n                  <span className=\"text-sm text-muted-foreground\">Flow</span>\n                  <Progress value={data?.rhythm?.flow || 0} className=\"mt-1\" />\n                </div>\n                {data?.rhythm?.patterns && data.rhythm.patterns.length > 0 && (\n                  <div>\n                    <span className=\"text-sm text-muted-foreground\">Patterns:</span>\n                    <div className=\"mt-1\">\n                      {data.rhythm.patterns.map((pattern: string, i: number) => (\n                        <Badge key={i} variant=\"outline\" className=\"mr-1 mb-1 text-xs\">\n                          {pattern}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-sm\">Scene Transitions</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm\">Quality</span>\n                  <div className=\"flex items-center space-x-2\">\n                    <Progress value={data?.transitions?.quality || 0} className=\"w-20\" />\n                    <span className=\"text-sm font-medium\">{data?.transitions?.quality || 0}%</span>\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                  <div className=\"flex items-center space-x-1\">\n                    <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                    <span>Smooth: {data?.transitions?.smooth || 0}</span>\n                  </div>\n                  <div className=\"flex items-center space-x-1\">\n                    <XCircle className=\"h-4 w-4 text-red-500\" />\n                    <span>Jarring: {data?.transitions?.jarring || 0}</span>\n                  </div>\n                </div>\n                {data?.transitions?.issues && data.transitions.issues.length > 0 && (\n                  <div className=\"mt-2\">\n                    <span className=\"text-sm font-medium text-orange-500\">Issues:</span>\n                    {data.transitions.issues.map((issue: any, i: number) => (\n                      <div key={i} className=\"text-xs text-muted-foreground mt-1\">\n                        Between {issue.between}: {issue.problem}\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Problem Areas */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          {data?.lagAreas && data.lagAreas.length > 0 && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-sm flex items-center\">\n                  <Minus className=\"mr-2 h-4 w-4 text-blue-500\" />\n                  Slow/Lagging Areas\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  {data.lagAreas.map((area: any, i: number) => (\n                    <div key={i} className=\"text-sm\">\n                      <div className=\"font-medium\">{area.location}</div>\n                      <div className=\"text-muted-foreground\">Reason: {area.reason}</div>\n                      <div className=\"text-muted-foreground italic\">Fix: {area.suggestion}</div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {data?.rushAreas && data.rushAreas.length > 0 && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-sm flex items-center\">\n                  <TrendingUp className=\"mr-2 h-4 w-4 text-orange-500\" />\n                  Rushed Areas\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  {data.rushAreas.map((area: any, i: number) => (\n                    <div key={i} className=\"text-sm\">\n                      <div className=\"font-medium\">{area.location}</div>\n                      <div className=\"text-muted-foreground\">Reason: {area.reason}</div>\n                      <div className=\"text-muted-foreground italic\">Fix: {area.suggestion}</div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n\n        {/* Hooks Effectiveness */}\n        {data?.hooks && (\n          <Card>\n            <CardHeader>\n              <CardTitle>Hook Effectiveness</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm\">Chapter Endings</span>\n                  <div className=\"flex items-center space-x-2\">\n                    <Progress value={data.hooks.chapter_endings} className=\"w-32\" />\n                    <span className=\"text-sm font-medium\">{data.hooks.chapter_endings}%</span>\n                  </div>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm\">Chapter Openings</span>\n                  <div className=\"flex items-center space-x-2\">\n                    <Progress value={data.hooks.chapter_openings} className=\"w-32\" />\n                    <span className=\"text-sm font-medium\">{data.hooks.chapter_openings}%</span>\n                  </div>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm\">Overall Engagement</span>\n                  <div className=\"flex items-center space-x-2\">\n                    <Progress value={data.hooks.overall_engagement} className=\"w-32\" />\n                    <span className=\"text-sm font-medium\">{data.hooks.overall_engagement}%</span>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Export Button */}\n        {data && (\n          <div className=\"flex justify-end\">\n            <Button onClick={() => handleExportReport(narrativeAnalysis.data, 'narrative')} variant=\"outline\" data-testid=\"button-export-narrative\">\n              <Download className=\"mr-2 h-4 w-4\" />\n              Export Report\n            </Button>\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-6xl max-h-[90vh] overflow-hidden\" data-testid=\"modal-advanced-analysis\">\n        <DialogHeader>\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-chart-1/10 rounded-lg flex items-center justify-center\">\n              <Brain className=\"h-5 w-5 text-chart-1\" />\n            </div>\n            <div>\n              <DialogTitle>Advanced Writing Analysis</DialogTitle>\n              <DialogDescription>\n                Deep insights into your writing style, plot consistency, and narrative flow\n              </DialogDescription>\n            </div>\n          </div>\n        </DialogHeader>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"flex-1\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"style\" data-testid=\"tab-style\">\n              <Brain className=\"mr-2 h-4 w-4\" />\n              Style\n            </TabsTrigger>\n            <TabsTrigger value=\"plot\" data-testid=\"tab-plot\">\n              <BookCheck className=\"mr-2 h-4 w-4\" />\n              Plot\n            </TabsTrigger>\n            <TabsTrigger value=\"character\" data-testid=\"tab-character\">\n              <Users className=\"mr-2 h-4 w-4\" />\n              Character\n            </TabsTrigger>\n            <TabsTrigger value=\"narrative\" data-testid=\"tab-narrative\">\n              <Wind className=\"mr-2 h-4 w-4\" />\n              Flow\n            </TabsTrigger>\n          </TabsList>\n\n          <ScrollArea className=\"h-[calc(90vh-200px)] mt-4\">\n            <TabsContent value=\"style\" className=\"pr-4\">\n              {renderStyleAnalysis()}\n            </TabsContent>\n            <TabsContent value=\"plot\" className=\"pr-4\">\n              {renderPlotAnalysis()}\n            </TabsContent>\n            <TabsContent value=\"character\" className=\"pr-4\">\n              {renderCharacterAnalysis()}\n            </TabsContent>\n            <TabsContent value=\"narrative\" className=\"pr-4\">\n              {renderNarrativeAnalysis()}\n            </TabsContent>\n          </ScrollArea>\n        </Tabs>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":42928},"test-analysis.ts":{"content":"// Test script to verify OpenAI analysis functions\nimport { analyzeWritingStyle } from \"./server/openai\";\n\nasync function testAnalysis() {\n  console.log(\"Testing OpenAI Analysis Functions...\");\n  \n  try {\n    // Test style analysis with sample data\n    const testRequest = {\n      documents: [\n        {\n          id: \"test-1\",\n          title: \"Chapter 1\",\n          content: \"The rain fell in sheets against the cracked windows of the old mansion, each droplet drumming a chaotic rhythm that echoed through the empty halls. Detective Sarah Morrison stood in the grand foyer, her breath visible in the cold air, studying the scene before her with practiced eyes. The body lay sprawled across the marble floor, a dark pool spreading beneath it like spilled ink on parchment. She had seen death before, countless times in her twenty years on the force, but something about this scene felt different, wrong in a way she couldn't quite articulate.\"\n        },\n        {\n          id: \"test-2\", \n          title: \"Chapter 2\",\n          content: \"The morning sun struggled to break through the heavy clouds as Detective Morrison returned to the Blackwood estate. She had spent the night reviewing the preliminary forensics report, and several inconsistencies had emerged that warranted further investigation. The butler, Mr. Henderson, greeted her at the door with the same stoic expression he had worn the day before. She followed him through the labyrinthine corridors, noting how the portraits on the walls seemed to watch her progress with painted eyes that held secrets of their own.\"\n        }\n      ],\n      projectContext: \"Mystery Novel\"\n    };\n    \n    console.log(\"Calling analyzeWritingStyle...\");\n    const result = await analyzeWritingStyle(testRequest);\n    \n    console.log(\"Analysis completed!\");\n    console.log(\"Success:\", result.success);\n    console.log(\"Data keys:\", Object.keys(result.data));\n    console.log(\"Recommendations:\", result.recommendations);\n    console.log(\"\\nFull result:\");\n    console.log(JSON.stringify(result, null, 2));\n    \n  } catch (error) {\n    console.error(\"Test failed:\", error);\n  }\n}\n\n// Run the test\ntestAnalysis().catch(console.error);","size_bytes":2183},"server/collaboration.ts":{"content":"import * as Y from 'yjs';\nimport * as syncProtocol from 'y-protocols/sync';\nimport * as awarenessProtocol from 'y-protocols/awareness';\nimport * as encoding from 'lib0/encoding';\nimport * as decoding from 'lib0/decoding';\nimport { WebSocket } from 'ws';\nimport { storage } from './storage';\nimport type { User, DocumentCollaborationState, CollaborationPresence } from '@shared/schema';\n\ninterface DocumentRoom {\n  doc: Y.Doc;\n  awareness: awarenessProtocol.Awareness;\n  clients: Map<string, CollaborationClient>;\n  lastSaved: Date;\n  saveTimer?: NodeJS.Timeout;\n}\n\ninterface CollaborationClient {\n  ws: WebSocket;\n  userId: string;\n  user: User;\n  documentId: string;\n  projectId: string;\n  role: 'owner' | 'editor' | 'reviewer' | 'reader';\n  color: string;\n  cursorPos?: { line: number; column: number };\n}\n\nexport class CollaborationService {\n  private static instance: CollaborationService;\n  private rooms: Map<string, DocumentRoom> = new Map();\n  private clients: Map<WebSocket, CollaborationClient> = new Map();\n  private cleanupInterval: NodeJS.Timeout;\n\n  private constructor() {\n    // Clean up stale presence every minute\n    this.cleanupInterval = setInterval(() => {\n      storage.cleanupStalePresence().catch(console.error);\n    }, 60000);\n  }\n\n  public static getInstance(): CollaborationService {\n    if (!CollaborationService.instance) {\n      CollaborationService.instance = new CollaborationService();\n    }\n    return CollaborationService.instance;\n  }\n\n  public async handleConnection(ws: WebSocket, user: User, documentId: string, projectId: string) {\n    try {\n      // Get user's role in the project\n      const project = await storage.getProject(projectId);\n      if (!project) {\n        ws.send(JSON.stringify({ type: 'error', message: 'Project not found' }));\n        ws.close();\n        return;\n      }\n\n      let role: CollaborationClient['role'] = 'reader';\n      if (project.ownerId === user.id) {\n        role = 'owner';\n      } else {\n        const userRole = await storage.getUserRole(projectId, user.id);\n        if (userRole) {\n          role = userRole as CollaborationClient['role'];\n        }\n      }\n\n      // Get or create room for this document\n      let room = this.rooms.get(documentId);\n      if (!room) {\n        room = await this.createRoom(documentId);\n        this.rooms.set(documentId, room);\n      }\n\n      // Create client instance\n      const client: CollaborationClient = {\n        ws,\n        userId: user.id,\n        user,\n        documentId,\n        projectId,\n        role,\n        color: this.generateUserColor(user.id),\n      };\n\n      this.clients.set(ws, client);\n      room.clients.set(user.id, client);\n\n      // Update presence\n      await storage.updatePresence(projectId, user.id, documentId, 'online', undefined, client.color);\n\n      // Set up awareness\n      room.awareness.setLocalStateField('user', {\n        id: user.id,\n        name: `${user.firstName || ''} ${user.lastName || ''}`.trim() || user.email,\n        color: client.color,\n        role,\n      });\n\n      // Send initial sync\n      const syncEncoder = encoding.createEncoder();\n      encoding.writeVarUint(syncEncoder, 0); // messageType: sync\n      syncProtocol.writeSyncStep1(syncEncoder, room.doc);\n      ws.send(encoding.toUint8Array(syncEncoder));\n\n      // Send awareness states\n      const awarenessStates = room.awareness.getStates();\n      if (awarenessStates.size > 0) {\n        const encoder = encoding.createEncoder();\n        encoding.writeVarUint(encoder, 1); // messageType: awareness\n        const awarenessUpdate = awarenessProtocol.encodeAwarenessUpdate(room.awareness, Array.from(awarenessStates.keys()));\n        encoding.writeVarUint8Array(encoder, awarenessUpdate);\n        ws.send(encoding.toUint8Array(encoder));\n      }\n\n      // Set up message handling\n      ws.on('message', async (data: Buffer) => {\n        await this.handleMessage(client, data);\n      });\n\n      ws.on('close', async () => {\n        await this.handleDisconnect(client);\n      });\n\n      ws.on('error', (error) => {\n        console.error('WebSocket error:', error);\n        this.handleDisconnect(client).catch(console.error);\n      });\n\n      // Send connection success\n      ws.send(JSON.stringify({\n        type: 'connected',\n        documentId,\n        role,\n        color: client.color,\n      }));\n\n    } catch (error) {\n      console.error('Error handling WebSocket connection:', error);\n      ws.send(JSON.stringify({ type: 'error', message: 'Failed to establish connection' }));\n      ws.close();\n    }\n  }\n\n  private async handleMessage(client: CollaborationClient, data: Buffer) {\n    const room = this.rooms.get(client.documentId);\n    if (!room) return;\n\n    try {\n      const message = new Uint8Array(data);\n      const decoder = decoding.createDecoder(message);\n      const messageType = decoding.readVarUint(decoder);\n\n      switch (messageType) {\n        case 0: // Sync message\n          if (client.role === 'owner' || client.role === 'editor') {\n            const encoder = encoding.createEncoder();\n            encoding.writeVarUint(encoder, 0); // messageType: sync\n            \n            const syncMessageType = syncProtocol.readSyncMessage(decoder, encoder, room.doc, null);\n            \n            if (encoding.length(encoder) > 1) {\n              client.ws.send(encoding.toUint8Array(encoder));\n            }\n\n            // Broadcast document changes to all clients\n            if (syncMessageType === syncProtocol.messageYjsSyncStep2) {\n              this.broadcastUpdate(room, client, message);\n              this.scheduleRoomSave(client.documentId);\n            }\n          } else {\n            client.ws.send(JSON.stringify({\n              type: 'permission-denied',\n              message: 'You do not have permission to edit this document',\n            }));\n          }\n          break;\n\n        case 1: // Awareness message\n          awarenessProtocol.applyAwarenessUpdate(room.awareness, message, client);\n          \n          // Broadcast awareness to all other clients\n          room.clients.forEach((otherClient) => {\n            if (otherClient.userId !== client.userId) {\n              otherClient.ws.send(message);\n            }\n          });\n\n          // Update cursor position if included\n          const awareness = room.awareness.getLocalState();\n          if (awareness?.cursor) {\n            client.cursorPos = awareness.cursor;\n            storage.updatePresence(\n              client.projectId,\n              client.userId,\n              client.documentId,\n              'online',\n              client.cursorPos,\n              client.color\n            ).catch(console.error);\n          }\n          break;\n\n        case 2: // Custom message (comments, etc)\n          const customMessage = JSON.parse(decoding.readVarString(decoder));\n          await this.handleCustomMessage(client, customMessage);\n          break;\n      }\n    } catch (error) {\n      console.error('Error handling message:', error);\n      client.ws.send(JSON.stringify({\n        type: 'error',\n        message: 'Failed to process message',\n      }));\n    }\n  }\n\n  private async handleCustomMessage(client: CollaborationClient, message: any) {\n    const room = this.rooms.get(client.documentId);\n    if (!room) return;\n\n    switch (message.type) {\n      case 'comment-add':\n        if (client.role !== 'reader') {\n          const comment = await storage.createComment(\n            client.documentId,\n            client.userId,\n            message.content,\n            message.range\n          );\n          \n          // Broadcast to all clients\n          this.broadcastToRoom(room, {\n            type: 'comment-added',\n            comment,\n          });\n        } else {\n          client.ws.send(JSON.stringify({\n            type: 'permission-denied',\n            message: 'You do not have permission to add comments',\n          }));\n        }\n        break;\n\n      case 'comment-resolve':\n        if (client.role !== 'reader') {\n          const resolved = await storage.resolveComment(message.commentId);\n          \n          // Broadcast to all clients\n          this.broadcastToRoom(room, {\n            type: 'comment-updated',\n            comment: resolved,\n          });\n        }\n        break;\n\n      case 'ping':\n        client.ws.send(JSON.stringify({ type: 'pong' }));\n        break;\n    }\n  }\n\n  private async handleDisconnect(client: CollaborationClient) {\n    const room = this.rooms.get(client.documentId);\n    if (room) {\n      room.clients.delete(client.userId);\n      \n      // Save document state before disconnect\n      if (client.role === 'owner' || client.role === 'editor') {\n        await this.saveRoom(client.documentId);\n      }\n\n      // Clean up room if empty\n      if (room.clients.size === 0) {\n        if (room.saveTimer) {\n          clearTimeout(room.saveTimer);\n        }\n        await this.saveRoom(client.documentId);\n        this.rooms.delete(client.documentId);\n      }\n\n      // Remove awareness - set local state to null\n      room.awareness.setLocalState(null);\n    }\n\n    // Update presence to offline\n    await storage.updatePresence(\n      client.projectId,\n      client.userId,\n      null,\n      'offline'\n    ).catch(console.error);\n\n    this.clients.delete(client.ws);\n  }\n\n  private async createRoom(documentId: string): Promise<DocumentRoom> {\n    const doc = new Y.Doc();\n    const awareness = new awarenessProtocol.Awareness(doc);\n\n    // Load existing state from database\n    const state = await storage.getCollaborationState(documentId);\n    if (state && state.ydocState) {\n      const stateArray = new Uint8Array(Buffer.from(state.ydocState, 'base64'));\n      Y.applyUpdate(doc, stateArray);\n    } else {\n      // Initialize XmlFragment for new documents\n      const xmlFragment = doc.getXmlFragment('prosemirror');\n      // Optionally initialize with empty ProseMirror content\n    }\n\n    return {\n      doc,\n      awareness,\n      clients: new Map(),\n      lastSaved: new Date(),\n    };\n  }\n\n  private scheduleRoomSave(documentId: string) {\n    const room = this.rooms.get(documentId);\n    if (!room) return;\n\n    // Clear existing timer\n    if (room.saveTimer) {\n      clearTimeout(room.saveTimer);\n    }\n\n    // Save after 5 seconds of inactivity\n    room.saveTimer = setTimeout(() => {\n      this.saveRoom(documentId).catch(console.error);\n    }, 5000);\n  }\n\n  private async saveRoom(documentId: string) {\n    const room = this.rooms.get(documentId);\n    if (!room) return;\n\n    try {\n      const stateArray = Y.encodeStateAsUpdate(room.doc);\n      const stateBase64 = Buffer.from(stateArray).toString('base64');\n      \n      await storage.saveCollaborationState(documentId, stateBase64);\n      room.lastSaved = new Date();\n\n      // Also update document content and word count\n      // Get the XmlFragment and convert to HTML for storage\n      const xmlFragment = room.doc.getXmlFragment('prosemirror');\n      // For now, we'll store the raw Yjs state and let the client handle rendering\n      // This preserves the structured document format\n      const content = ''; // Content will be reconstructed from Yjs state\n      const wordCount = 0; // Word count will be calculated client-side\n\n      const document = await storage.getDocument(documentId);\n      if (document) {\n        await storage.updateDocument(\n          documentId,\n          { content },\n          document.authorId\n        );\n      }\n    } catch (error) {\n      console.error('Error saving room state:', error);\n    }\n  }\n\n  private broadcastUpdate(room: DocumentRoom, sender: CollaborationClient, update: Uint8Array) {\n    room.clients.forEach((client) => {\n      if (client.userId !== sender.userId) {\n        client.ws.send(update);\n      }\n    });\n  }\n\n  private broadcastToRoom(room: DocumentRoom, message: any) {\n    const messageStr = JSON.stringify(message);\n    room.clients.forEach((client) => {\n      client.ws.send(messageStr);\n    });\n  }\n\n  private generateUserColor(userId: string): string {\n    const colors = [\n      '#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FECA57',\n      '#48C9B0', '#F8B739', '#6C5CE7', '#A29BFE', '#FD79A8',\n    ];\n    \n    let hash = 0;\n    for (let i = 0; i < userId.length; i++) {\n      hash = userId.charCodeAt(i) + ((hash << 5) - hash);\n    }\n    \n    return colors[Math.abs(hash) % colors.length];\n  }\n\n  public async getDocumentCollaborationState(documentId: string): Promise<string | null> {\n    const state = await storage.getCollaborationState(documentId);\n    return state?.ydocState || null;\n  }\n\n  public destroy() {\n    if (this.cleanupInterval) {\n      clearInterval(this.cleanupInterval);\n    }\n    \n    // Save all rooms before shutdown\n    this.rooms.forEach((_, documentId) => {\n      this.saveRoom(documentId).catch(console.error);\n    });\n    \n    // Close all connections\n    this.clients.forEach((client) => {\n      client.ws.close();\n    });\n    \n    this.rooms.clear();\n    this.clients.clear();\n  }\n}","size_bytes":12938},"client/src/components/add-comment-dialog.tsx":{"content":"import { useState } from 'react';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Input } from \"@/components/ui/input\";\nimport { MessageSquare, Send } from \"lucide-react\";\n\ninterface AddCommentDialogProps {\n  open: boolean;\n  onClose: () => void;\n  onSubmit: (content: string, range?: { start: number; end: number }) => void;\n  selectedText?: string;\n  defaultRange?: { start: number; end: number };\n}\n\nexport default function AddCommentDialog({\n  open,\n  onClose,\n  onSubmit,\n  selectedText,\n  defaultRange,\n}: AddCommentDialogProps) {\n  const [content, setContent] = useState('');\n  const [rangeStart, setRangeStart] = useState(defaultRange?.start ?? 0);\n  const [rangeEnd, setRangeEnd] = useState(defaultRange?.end ?? 0);\n  const [useRange, setUseRange] = useState(!!defaultRange);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (content.trim()) {\n      const range = useRange ? { start: rangeStart, end: rangeEnd } : undefined;\n      onSubmit(content.trim(), range);\n      setContent('');\n      setRangeStart(0);\n      setRangeEnd(0);\n      onClose();\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md\" data-testid=\"add-comment-dialog\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <MessageSquare className=\"h-5 w-5\" />\n            <span>Add Comment</span>\n          </DialogTitle>\n          <DialogDescription>\n            Add a comment to this document. You can optionally reference a specific text range.\n          </DialogDescription>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          {/* Selected Text Preview */}\n          {selectedText && (\n            <div className=\"p-3 bg-muted rounded-lg\">\n              <Label className=\"text-xs text-muted-foreground mb-1\">Selected Text:</Label>\n              <p className=\"text-sm italic\">{selectedText}</p>\n            </div>\n          )}\n\n          {/* Comment Content */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"comment-content\">Comment</Label>\n            <Textarea\n              id=\"comment-content\"\n              value={content}\n              onChange={(e) => setContent(e.target.value)}\n              placeholder=\"Write your comment...\"\n              className=\"min-h-[100px]\"\n              data-testid=\"comment-content-textarea\"\n              autoFocus\n              required\n            />\n          </div>\n\n          {/* Optional Text Range */}\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center space-x-2\">\n              <input\n                type=\"checkbox\"\n                id=\"use-range\"\n                checked={useRange}\n                onChange={(e) => setUseRange(e.target.checked)}\n                data-testid=\"checkbox-use-range\"\n              />\n              <Label htmlFor=\"use-range\" className=\"cursor-pointer\">\n                Reference specific text range (optional)\n              </Label>\n            </div>\n            \n            {useRange && (\n              <div className=\"flex space-x-2 ml-6\">\n                <div className=\"flex-1\">\n                  <Label htmlFor=\"range-start\" className=\"text-xs\">Start</Label>\n                  <Input\n                    id=\"range-start\"\n                    type=\"number\"\n                    min=\"0\"\n                    value={rangeStart}\n                    onChange={(e) => setRangeStart(parseInt(e.target.value) || 0)}\n                    data-testid=\"input-range-start\"\n                  />\n                </div>\n                <div className=\"flex-1\">\n                  <Label htmlFor=\"range-end\" className=\"text-xs\">End</Label>\n                  <Input\n                    id=\"range-end\"\n                    type=\"number\"\n                    min=\"0\"\n                    value={rangeEnd}\n                    onChange={(e) => setRangeEnd(parseInt(e.target.value) || 0)}\n                    data-testid=\"input-range-end\"\n                  />\n                </div>\n              </div>\n            )}\n          </div>\n\n          <DialogFooter className=\"flex space-x-2\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={onClose}\n              data-testid=\"button-cancel-comment\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={!content.trim()}\n              data-testid=\"button-submit-comment\"\n            >\n              <Send className=\"h-4 w-4 mr-2\" />\n              Add Comment\n            </Button>\n          </DialogFooter>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":4972},"client/src/components/collaboration-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState, useRef, useCallback } from 'react';\nimport * as Y from 'yjs';\nimport * as encoding from 'lib0/encoding';\nimport * as decoding from 'lib0/decoding';\nimport * as syncProtocol from 'y-protocols/sync';\nimport * as awarenessProtocol from 'y-protocols/awareness';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuth } from '@/hooks/useAuth';\n\ninterface CollaborationContextType {\n  ydoc: Y.Doc | null;\n  awareness: awarenessProtocol.Awareness | null;\n  isConnected: boolean;\n  onlineUsers: Map<number, any>;\n  sendComment: (type: string, data: any) => void;\n  userColor: string;\n  userRole: 'owner' | 'editor' | 'reviewer' | 'reader' | null;\n  xmlFragment: Y.XmlFragment | null;\n}\n\nconst CollaborationContext = createContext<CollaborationContextType>({\n  ydoc: null,\n  awareness: null,\n  isConnected: false,\n  onlineUsers: new Map(),\n  sendComment: () => {},\n  userColor: '',\n  userRole: null,\n  xmlFragment: null,\n});\n\nexport const useCollaboration = () => useContext(CollaborationContext);\n\ninterface CollaborationProviderProps {\n  documentId: string;\n  projectId: string;\n  children: React.ReactNode;\n}\n\nexport function CollaborationProvider({ documentId, projectId, children }: CollaborationProviderProps) {\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const [isConnected, setIsConnected] = useState(false);\n  const [onlineUsers, setOnlineUsers] = useState<Map<number, any>>(new Map());\n  const [userColor, setUserColor] = useState('');\n  const [userRole, setUserRole] = useState<'owner' | 'editor' | 'reviewer' | 'reader' | null>(null);\n  \n  const wsRef = useRef<WebSocket | null>(null);\n  const ydocRef = useRef<Y.Doc | null>(null);\n  const awarenessRef = useRef<awarenessProtocol.Awareness | null>(null);\n  const xmlFragmentRef = useRef<Y.XmlFragment | null>(null);\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const reconnectAttemptsRef = useRef(0);\n  const pingIntervalRef = useRef<NodeJS.Timeout | null>(null);\n\n  const sendMessage = useCallback((message: Uint8Array | string) => {\n    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n      if (typeof message === 'string') {\n        wsRef.current.send(message);\n      } else {\n        wsRef.current.send(message);\n      }\n    }\n  }, []);\n\n  const sendComment = useCallback((type: string, data: any) => {\n    const encoder = encoding.createEncoder();\n    encoding.writeVarUint(encoder, 2); // Custom message type\n    encoding.writeVarString(encoder, JSON.stringify({ type, ...data }));\n    sendMessage(encoding.toUint8Array(encoder));\n  }, [sendMessage]);\n\n  const handleMessage = useCallback((event: MessageEvent) => {\n    try {\n      // Try to parse as JSON first (for custom messages)\n      if (typeof event.data === 'string') {\n        const message = JSON.parse(event.data);\n        \n        switch (message.type) {\n          case 'connected':\n            setIsConnected(true);\n            setUserColor(message.color || '');\n            setUserRole(message.role || null);\n            reconnectAttemptsRef.current = 0;\n            toast({\n              title: \"Connected\",\n              description: \"Real-time collaboration is active\",\n            });\n            break;\n            \n          case 'error':\n            console.error('Collaboration error:', message.message);\n            toast({\n              title: \"Collaboration Error\",\n              description: message.message,\n              variant: \"destructive\",\n            });\n            break;\n            \n          case 'permission-denied':\n            toast({\n              title: \"Permission Denied\",\n              description: message.message,\n              variant: \"destructive\",\n            });\n            break;\n            \n          case 'comment-added':\n          case 'comment-updated':\n            // These will be handled by the comment components\n            window.dispatchEvent(new CustomEvent('collaboration-comment', { detail: message }));\n            break;\n            \n          case 'pong':\n            // Ping response received\n            break;\n        }\n      } else {\n        // Binary message (Yjs sync or awareness)\n        const data = new Uint8Array(event.data);\n        const decoder = decoding.createDecoder(data);\n        const messageType = decoding.readVarUint(decoder);\n        \n        if (!ydocRef.current || !awarenessRef.current) {\n          console.warn('Received message before initialization');\n          return;\n        }\n        \n        switch (messageType) {\n          case 0: // Sync message\n            const encoder = encoding.createEncoder();\n            encoding.writeVarUint(encoder, 0); // messageType: sync\n            const syncMessageType = syncProtocol.readSyncMessage(decoder, encoder, ydocRef.current, null);\n            \n            if (encoding.length(encoder) > 1) {\n              sendMessage(encoding.toUint8Array(encoder));\n            }\n            \n            // Sync complete - check if we received sync step 2\n            if (syncMessageType === syncProtocol.messageYjsSyncStep2) {\n              setIsConnected(true);\n            }\n            break;\n            \n          case 1: // Awareness message\n            awarenessProtocol.applyAwarenessUpdate(awarenessRef.current, data, null);\n            break;\n        }\n      }\n    } catch (error) {\n      console.error('Error handling collaboration message:', error);\n    }\n  }, [toast, sendMessage]);\n\n  const connect = useCallback(() => {\n    if (wsRef.current?.readyState === WebSocket.OPEN) {\n      return;\n    }\n\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    const ws = new WebSocket(`${protocol}//${window.location.host}/ws/collaboration?documentId=${documentId}&projectId=${projectId}`);\n    \n    ws.binaryType = 'arraybuffer';\n    wsRef.current = ws;\n\n    ws.onopen = () => {\n      console.log('WebSocket connected');\n      \n      // Send initial sync request\n      if (ydocRef.current) {\n        const encoder = encoding.createEncoder();\n        encoding.writeVarUint(encoder, 0); // messageType: sync\n        syncProtocol.writeSyncStep1(encoder, ydocRef.current);\n        ws.send(encoding.toUint8Array(encoder));\n      }\n      \n      // Start ping interval to keep connection alive\n      if (pingIntervalRef.current) {\n        clearInterval(pingIntervalRef.current);\n      }\n      pingIntervalRef.current = setInterval(() => {\n        sendComment('ping', {});\n      }, 30000); // Ping every 30 seconds\n    };\n\n    ws.onmessage = handleMessage;\n\n    ws.onclose = () => {\n      console.log('WebSocket disconnected');\n      setIsConnected(false);\n      wsRef.current = null;\n      \n      // Clear ping interval\n      if (pingIntervalRef.current) {\n        clearInterval(pingIntervalRef.current);\n        pingIntervalRef.current = null;\n      }\n      \n      // Attempt to reconnect with exponential backoff\n      if (reconnectAttemptsRef.current < 5) {\n        const timeout = Math.min(1000 * Math.pow(2, reconnectAttemptsRef.current), 10000);\n        reconnectAttemptsRef.current++;\n        \n        toast({\n          title: \"Connection Lost\",\n          description: `Reconnecting in ${timeout / 1000} seconds...`,\n        });\n        \n        if (reconnectTimeoutRef.current) {\n          clearTimeout(reconnectTimeoutRef.current);\n        }\n        reconnectTimeoutRef.current = setTimeout(() => {\n          connect();\n        }, timeout);\n      } else {\n        toast({\n          title: \"Connection Failed\",\n          description: \"Unable to establish real-time collaboration. Working offline.\",\n          variant: \"destructive\",\n        });\n      }\n    };\n\n    ws.onerror = (error) => {\n      console.error('WebSocket error:', error);\n    };\n  }, [documentId, projectId, handleMessage, sendComment, toast]);\n\n  useEffect(() => {\n    if (!user) return;\n\n    // Initialize Yjs document with XmlFragment\n    const ydoc = new Y.Doc();\n    const awareness = new awarenessProtocol.Awareness(ydoc);\n    const xmlFragment = ydoc.getXmlFragment('prosemirror');\n    \n    ydocRef.current = ydoc;\n    awarenessRef.current = awareness;\n    xmlFragmentRef.current = xmlFragment;\n\n    // Set local user info in awareness\n    awareness.setLocalStateField('user', {\n      id: user.id,\n      name: `${user.firstName || ''} ${user.lastName || ''}`.trim() || user.email,\n      color: userColor,\n    });\n\n    // Listen for awareness changes\n    awareness.on('change', () => {\n      const states = awareness.getStates();\n      setOnlineUsers(new Map(states));\n    });\n\n    // Listen for document updates\n    ydoc.on('update', (update: Uint8Array) => {\n      if (wsRef.current?.readyState === WebSocket.OPEN) {\n        const encoder = encoding.createEncoder();\n        encoding.writeVarUint(encoder, 0); // messageType: sync\n        syncProtocol.writeUpdate(encoder, update);\n        wsRef.current.send(encoding.toUint8Array(encoder));\n      }\n    });\n\n    // Listen for awareness updates  \n    awareness.on('update', ({ added, updated, removed }: any) => {\n      if (wsRef.current?.readyState === WebSocket.OPEN) {\n        const encoder = encoding.createEncoder();\n        encoding.writeVarUint(encoder, 1); // messageType: awareness\n        const awarenessUpdate = awarenessProtocol.encodeAwarenessUpdate(awareness, [...added, ...updated, ...removed]);\n        encoding.writeVarUint8Array(encoder, awarenessUpdate);\n        wsRef.current.send(encoding.toUint8Array(encoder));\n      }\n    });\n\n    // Connect to WebSocket\n    connect();\n\n    // Cleanup\n    return () => {\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n      }\n      if (pingIntervalRef.current) {\n        clearInterval(pingIntervalRef.current);\n      }\n      if (wsRef.current) {\n        wsRef.current.close();\n      }\n      ydoc.destroy();\n      awareness.destroy();\n    };\n  }, [user, documentId, projectId, connect]);\n\n  const value: CollaborationContextType = {\n    ydoc: ydocRef.current,\n    awareness: awarenessRef.current,\n    isConnected,\n    onlineUsers,\n    sendComment,\n    userColor,\n    userRole,\n    xmlFragment: xmlFragmentRef.current,\n  };\n\n  return (\n    <CollaborationContext.Provider value={value}>\n      {children}\n    </CollaborationContext.Provider>\n  );\n}","size_bytes":10288},"client/src/components/comment-sidebar.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { \n  MessageSquare, \n  X, \n  Plus,\n  CheckCircle,\n  Clock,\n  Reply,\n  MoreVertical,\n  Edit,\n  Trash\n} from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport CommentThread from './comment-thread';\nimport AddCommentDialog from './add-comment-dialog';\nimport type { DocumentComment as Comment, User } from '@shared/schema';\n\ninterface CommentSidebarProps {\n  documentId: string;\n  comments: Comment[];\n  currentUser: User | null;\n  userRole?: 'owner' | 'editor' | 'reviewer' | 'reader' | null;\n  onClose?: () => void;\n  onAddComment: (content: string, range?: { start: number; end: number }) => void;\n  onUpdateComment: (commentId: string, content: string) => void;\n  onDeleteComment: (commentId: string) => void;\n  onResolveComment: (commentId: string) => void;\n  onReplyToComment: (commentId: string, content: string) => void;\n}\n\nexport default function CommentSidebar({\n  documentId,\n  comments,\n  currentUser,\n  userRole,\n  onClose,\n  onAddComment,\n  onUpdateComment,\n  onDeleteComment,\n  onResolveComment,\n  onReplyToComment,\n}: CommentSidebarProps) {\n  const [showAddDialog, setShowAddDialog] = useState(false);\n  const [selectedComment, setSelectedComment] = useState<Comment | null>(null);\n  const [filter, setFilter] = useState<'all' | 'open' | 'resolved'>('all');\n  \n  // Filter comments based on selected filter\n  const filteredComments = comments.filter((comment) => {\n    if (filter === 'all') return true;\n    if (filter === 'open') return !comment.resolved;\n    if (filter === 'resolved') return comment.resolved;\n    return true;\n  });\n\n  // Group comments by thread (parent comments and their replies)\n  const commentThreads = filteredComments.reduce((threads, comment) => {\n    if (!comment.parentId) {\n      threads[comment.id] = {\n        parent: comment,\n        replies: filteredComments.filter(c => c.parentId === comment.id)\n      };\n    }\n    return threads;\n  }, {} as Record<string, { parent: Comment; replies: Comment[] }>);\n\n  const canComment = userRole && userRole !== 'reader';\n\n  return (\n    <div className=\"h-full flex flex-col bg-background border-l border-border\" data-testid=\"comment-sidebar\">\n      {/* Header */}\n      <div className=\"p-4 border-b border-border\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <div className=\"flex items-center space-x-2\">\n            <MessageSquare className=\"h-5 w-5\" />\n            <h3 className=\"font-semibold\">Comments</h3>\n            <Badge variant=\"secondary\">{comments.length}</Badge>\n          </div>\n          {onClose && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onClose}\n              data-testid=\"button-close-comments\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          )}\n        </div>\n\n        {/* Filter Tabs */}\n        <div className=\"flex space-x-1\">\n          <Button\n            variant={filter === 'all' ? 'default' : 'ghost'}\n            size=\"sm\"\n            onClick={() => setFilter('all')}\n            data-testid=\"filter-all-comments\"\n          >\n            All ({comments.length})\n          </Button>\n          <Button\n            variant={filter === 'open' ? 'default' : 'ghost'}\n            size=\"sm\"\n            onClick={() => setFilter('open')}\n            data-testid=\"filter-open-comments\"\n          >\n            <Clock className=\"h-4 w-4 mr-1\" />\n            Open ({comments.filter(c => !c.resolved).length})\n          </Button>\n          <Button\n            variant={filter === 'resolved' ? 'default' : 'ghost'}\n            size=\"sm\"\n            onClick={() => setFilter('resolved')}\n            data-testid=\"filter-resolved-comments\"\n          >\n            <CheckCircle className=\"h-4 w-4 mr-1\" />\n            Resolved ({comments.filter(c => c.resolved).length})\n          </Button>\n        </div>\n      </div>\n\n      {/* Comments List */}\n      <ScrollArea className=\"flex-1 p-4\">\n        {Object.keys(commentThreads).length === 0 ? (\n          <div className=\"text-center py-8 text-muted-foreground\">\n            <MessageSquare className=\"h-12 w-12 mx-auto mb-3 opacity-50\" />\n            <p>No comments yet</p>\n            {canComment && (\n              <p className=\"text-sm mt-2\">Select text and click \"Add Comment\" to start</p>\n            )}\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {Object.entries(commentThreads).map(([threadId, thread]) => (\n              <CommentThread\n                key={threadId}\n                comment={thread.parent}\n                replies={thread.replies}\n                currentUser={currentUser}\n                userRole={userRole}\n                onReply={(content) => onReplyToComment(thread.parent.id, content)}\n                onEdit={(content) => onUpdateComment(thread.parent.id, content)}\n                onDelete={() => onDeleteComment(thread.parent.id)}\n                onResolve={() => onResolveComment(thread.parent.id)}\n              />\n            ))}\n          </div>\n        )}\n      </ScrollArea>\n\n      {/* Add Comment Button */}\n      {canComment && (\n        <div className=\"p-4 border-t border-border\">\n          <Button\n            className=\"w-full\"\n            onClick={() => setShowAddDialog(true)}\n            data-testid=\"button-add-new-comment\"\n          >\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Add Comment\n          </Button>\n        </div>\n      )}\n\n      {/* Add Comment Dialog */}\n      {showAddDialog && (\n        <AddCommentDialog\n          open={showAddDialog}\n          onClose={() => setShowAddDialog(false)}\n          onSubmit={(content, range) => {\n            onAddComment(content, range);\n            setShowAddDialog(false);\n          }}\n        />\n      )}\n    </div>\n  );\n}","size_bytes":6285},"client/src/components/comment-thread.tsx":{"content":"import { useState } from 'react';\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { \n  Reply,\n  Edit,\n  Trash,\n  CheckCircle,\n  Clock,\n  MoreVertical,\n  Send,\n  X,\n  Check\n} from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport type { DocumentComment as Comment, User } from '@shared/schema';\n\ninterface CommentThreadProps {\n  comment: Comment;\n  replies: Comment[];\n  currentUser: User | null;\n  userRole?: 'owner' | 'editor' | 'reviewer' | 'reader' | null;\n  onReply: (content: string) => void;\n  onEdit: (content: string) => void;\n  onDelete: () => void;\n  onResolve: () => void;\n}\n\nexport default function CommentThread({\n  comment,\n  replies,\n  currentUser,\n  userRole,\n  onReply,\n  onEdit,\n  onDelete,\n  onResolve,\n}: CommentThreadProps) {\n  const [isReplying, setIsReplying] = useState(false);\n  const [isEditing, setIsEditing] = useState(false);\n  const [replyContent, setReplyContent] = useState('');\n  const [editContent, setEditContent] = useState(comment.content || '');\n\n  const isAuthor = currentUser?.id === comment.authorId;\n  const canEdit = isAuthor && userRole !== 'reader';\n  const canDelete = (isAuthor || userRole === 'owner') && userRole !== 'reader';\n  const canResolve = userRole !== 'reader';\n  const canReply = userRole !== 'reader';\n\n  const handleReply = () => {\n    if (replyContent.trim()) {\n      onReply(replyContent.trim());\n      setReplyContent('');\n      setIsReplying(false);\n    }\n  };\n\n  const handleEdit = () => {\n    if (editContent.trim() && editContent !== comment.content) {\n      onEdit(editContent.trim());\n      setIsEditing(false);\n    }\n  };\n\n  const getUserInitials = (user: any) => {\n    if (user?.firstName && user?.lastName) {\n      return `${user.firstName[0]}${user.lastName[0]}`.toUpperCase();\n    }\n    if (user?.email) {\n      return user.email[0].toUpperCase();\n    }\n    return 'U';\n  };\n\n  return (\n    <Card className=\"p-4\" data-testid={`comment-thread-${comment.id}`}>\n      {/* Main Comment */}\n      <div className=\"space-y-3\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex items-start space-x-3\">\n            <Avatar className=\"h-8 w-8\">\n              {comment.author?.profileImageUrl && (\n                <AvatarImage src={comment.author.profileImageUrl} />\n              )}\n              <AvatarFallback>{getUserInitials(comment.author)}</AvatarFallback>\n            </Avatar>\n            <div className=\"flex-1\">\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"font-medium text-sm\">\n                  {comment.author?.firstName} {comment.author?.lastName}\n                </span>\n                <span className=\"text-xs text-muted-foreground\">\n                  {comment.createdAt && formatDistanceToNow(new Date(comment.createdAt), { addSuffix: true })}\n                </span>\n                {comment.resolved && (\n                  <Badge variant=\"secondary\" className=\"text-xs\">\n                    <CheckCircle className=\"h-3 w-3 mr-1\" />\n                    Resolved\n                  </Badge>\n                )}\n              </div>\n\n              {/* Comment Content or Edit Mode */}\n              {isEditing ? (\n                <div className=\"mt-2 space-y-2\">\n                  <Textarea\n                    value={editContent}\n                    onChange={(e) => setEditContent(e.target.value)}\n                    className=\"min-h-[60px]\"\n                    data-testid=\"edit-comment-textarea\"\n                    autoFocus\n                  />\n                  <div className=\"flex space-x-2\">\n                    <Button\n                      size=\"sm\"\n                      onClick={handleEdit}\n                      data-testid=\"button-save-edit\"\n                    >\n                      <Check className=\"h-4 w-4 mr-1\" />\n                      Save\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => {\n                        setIsEditing(false);\n                        setEditContent(comment.content || '');\n                      }}\n                      data-testid=\"button-cancel-edit\"\n                    >\n                      Cancel\n                    </Button>\n                  </div>\n                </div>\n              ) : (\n                <p className=\"text-sm mt-1 whitespace-pre-wrap\">{comment.content}</p>\n              )}\n\n              {/* Text Range Reference */}\n              {comment.range && (\n                <div className=\"mt-2 p-2 bg-muted rounded text-xs\">\n                  <span className=\"text-muted-foreground\">Reference: </span>\n                  <span>Characters {comment.range.start} - {comment.range.end}</span>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Actions Menu */}\n          {!isEditing && (canEdit || canDelete || canResolve) && (\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" size=\"sm\" data-testid={`comment-menu-${comment.id}`}>\n                  <MoreVertical className=\"h-4 w-4\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\">\n                {canEdit && !comment.resolved && (\n                  <DropdownMenuItem\n                    onClick={() => setIsEditing(true)}\n                    data-testid=\"menu-edit-comment\"\n                  >\n                    <Edit className=\"h-4 w-4 mr-2\" />\n                    Edit\n                  </DropdownMenuItem>\n                )}\n                {canResolve && !comment.resolved && (\n                  <DropdownMenuItem\n                    onClick={onResolve}\n                    data-testid=\"menu-resolve-comment\"\n                  >\n                    <CheckCircle className=\"h-4 w-4 mr-2\" />\n                    Resolve\n                  </DropdownMenuItem>\n                )}\n                {canDelete && (\n                  <DropdownMenuItem\n                    onClick={onDelete}\n                    className=\"text-destructive\"\n                    data-testid=\"menu-delete-comment\"\n                  >\n                    <Trash className=\"h-4 w-4 mr-2\" />\n                    Delete\n                  </DropdownMenuItem>\n                )}\n              </DropdownMenuContent>\n            </DropdownMenu>\n          )}\n        </div>\n\n        {/* Reply Button */}\n        {!isEditing && canReply && !comment.resolved && (\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setIsReplying(true)}\n              data-testid=\"button-reply\"\n            >\n              <Reply className=\"h-4 w-4 mr-1\" />\n              Reply\n            </Button>\n          </div>\n        )}\n\n        {/* Reply Form */}\n        {isReplying && (\n          <div className=\"ml-11 space-y-2\">\n            <Textarea\n              value={replyContent}\n              onChange={(e) => setReplyContent(e.target.value)}\n              placeholder=\"Write a reply...\"\n              className=\"min-h-[60px]\"\n              data-testid=\"reply-textarea\"\n              autoFocus\n            />\n            <div className=\"flex space-x-2\">\n              <Button\n                size=\"sm\"\n                onClick={handleReply}\n                disabled={!replyContent.trim()}\n                data-testid=\"button-send-reply\"\n              >\n                <Send className=\"h-4 w-4 mr-1\" />\n                Send\n              </Button>\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={() => {\n                  setIsReplying(false);\n                  setReplyContent('');\n                }}\n                data-testid=\"button-cancel-reply\"\n              >\n                Cancel\n              </Button>\n            </div>\n          </div>\n        )}\n\n        {/* Replies */}\n        {replies.length > 0 && (\n          <div className=\"ml-11 space-y-3\">\n            {replies.map((reply) => (\n              <div key={reply.id} className=\"flex items-start space-x-3\">\n                <Avatar className=\"h-7 w-7\">\n                  {reply.author?.profileImageUrl && (\n                    <AvatarImage src={reply.author.profileImageUrl} />\n                  )}\n                  <AvatarFallback className=\"text-xs\">\n                    {getUserInitials(reply.author)}\n                  </AvatarFallback>\n                </Avatar>\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"font-medium text-sm\">\n                      {reply.author?.firstName} {reply.author?.lastName}\n                    </span>\n                    <span className=\"text-xs text-muted-foreground\">\n                      {reply.createdAt && formatDistanceToNow(new Date(reply.createdAt), { addSuffix: true })}\n                    </span>\n                  </div>\n                  <p className=\"text-sm mt-1 whitespace-pre-wrap\">{reply.content}</p>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </Card>\n  );\n}","size_bytes":9618},"client/src/components/presence-indicator.tsx":{"content":"import { useMemo } from 'react';\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  HoverCard,\n  HoverCardContent,\n  HoverCardTrigger,\n} from \"@/components/ui/hover-card\";\nimport { \n  Users, \n  Circle, \n  Edit3, \n  Eye, \n  MessageCircle,\n  UserCheck\n} from \"lucide-react\";\nimport type { User, CollaborationPresence } from '@shared/schema';\n\ninterface PresenceIndicatorProps {\n  onlineUsers: Map<number, any>;\n  currentUser?: User | null;\n  className?: string;\n}\n\nexport default function PresenceIndicator({\n  onlineUsers,\n  currentUser,\n  className = \"\"\n}: PresenceIndicatorProps) {\n  // Filter out current user and format presence data\n  const otherUsers = useMemo(() => {\n    const users: any[] = [];\n    onlineUsers.forEach((state, clientId) => {\n      if (state?.user && state.user.id !== currentUser?.id) {\n        users.push({\n          ...state.user,\n          clientId,\n          cursor: state.cursor,\n        });\n      }\n    });\n    return users;\n  }, [onlineUsers, currentUser]);\n\n  const getUserInitials = (user: any) => {\n    if (user?.name) {\n      const parts = user.name.split(' ');\n      if (parts.length >= 2) {\n        return `${parts[0][0]}${parts[1][0]}`.toUpperCase();\n      }\n      return user.name[0].toUpperCase();\n    }\n    return 'U';\n  };\n\n  const getRoleBadgeColor = (role: string) => {\n    switch (role) {\n      case 'owner':\n        return 'default';\n      case 'editor':\n        return 'secondary';\n      case 'reviewer':\n        return 'outline';\n      case 'reader':\n        return 'ghost';\n      default:\n        return 'secondary';\n    }\n  };\n\n  const getRoleIcon = (role: string) => {\n    switch (role) {\n      case 'owner':\n        return <UserCheck className=\"h-3 w-3\" />;\n      case 'editor':\n        return <Edit3 className=\"h-3 w-3\" />;\n      case 'reviewer':\n        return <MessageCircle className=\"h-3 w-3\" />;\n      case 'reader':\n        return <Eye className=\"h-3 w-3\" />;\n      default:\n        return null;\n    }\n  };\n\n  if (otherUsers.length === 0) {\n    return (\n      <div className={`flex items-center space-x-2 text-muted-foreground ${className}`} data-testid=\"presence-indicator-empty\">\n        <Users className=\"h-4 w-4\" />\n        <span className=\"text-sm\">No one else online</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`flex items-center space-x-3 ${className}`} data-testid=\"presence-indicator\">\n      <div className=\"flex items-center space-x-2\">\n        <Users className=\"h-4 w-4 text-muted-foreground\" />\n        <span className=\"text-sm font-medium\">\n          {otherUsers.length} {otherUsers.length === 1 ? 'person' : 'people'} online\n        </span>\n      </div>\n\n      {/* Avatar Stack */}\n      <div className=\"flex -space-x-2\">\n        {otherUsers.slice(0, 5).map((user, index) => (\n          <HoverCard key={`user-${user.clientId || index}`}>\n            <HoverCardTrigger>\n              <div \n                className=\"relative\"\n                data-testid={`presence-avatar-${user.id}`}\n              >\n                <Avatar \n                  className=\"h-8 w-8 border-2 border-background\"\n                  style={{\n                    borderColor: user.color || '#808080',\n                    boxShadow: `0 0 0 2px ${user.color || '#808080'}20`\n                  }}\n                >\n                  {user.profileImageUrl && (\n                    <AvatarImage src={user.profileImageUrl} />\n                  )}\n                  <AvatarFallback\n                    style={{ \n                      backgroundColor: `${user.color || '#808080'}20`,\n                      color: user.color || '#808080'\n                    }}\n                  >\n                    {getUserInitials(user)}\n                  </AvatarFallback>\n                </Avatar>\n                \n                {/* Online Status Indicator */}\n                <div className=\"absolute -bottom-0.5 -right-0.5\">\n                  <Circle \n                    className=\"h-3 w-3 fill-green-500 text-green-500\"\n                    data-testid={`status-indicator-${user.id}`}\n                  />\n                </div>\n              </div>\n            </HoverCardTrigger>\n            \n            <HoverCardContent className=\"w-64\" align=\"center\">\n              <div className=\"space-y-2\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Avatar className=\"h-10 w-10\">\n                      {user.profileImageUrl && (\n                        <AvatarImage src={user.profileImageUrl} />\n                      )}\n                      <AvatarFallback>{getUserInitials(user)}</AvatarFallback>\n                    </Avatar>\n                    <div>\n                      <p className=\"font-medium text-sm\">{user.name}</p>\n                      <div className=\"flex items-center space-x-1 mt-1\">\n                        <Circle className=\"h-2 w-2 fill-green-500 text-green-500\" />\n                        <span className=\"text-xs text-muted-foreground\">Active now</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                \n                {user.role && (\n                  <Badge \n                    variant={getRoleBadgeColor(user.role) as any}\n                    className=\"capitalize\"\n                  >\n                    {getRoleIcon(user.role)}\n                    <span className=\"ml-1\">{user.role}</span>\n                  </Badge>\n                )}\n                \n                {user.cursor && (\n                  <div className=\"text-xs text-muted-foreground\">\n                    <span>Editing at position {user.cursor.from}</span>\n                  </div>\n                )}\n              </div>\n            </HoverCardContent>\n          </HoverCard>\n        ))}\n        \n        {otherUsers.length > 5 && (\n          <div \n            className=\"flex h-8 w-8 items-center justify-center rounded-full bg-muted border-2 border-background\"\n            data-testid=\"presence-overflow-count\"\n          >\n            <span className=\"text-xs font-medium\">+{otherUsers.length - 5}</span>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":6276},"client/src/components/yjs-collaboration-extension.ts":{"content":"import { Extension } from '@tiptap/core';\nimport { ySyncPlugin, yUndoPlugin, yCursorPlugin } from 'y-prosemirror';\nimport * as Y from 'yjs';\nimport * as awarenessProtocol from 'y-protocols/awareness';\n\nexport interface YjsCollaborationOptions {\n  ydoc: Y.Doc;\n  awareness: awarenessProtocol.Awareness;\n  xmlFragment?: string;\n  user?: {\n    name: string;\n    color: string;\n  };\n}\n\nexport const YjsCollaboration = Extension.create<YjsCollaborationOptions>({\n  name: 'yjsCollaboration',\n\n  addOptions() {\n    return {\n      ydoc: new Y.Doc(),\n      awareness: null as any,\n      xmlFragment: 'default',\n      user: {\n        name: 'Anonymous',\n        color: '#30bced'\n      }\n    };\n  },\n\n  onCreate() {\n    // Set the user in awareness if provided\n    if (this.options.awareness && this.options.user) {\n      this.options.awareness.setLocalStateField('user', {\n        name: this.options.user.name,\n        color: this.options.user.color,\n      });\n    }\n  },\n\n  addProseMirrorPlugins() {\n    const fragment = this.options.xmlFragment || 'default';\n    const yXmlFragment = this.options.ydoc.getXmlFragment(fragment);\n\n    const plugins = [\n      // Main sync plugin that keeps ProseMirror and Yjs in sync\n      ySyncPlugin(yXmlFragment, {\n        // Optional: Add mapping for custom node types\n        permanentUserData: null,\n        onFirstRender: () => {\n          // Called when the editor is first rendered with the Yjs content\n          console.log('Yjs content synced to editor');\n        }\n      }),\n    ];\n\n    // Add undo plugin if we want collaborative undo/redo\n    plugins.push(\n      yUndoPlugin()\n    );\n\n    // Add cursor plugin if awareness is provided\n    if (this.options.awareness) {\n      plugins.push(\n        yCursorPlugin(this.options.awareness, {\n          cursorBuilder: (user: any) => {\n            const cursor = document.createElement('span');\n            cursor.classList.add('collaboration-cursor');\n            cursor.style.borderColor = user.color;\n            \n            const label = document.createElement('div');\n            label.classList.add('collaboration-cursor-label');\n            label.style.backgroundColor = user.color;\n            label.insertBefore(document.createTextNode(user.name), null);\n            cursor.insertBefore(label, null);\n            \n            return cursor;\n          },\n          selectionBuilder: (user: any) => {\n            const selection = document.createElement('span');\n            selection.classList.add('collaboration-selection');\n            selection.style.backgroundColor = user.color + '30'; // Add transparency\n            return selection;\n          },\n          getSelection: (state: any) => state.selection\n        })\n      );\n    }\n\n    return plugins;\n  },\n});\n\n// Helper function to get the Yjs XmlFragment from the editor\nexport function getYjsXmlFragment(ydoc: Y.Doc, fragmentName: string = 'default'): Y.XmlFragment {\n  return ydoc.getXmlFragment(fragmentName);\n}\n\n// Helper function to get current document state as Yjs update\nexport function getYjsUpdate(ydoc: Y.Doc): Uint8Array {\n  return Y.encodeStateAsUpdate(ydoc);\n}\n\n// Helper function to apply Yjs update to document\nexport function applyYjsUpdate(ydoc: Y.Doc, update: Uint8Array): void {\n  Y.applyUpdate(ydoc, update);\n}","size_bytes":3278},"client/src/hooks/useComments.ts":{"content":"import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport { useEffect } from 'react';\nimport type { DocumentComment as Comment } from '@shared/schema';\n\n// Hook to fetch document comments\nexport function useDocumentComments(documentId: string | null) {\n  return useQuery<Comment[]>({\n    queryKey: ['/api/documents', documentId, 'comments'],\n    enabled: !!documentId,\n  });\n}\n\n// Hook to create a new comment\nexport function useCreateComment(documentId: string) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (data: {\n      content: string;\n      range?: { start: number; end: number };\n      parentId?: string;\n    }) => {\n      return apiRequest('POST', `/api/documents/${documentId}/comments`, data);\n    },\n    onSuccess: (newComment) => {\n      queryClient.invalidateQueries({ \n        queryKey: ['/api/documents', documentId, 'comments'] \n      });\n      toast({\n        title: \"Comment added\",\n        description: \"Your comment has been added successfully.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add comment. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n\n// Hook to update a comment\nexport function useUpdateComment(documentId: string) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async ({ \n      commentId, \n      content \n    }: { \n      commentId: string; \n      content: string;\n    }) => {\n      return apiRequest('PATCH', `/api/comments/${commentId}`, { content });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ \n        queryKey: ['/api/documents', documentId, 'comments'] \n      });\n      toast({\n        title: \"Comment updated\",\n        description: \"Your comment has been updated successfully.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update comment. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n\n// Hook to delete a comment\nexport function useDeleteComment(documentId: string) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (commentId: string) => {\n      return apiRequest('DELETE', `/api/comments/${commentId}`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ \n        queryKey: ['/api/documents', documentId, 'comments'] \n      });\n      toast({\n        title: \"Comment deleted\",\n        description: \"The comment has been deleted.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete comment. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n\n// Hook to resolve/unresolve a comment\nexport function useResolveComment(documentId: string) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async ({ \n      commentId, \n      resolved \n    }: { \n      commentId: string; \n      resolved: boolean;\n    }) => {\n      return apiRequest('PATCH', `/api/comments/${commentId}/resolve`, { resolved });\n    },\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ \n        queryKey: ['/api/documents', documentId, 'comments'] \n      });\n      toast({\n        title: variables.resolved ? \"Comment resolved\" : \"Comment reopened\",\n        description: variables.resolved \n          ? \"The comment has been marked as resolved.\"\n          : \"The comment has been reopened.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update comment status. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n\n// Hook to listen for real-time comment updates\nexport function useCommentSubscription(documentId: string | null, enabled: boolean = true) {\n  const queryClient = useQueryClient();\n\n  useEffect(() => {\n    if (!documentId || !enabled) return;\n\n    const handleCommentUpdate = (event: CustomEvent) => {\n      const { type, comment } = event.detail;\n      \n      // Invalidate comments query to refetch latest data\n      queryClient.invalidateQueries({ \n        queryKey: ['/api/documents', documentId, 'comments'] \n      });\n    };\n\n    window.addEventListener('collaboration-comment' as any, handleCommentUpdate);\n\n    return () => {\n      window.removeEventListener('collaboration-comment' as any, handleCommentUpdate);\n    };\n  }, [documentId, enabled, queryClient]);\n}","size_bytes":4756},"client/src/components/branch-management-modal.tsx":{"content":"import { useState } from 'react';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { GitBranch, Trash2, Edit, Shield, Clock, ChevronRight } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface Branch {\n  id: string;\n  name: string;\n  description?: string;\n  parentBranchId?: string;\n  createdAt: Date;\n  updatedAt: Date;\n  createdBy: string;\n  isDefault?: boolean;\n  isProtected?: boolean;\n  commitCount?: number;\n}\n\ninterface BranchManagementModalProps {\n  open: boolean;\n  onClose: () => void;\n  branches: Branch[];\n  currentBranchId: string | null;\n  onCreateBranch: (data: { name: string; description?: string; parentBranchId?: string }) => Promise<void>;\n  onUpdateBranch: (branchId: string, data: { name?: string; description?: string }) => Promise<void>;\n  onDeleteBranch: (branchId: string) => Promise<void>;\n  userRole?: string | null;\n}\n\nexport default function BranchManagementModal({\n  open,\n  onClose,\n  branches,\n  currentBranchId,\n  onCreateBranch,\n  onUpdateBranch,\n  onDeleteBranch,\n  userRole\n}: BranchManagementModalProps) {\n  const { toast } = useToast();\n  const [mode, setMode] = useState<'list' | 'create' | 'edit'>('list');\n  const [selectedBranch, setSelectedBranch] = useState<Branch | null>(null);\n  const [deleteConfirmBranch, setDeleteConfirmBranch] = useState<Branch | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  \n  const [formData, setFormData] = useState({\n    name: '',\n    description: '',\n    parentBranchId: ''\n  });\n\n  const canManageBranches = userRole && ['owner', 'editor'].includes(userRole);\n\n  const handleCreateBranch = async () => {\n    if (!formData.name.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Branch name is required\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      await onCreateBranch({\n        name: formData.name,\n        description: formData.description || undefined,\n        parentBranchId: formData.parentBranchId || undefined\n      });\n      setMode('list');\n      setFormData({ name: '', description: '', parentBranchId: '' });\n      toast({\n        title: \"Success\",\n        description: `Branch \"${formData.name}\" created successfully`\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create branch\",\n        variant: \"destructive\"\n      });\n    }\n    setIsLoading(false);\n  };\n\n  const handleUpdateBranch = async () => {\n    if (!selectedBranch) return;\n\n    setIsLoading(true);\n    try {\n      await onUpdateBranch(selectedBranch.id, {\n        name: formData.name || undefined,\n        description: formData.description || undefined\n      });\n      setMode('list');\n      setSelectedBranch(null);\n      setFormData({ name: '', description: '', parentBranchId: '' });\n      toast({\n        title: \"Success\",\n        description: \"Branch updated successfully\"\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update branch\",\n        variant: \"destructive\"\n      });\n    }\n    setIsLoading(false);\n  };\n\n  const handleDeleteBranch = async (branch: Branch) => {\n    setIsLoading(true);\n    try {\n      await onDeleteBranch(branch.id);\n      setDeleteConfirmBranch(null);\n      toast({\n        title: \"Success\",\n        description: `Branch \"${branch.name}\" deleted successfully`\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete branch\",\n        variant: \"destructive\"\n      });\n    }\n    setIsLoading(false);\n  };\n\n  const getBranchHierarchy = (branchId: string, level = 0): string => {\n    const branch = branches.find(b => b.id === branchId);\n    if (!branch) return '';\n    \n    if (branch.parentBranchId) {\n      const parentPath = getBranchHierarchy(branch.parentBranchId, level + 1);\n      return parentPath ? `${parentPath} → ${branch.name}` : branch.name;\n    }\n    \n    return branch.name;\n  };\n\n  return (\n    <>\n      <Dialog open={open && mode !== 'list'} onOpenChange={(open) => !open && setMode('list')}>\n        <DialogContent data-testid=\"branch-management-modal\">\n          <DialogHeader>\n            <DialogTitle>\n              {mode === 'create' ? 'Create New Branch' : 'Edit Branch'}\n            </DialogTitle>\n            <DialogDescription>\n              {mode === 'create' \n                ? 'Create a new branch from an existing branch'\n                : 'Update branch details'}\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"space-y-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"branch-name\">Branch Name</Label>\n              <Input\n                id=\"branch-name\"\n                value={formData.name}\n                onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                placeholder=\"feature/new-chapter\"\n                data-testid=\"input-branch-name\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"branch-description\">Description (Optional)</Label>\n              <Textarea\n                id=\"branch-description\"\n                value={formData.description}\n                onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                placeholder=\"Describe the purpose of this branch...\"\n                rows={3}\n                data-testid=\"input-branch-description\"\n              />\n            </div>\n            \n            {mode === 'create' && (\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"parent-branch\">Parent Branch</Label>\n                <Select\n                  value={formData.parentBranchId}\n                  onValueChange={(value) => setFormData({ ...formData, parentBranchId: value })}\n                >\n                  <SelectTrigger data-testid=\"select-parent-branch\">\n                    <SelectValue placeholder=\"Select parent branch\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {branches.map((branch) => (\n                      <SelectItem key={branch.id} value={branch.id}>\n                        {branch.name}\n                        {branch.isDefault && (\n                          <Badge variant=\"outline\" className=\"ml-2 text-xs\">Default</Badge>\n                        )}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            )}\n          </div>\n          \n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setMode('list')}>\n              Cancel\n            </Button>\n            <Button\n              onClick={mode === 'create' ? handleCreateBranch : handleUpdateBranch}\n              disabled={isLoading || !formData.name.trim()}\n              data-testid={mode === 'create' ? 'button-create-branch-submit' : 'button-update-branch-submit'}\n            >\n              {isLoading ? 'Processing...' : mode === 'create' ? 'Create Branch' : 'Update Branch'}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      <Dialog open={open && mode === 'list'} onOpenChange={onClose}>\n        <DialogContent className=\"max-w-2xl\" data-testid=\"branch-list-modal\">\n          <DialogHeader>\n            <DialogTitle>Branch Management</DialogTitle>\n            <DialogDescription>\n              Manage branches for this document\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"py-4\">\n            {canManageBranches && (\n              <Button\n                onClick={() => {\n                  setFormData({ name: '', description: '', parentBranchId: currentBranchId || '' });\n                  setMode('create');\n                }}\n                className=\"w-full mb-4\"\n                data-testid=\"button-new-branch\"\n              >\n                <GitBranch className=\"h-4 w-4 mr-2\" />\n                Create New Branch\n              </Button>\n            )}\n            \n            <ScrollArea className=\"h-[400px]\">\n              <div className=\"space-y-2\">\n                {branches.map((branch) => (\n                  <div\n                    key={branch.id}\n                    className=\"p-3 border rounded-lg hover:bg-accent/50 transition-colors\"\n                    data-testid={`branch-list-item-${branch.id}`}\n                  >\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-2\">\n                          <GitBranch className=\"h-4 w-4 text-muted-foreground\" />\n                          <span className=\"font-medium\">{branch.name}</span>\n                          {branch.isDefault && (\n                            <Badge variant=\"secondary\">Default</Badge>\n                          )}\n                          {branch.isProtected && (\n                            <Badge variant=\"outline\">\n                              <Shield className=\"h-3 w-3 mr-1\" />\n                              Protected\n                            </Badge>\n                          )}\n                          {branch.id === currentBranchId && (\n                            <Badge variant=\"default\">Current</Badge>\n                          )}\n                        </div>\n                        \n                        {branch.parentBranchId && (\n                          <div className=\"flex items-center text-xs text-muted-foreground mt-1 ml-6\">\n                            <ChevronRight className=\"h-3 w-3 mr-1\" />\n                            Branched from: {getBranchHierarchy(branch.parentBranchId)}\n                          </div>\n                        )}\n                        \n                        {branch.description && (\n                          <p className=\"text-sm text-muted-foreground mt-1 ml-6\">\n                            {branch.description}\n                          </p>\n                        )}\n                        \n                        <div className=\"flex items-center space-x-4 text-xs text-muted-foreground mt-2 ml-6\">\n                          <span className=\"flex items-center\">\n                            <Clock className=\"h-3 w-3 mr-1\" />\n                            {format(new Date(branch.createdAt), 'MMM d, yyyy')}\n                          </span>\n                          <span>{branch.createdBy}</span>\n                          {branch.commitCount && (\n                            <span>{branch.commitCount} commits</span>\n                          )}\n                        </div>\n                      </div>\n                      \n                      {canManageBranches && !branch.isDefault && !branch.isProtected && (\n                        <div className=\"flex items-center space-x-1\">\n                          <Button\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            onClick={() => {\n                              setSelectedBranch(branch);\n                              setFormData({\n                                name: branch.name,\n                                description: branch.description || '',\n                                parentBranchId: branch.parentBranchId || ''\n                              });\n                              setMode('edit');\n                            }}\n                            data-testid={`button-edit-branch-${branch.id}`}\n                          >\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            onClick={() => setDeleteConfirmBranch(branch)}\n                            className=\"text-destructive hover:text-destructive\"\n                            data-testid={`button-delete-branch-${branch.id}`}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                ))}\n                \n                {branches.length === 0 && (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    No branches created yet\n                  </div>\n                )}\n              </div>\n            </ScrollArea>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      <AlertDialog open={!!deleteConfirmBranch} onOpenChange={() => setDeleteConfirmBranch(null)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete Branch</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to delete the branch \"{deleteConfirmBranch?.name}\"? \n              This action cannot be undone and will delete all versions in this branch.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={() => deleteConfirmBranch && handleDeleteBranch(deleteConfirmBranch)}\n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n            >\n              Delete Branch\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  );\n}","size_bytes":14410},"client/src/components/branch-switcher.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { GitBranch, Plus, Check, Clock, User } from \"lucide-react\";\nimport { useStore } from \"@/lib/store\";\nimport { format } from \"date-fns\";\n\ninterface Branch {\n  id: string;\n  name: string;\n  description?: string;\n  parentBranchId?: string;\n  createdAt: Date;\n  updatedAt: Date;\n  createdBy: string;\n  isDefault?: boolean;\n  lastCommitMessage?: string;\n}\n\ninterface BranchSwitcherProps {\n  branches: Branch[];\n  currentBranch: Branch | null;\n  onSwitchBranch: (branchId: string) => void;\n  onCreateBranch: () => void;\n  disabled?: boolean;\n  userRole?: string | null;\n}\n\nexport default function BranchSwitcher({\n  branches,\n  currentBranch,\n  onSwitchBranch,\n  onCreateBranch,\n  disabled = false,\n  userRole\n}: BranchSwitcherProps) {\n  const { setCurrentBranch } = useStore();\n  const canCreateBranch = userRole && ['owner', 'editor'].includes(userRole);\n\n  const handleSwitchBranch = (branchId: string) => {\n    setCurrentBranch(branchId);\n    onSwitchBranch(branchId);\n  };\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          disabled={disabled}\n          data-testid=\"branch-switcher\"\n          className=\"flex items-center space-x-2\"\n        >\n          <GitBranch className=\"h-4 w-4\" />\n          <span>{currentBranch?.name || 'main'}</span>\n          {currentBranch?.isDefault && (\n            <Badge variant=\"secondary\" className=\"ml-1 text-xs\">\n              Default\n            </Badge>\n          )}\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" className=\"w-72\">\n        <DropdownMenuLabel className=\"flex items-center justify-between\">\n          Branches\n          {canCreateBranch && (\n            <Button\n              size=\"sm\"\n              variant=\"ghost\"\n              onClick={(e) => {\n                e.stopPropagation();\n                onCreateBranch();\n              }}\n              data-testid=\"button-create-branch\"\n              className=\"h-6 px-2\"\n            >\n              <Plus className=\"h-3 w-3 mr-1\" />\n              New\n            </Button>\n          )}\n        </DropdownMenuLabel>\n        <DropdownMenuSeparator />\n        {branches.map((branch) => (\n          <DropdownMenuItem\n            key={branch.id}\n            onClick={() => handleSwitchBranch(branch.id)}\n            className=\"flex flex-col items-start space-y-1 py-2 cursor-pointer\"\n            data-testid={`branch-item-${branch.id}`}\n          >\n            <div className=\"flex items-center justify-between w-full\">\n              <div className=\"flex items-center space-x-2\">\n                {currentBranch?.id === branch.id && (\n                  <Check className=\"h-3 w-3 text-primary\" />\n                )}\n                <span className=\"font-medium\">{branch.name}</span>\n                {branch.isDefault && (\n                  <Badge variant=\"outline\" className=\"text-xs px-1 py-0\">\n                    Default\n                  </Badge>\n                )}\n              </div>\n            </div>\n            {branch.description && (\n              <span className=\"text-xs text-muted-foreground ml-5 line-clamp-1\">\n                {branch.description}\n              </span>\n            )}\n            <div className=\"flex items-center space-x-3 text-xs text-muted-foreground ml-5\">\n              <span className=\"flex items-center space-x-1\">\n                <Clock className=\"h-3 w-3\" />\n                <span>{format(new Date(branch.updatedAt), 'MMM d')}</span>\n              </span>\n              <span className=\"flex items-center space-x-1\">\n                <User className=\"h-3 w-3\" />\n                <span>{branch.createdBy}</span>\n              </span>\n            </div>\n            {branch.lastCommitMessage && (\n              <span className=\"text-xs text-muted-foreground ml-5 italic line-clamp-1\">\n                \"{branch.lastCommitMessage}\"\n              </span>\n            )}\n          </DropdownMenuItem>\n        ))}\n        {branches.length === 0 && (\n          <DropdownMenuItem disabled>\n            <span className=\"text-muted-foreground\">No branches available</span>\n          </DropdownMenuItem>\n        )}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}","size_bytes":4548},"client/src/components/conflict-resolution-panel.tsx":{"content":"import { useState } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { \n  AlertTriangle, \n  CheckCircle,\n  FileText,\n  GitMerge,\n  ChevronLeft,\n  ChevronRight,\n  Save,\n  X,\n  Edit3\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface Conflict {\n  id: string;\n  section: string;\n  lineStart: number;\n  lineEnd: number;\n  currentContent: string;\n  incomingContent: string;\n  baseContent?: string;\n  type: 'text' | 'structural';\n}\n\ninterface ConflictResolution {\n  conflictId: string;\n  resolution: 'current' | 'incoming' | 'manual' | 'both';\n  manualContent?: string;\n}\n\ninterface ConflictResolutionPanelProps {\n  conflicts: Conflict[];\n  sourceBranch: string;\n  targetBranch: string;\n  onResolve: (resolutions: ConflictResolution[]) => Promise<void>;\n  onCancel: () => void;\n  userRole?: string | null;\n}\n\nexport default function ConflictResolutionPanel({\n  conflicts,\n  sourceBranch,\n  targetBranch,\n  onResolve,\n  onCancel,\n  userRole\n}: ConflictResolutionPanelProps) {\n  const { toast } = useToast();\n  const [currentConflictIndex, setCurrentConflictIndex] = useState(0);\n  const [resolutions, setResolutions] = useState<Map<string, ConflictResolution>>(new Map());\n  const [manualContent, setManualContent] = useState<Map<string, string>>(new Map());\n  const [isResolving, setIsResolving] = useState(false);\n  const [showConfirmDialog, setShowConfirmDialog] = useState(false);\n\n  const currentConflict = conflicts[currentConflictIndex];\n  const canResolve = userRole && ['owner', 'editor'].includes(userRole);\n\n  const handleResolutionChange = (conflictId: string, resolution: ConflictResolution['resolution']) => {\n    const newResolution: ConflictResolution = {\n      conflictId,\n      resolution,\n      manualContent: resolution === 'manual' ? manualContent.get(conflictId) : undefined\n    };\n    \n    const newResolutions = new Map(resolutions);\n    newResolutions.set(conflictId, newResolution);\n    setResolutions(newResolutions);\n  };\n\n  const handleManualContentChange = (conflictId: string, content: string) => {\n    const newManualContent = new Map(manualContent);\n    newManualContent.set(conflictId, content);\n    setManualContent(newManualContent);\n    \n    if (resolutions.get(conflictId)?.resolution === 'manual') {\n      handleResolutionChange(conflictId, 'manual');\n    }\n  };\n\n  const handleResolveAll = async () => {\n    const allResolutions = Array.from(resolutions.values());\n    \n    if (allResolutions.length !== conflicts.length) {\n      toast({\n        title: \"Error\",\n        description: \"Please resolve all conflicts before continuing\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    const hasManualResolutions = allResolutions.some(r => r.resolution === 'manual');\n    if (hasManualResolutions) {\n      const invalidManual = allResolutions.find(\n        r => r.resolution === 'manual' && !r.manualContent?.trim()\n      );\n      if (invalidManual) {\n        toast({\n          title: \"Error\",\n          description: \"Please provide content for all manual resolutions\",\n          variant: \"destructive\"\n        });\n        return;\n      }\n    }\n\n    setIsResolving(true);\n    try {\n      await onResolve(allResolutions);\n      toast({\n        title: \"Success\",\n        description: \"All conflicts resolved successfully\"\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to resolve conflicts\",\n        variant: \"destructive\"\n      });\n    }\n    setIsResolving(false);\n  };\n\n  const getResolutionLabel = (resolution?: ConflictResolution['resolution']) => {\n    switch (resolution) {\n      case 'current':\n        return `Keep ${targetBranch}`;\n      case 'incoming':\n        return `Use ${sourceBranch}`;\n      case 'manual':\n        return 'Manual Edit';\n      case 'both':\n        return 'Keep Both';\n      default:\n        return 'Not Resolved';\n    }\n  };\n\n  const getResolutionContent = (conflict: Conflict): string => {\n    const resolution = resolutions.get(conflict.id);\n    if (!resolution) return conflict.currentContent;\n    \n    switch (resolution.resolution) {\n      case 'current':\n        return conflict.currentContent;\n      case 'incoming':\n        return conflict.incomingContent;\n      case 'manual':\n        return resolution.manualContent || '';\n      case 'both':\n        return `${conflict.currentContent}\\n\\n${conflict.incomingContent}`;\n      default:\n        return conflict.currentContent;\n    }\n  };\n\n  const resolvedCount = resolutions.size;\n  const progress = (resolvedCount / conflicts.length) * 100;\n\n  if (!canResolve) {\n    return (\n      <Card className=\"p-6\" data-testid=\"conflict-resolution\">\n        <div className=\"text-center\">\n          <AlertTriangle className=\"h-12 w-12 text-yellow-500 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold mb-2\">Permission Required</h3>\n          <p className=\"text-muted-foreground\">\n            You need editor or owner permissions to resolve merge conflicts.\n          </p>\n        </div>\n      </Card>\n    );\n  }\n\n  return (\n    <>\n      <Card className=\"h-full flex flex-col\" data-testid=\"conflict-resolution\">\n        <CardHeader className=\"border-b\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"flex items-center\">\n                <AlertTriangle className=\"h-5 w-5 text-yellow-500 mr-2\" />\n                Resolve Merge Conflicts\n              </CardTitle>\n              <CardDescription>\n                {conflicts.length} conflict{conflicts.length > 1 ? 's' : ''} between {sourceBranch} → {targetBranch}\n              </CardDescription>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setShowConfirmDialog(true)}\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n          <div className=\"mt-4 space-y-2\">\n            <div className=\"flex items-center justify-between text-sm\">\n              <span className=\"text-muted-foreground\">Progress</span>\n              <span className=\"font-medium\">{resolvedCount} / {conflicts.length}</span>\n            </div>\n            <div className=\"w-full bg-secondary rounded-full h-2\">\n              <div\n                className=\"bg-primary h-2 rounded-full transition-all\"\n                style={{ width: `${progress}%` }}\n              />\n            </div>\n          </div>\n        </CardHeader>\n\n        <CardContent className=\"flex-1 flex flex-col p-0\">\n          {currentConflict && (\n            <>\n              <div className=\"p-4 border-b\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Badge variant=\"outline\">\n                      Conflict {currentConflictIndex + 1} of {conflicts.length}\n                    </Badge>\n                    <Badge variant={currentConflict.type === 'structural' ? 'destructive' : 'secondary'}>\n                      {currentConflict.type === 'structural' ? 'Structural' : 'Text'} Conflict\n                    </Badge>\n                    {resolutions.has(currentConflict.id) && (\n                      <Badge variant=\"default\" className=\"flex items-center\">\n                        <CheckCircle className=\"h-3 w-3 mr-1\" />\n                        Resolved\n                      </Badge>\n                    )}\n                  </div>\n                  <div className=\"flex items-center space-x-1\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => setCurrentConflictIndex(Math.max(0, currentConflictIndex - 1))}\n                      disabled={currentConflictIndex === 0}\n                    >\n                      <ChevronLeft className=\"h-4 w-4\" />\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => setCurrentConflictIndex(Math.min(conflicts.length - 1, currentConflictIndex + 1))}\n                      disabled={currentConflictIndex === conflicts.length - 1}\n                    >\n                      <ChevronRight className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n                <div className=\"text-sm text-muted-foreground\">\n                  <FileText className=\"h-3 w-3 inline mr-1\" />\n                  {currentConflict.section} • Lines {currentConflict.lineStart}-{currentConflict.lineEnd}\n                </div>\n              </div>\n\n              <div className=\"flex-1 grid grid-cols-2 divide-x\">\n                <div className=\"flex flex-col\">\n                  <div className=\"p-3 border-b bg-muted/50\">\n                    <div className=\"font-medium text-sm flex items-center justify-between\">\n                      <span>{targetBranch} (Current)</span>\n                      <RadioGroup\n                        value={resolutions.get(currentConflict.id)?.resolution || ''}\n                        onValueChange={(value) => handleResolutionChange(currentConflict.id, value as any)}\n                      >\n                        <div className=\"flex items-center space-x-2\">\n                          <RadioGroupItem value=\"current\" id=\"current\" />\n                          <Label htmlFor=\"current\" className=\"text-xs cursor-pointer\">Use This</Label>\n                        </div>\n                      </RadioGroup>\n                    </div>\n                  </div>\n                  <ScrollArea className=\"flex-1 p-4\">\n                    <pre className=\"text-sm whitespace-pre-wrap font-mono\">\n                      {currentConflict.currentContent}\n                    </pre>\n                  </ScrollArea>\n                </div>\n\n                <div className=\"flex flex-col\">\n                  <div className=\"p-3 border-b bg-muted/50\">\n                    <div className=\"font-medium text-sm flex items-center justify-between\">\n                      <span>{sourceBranch} (Incoming)</span>\n                      <RadioGroup\n                        value={resolutions.get(currentConflict.id)?.resolution || ''}\n                        onValueChange={(value) => handleResolutionChange(currentConflict.id, value as any)}\n                      >\n                        <div className=\"flex items-center space-x-2\">\n                          <RadioGroupItem value=\"incoming\" id=\"incoming\" />\n                          <Label htmlFor=\"incoming\" className=\"text-xs cursor-pointer\">Use This</Label>\n                        </div>\n                      </RadioGroup>\n                    </div>\n                  </div>\n                  <ScrollArea className=\"flex-1 p-4\">\n                    <pre className=\"text-sm whitespace-pre-wrap font-mono\">\n                      {currentConflict.incomingContent}\n                    </pre>\n                  </ScrollArea>\n                </div>\n              </div>\n\n              <div className=\"p-4 border-t\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center space-x-4\">\n                    <RadioGroup\n                      value={resolutions.get(currentConflict.id)?.resolution || ''}\n                      onValueChange={(value) => handleResolutionChange(currentConflict.id, value as any)}\n                      className=\"flex items-center space-x-4\"\n                    >\n                      <div className=\"flex items-center space-x-2\">\n                        <RadioGroupItem value=\"both\" id=\"both\" />\n                        <Label htmlFor=\"both\" className=\"cursor-pointer\">Keep Both</Label>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <RadioGroupItem value=\"manual\" id=\"manual\" />\n                        <Label htmlFor=\"manual\" className=\"cursor-pointer flex items-center\">\n                          <Edit3 className=\"h-3 w-3 mr-1\" />\n                          Manual Edit\n                        </Label>\n                      </div>\n                    </RadioGroup>\n                  </div>\n\n                  {resolutions.get(currentConflict.id)?.resolution === 'manual' && (\n                    <div className=\"space-y-2\">\n                      <Label>Manual Resolution</Label>\n                      <Textarea\n                        value={manualContent.get(currentConflict.id) || ''}\n                        onChange={(e) => handleManualContentChange(currentConflict.id, e.target.value)}\n                        placeholder=\"Enter your manual resolution...\"\n                        rows={5}\n                        className=\"font-mono text-sm\"\n                      />\n                    </div>\n                  )}\n\n                  {resolutions.has(currentConflict.id) && (\n                    <div className=\"p-3 bg-muted rounded-lg\">\n                      <div className=\"text-sm font-medium mb-1\">\n                        Resolution: {getResolutionLabel(resolutions.get(currentConflict.id)?.resolution)}\n                      </div>\n                      <ScrollArea className=\"h-24\">\n                        <pre className=\"text-xs whitespace-pre-wrap font-mono text-muted-foreground\">\n                          {getResolutionContent(currentConflict)}\n                        </pre>\n                      </ScrollArea>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </>\n          )}\n        </CardContent>\n\n        <div className=\"p-4 border-t\">\n          <div className=\"flex items-center justify-between\">\n            <Button variant=\"outline\" onClick={() => setShowConfirmDialog(true)}>\n              Cancel\n            </Button>\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-sm text-muted-foreground\">\n                {resolvedCount === conflicts.length && (\n                  <span className=\"flex items-center text-green-600\">\n                    <CheckCircle className=\"h-4 w-4 mr-1\" />\n                    All conflicts resolved\n                  </span>\n                )}\n              </span>\n              <Button\n                onClick={handleResolveAll}\n                disabled={resolvedCount !== conflicts.length || isResolving}\n                data-testid=\"button-resolve-conflicts\"\n              >\n                <GitMerge className=\"h-4 w-4 mr-2\" />\n                {isResolving ? 'Resolving...' : 'Complete Merge'}\n              </Button>\n            </div>\n          </div>\n        </div>\n      </Card>\n\n      <AlertDialog open={showConfirmDialog} onOpenChange={setShowConfirmDialog}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Cancel Conflict Resolution?</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to cancel? All resolution progress will be lost.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Continue Resolving</AlertDialogCancel>\n            <AlertDialogAction onClick={onCancel} className=\"bg-destructive text-destructive-foreground\">\n              Cancel Resolution\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  );\n}","size_bytes":16059},"client/src/components/diff-viewer.tsx":{"content":"import { useState, useMemo } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea, ScrollBar } from \"@/components/ui/scroll-area\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Separator } from \"@/components/ui/separator\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { \n  FileText,\n  Plus,\n  Minus,\n  GitBranch,\n  ArrowLeftRight,\n  ChevronUp,\n  ChevronDown,\n  Eye,\n  Layers,\n  AlertCircle,\n  CheckCircle\n} from \"lucide-react\";\nimport { format } from \"date-fns\";\n\ninterface DiffLine {\n  lineNumber: number;\n  content: string;\n  type: 'added' | 'removed' | 'unchanged' | 'modified';\n  oldLineNumber?: number;\n  newLineNumber?: number;\n}\n\ninterface DiffSection {\n  startLine: number;\n  endLine: number;\n  title: string;\n  changes: DiffLine[];\n  summary: {\n    additions: number;\n    deletions: number;\n    modifications: number;\n  };\n}\n\ninterface Version {\n  id: string;\n  branchId: string;\n  branchName: string;\n  versionNumber: number;\n  message: string;\n  content: string;\n  wordCount: number;\n  authorName: string;\n  createdAt: Date;\n}\n\ninterface DiffViewerProps {\n  leftVersion: Version;\n  rightVersion: Version;\n  onClose?: () => void;\n  viewMode?: 'side-by-side' | 'unified' | 'inline';\n}\n\nexport default function DiffViewer({\n  leftVersion,\n  rightVersion,\n  onClose,\n  viewMode: initialViewMode = 'side-by-side'\n}: DiffViewerProps) {\n  const [viewMode, setViewMode] = useState<'side-by-side' | 'unified' | 'inline'>(initialViewMode);\n  const [currentChangeIndex, setCurrentChangeIndex] = useState(0);\n  const [showOnlyChanges, setShowOnlyChanges] = useState(false);\n\n  // Generate diff data\n  const diffData = useMemo(() => {\n    const leftLines = leftVersion.content.split('\\n');\n    const rightLines = rightVersion.content.split('\\n');\n    const sections: DiffSection[] = [];\n    let currentSection: DiffSection | null = null;\n    \n    const maxLines = Math.max(leftLines.length, rightLines.length);\n    const allChanges: number[] = [];\n    \n    for (let i = 0; i < maxLines; i++) {\n      const leftLine = leftLines[i] || '';\n      const rightLine = rightLines[i] || '';\n      const isChanged = leftLine !== rightLine;\n      \n      if (isChanged) {\n        allChanges.push(i);\n        \n        if (!currentSection) {\n          currentSection = {\n            startLine: i,\n            endLine: i,\n            title: `Lines ${i + 1}`,\n            changes: [],\n            summary: { additions: 0, deletions: 0, modifications: 0 }\n          };\n        }\n        \n        let changeType: DiffLine['type'] = 'unchanged';\n        if (!leftLine && rightLine) {\n          changeType = 'added';\n          currentSection.summary.additions++;\n        } else if (leftLine && !rightLine) {\n          changeType = 'removed';\n          currentSection.summary.deletions++;\n        } else {\n          changeType = 'modified';\n          currentSection.summary.modifications++;\n        }\n        \n        currentSection.changes.push({\n          lineNumber: i + 1,\n          content: rightLine || leftLine,\n          type: changeType,\n          oldLineNumber: leftLine ? i + 1 : undefined,\n          newLineNumber: rightLine ? i + 1 : undefined\n        });\n        \n        currentSection.endLine = i;\n      } else if (currentSection) {\n        // End current section\n        currentSection.title = `Lines ${currentSection.startLine + 1}-${currentSection.endLine + 1}`;\n        sections.push(currentSection);\n        currentSection = null;\n      }\n      \n      if (!isChanged && !showOnlyChanges) {\n        sections.push({\n          startLine: i,\n          endLine: i,\n          title: `Line ${i + 1}`,\n          changes: [{\n            lineNumber: i + 1,\n            content: leftLine,\n            type: 'unchanged',\n            oldLineNumber: i + 1,\n            newLineNumber: i + 1\n          }],\n          summary: { additions: 0, deletions: 0, modifications: 0 }\n        });\n      }\n    }\n    \n    if (currentSection) {\n      currentSection.title = `Lines ${currentSection.startLine + 1}-${currentSection.endLine + 1}`;\n      sections.push(currentSection);\n    }\n    \n    const totalChanges = {\n      additions: sections.reduce((sum, s) => sum + s.summary.additions, 0),\n      deletions: sections.reduce((sum, s) => sum + s.summary.deletions, 0),\n      modifications: sections.reduce((sum, s) => sum + s.summary.modifications, 0)\n    };\n    \n    return {\n      sections,\n      totalChanges,\n      changeIndices: allChanges,\n      leftLines,\n      rightLines\n    };\n  }, [leftVersion.content, rightVersion.content, showOnlyChanges]);\n\n  const navigateToChange = (direction: 'next' | 'prev') => {\n    const { changeIndices } = diffData;\n    if (changeIndices.length === 0) return;\n    \n    if (direction === 'next') {\n      setCurrentChangeIndex((prev) => (prev + 1) % changeIndices.length);\n    } else {\n      setCurrentChangeIndex((prev) => (prev - 1 + changeIndices.length) % changeIndices.length);\n    }\n  };\n\n  const getLineClass = (type: DiffLine['type']) => {\n    switch (type) {\n      case 'added':\n        return 'bg-green-50 dark:bg-green-950 text-green-900 dark:text-green-100';\n      case 'removed':\n        return 'bg-red-50 dark:bg-red-950 text-red-900 dark:text-red-100';\n      case 'modified':\n        return 'bg-yellow-50 dark:bg-yellow-950 text-yellow-900 dark:text-yellow-100';\n      default:\n        return '';\n    }\n  };\n\n  const renderSideBySide = () => (\n    <div className=\"grid grid-cols-2 divide-x\">\n      <div className=\"flex flex-col\">\n        <div className=\"p-3 bg-muted/50 border-b\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <GitBranch className=\"h-4 w-4\" />\n              <span className=\"font-medium\">{leftVersion.branchName}</span>\n              <Badge variant=\"outline\">v{leftVersion.versionNumber}</Badge>\n            </div>\n            <span className=\"text-xs text-muted-foreground\">\n              {format(new Date(leftVersion.createdAt), 'MMM d, HH:mm')}\n            </span>\n          </div>\n        </div>\n        <ScrollArea className=\"h-[500px]\">\n          <div className=\"font-mono text-sm\">\n            {diffData.leftLines.map((line, index) => {\n              const rightLine = diffData.rightLines[index];\n              const isChanged = line !== rightLine;\n              return (\n                <div\n                  key={index}\n                  className={`px-3 py-1 ${isChanged ? (line && !rightLine ? getLineClass('removed') : line ? getLineClass('modified') : '') : ''}`}\n                  data-testid={`left-line-${index}`}\n                >\n                  <span className=\"text-muted-foreground mr-3 select-none\">\n                    {index + 1}\n                  </span>\n                  {line || '\\u00A0'}\n                </div>\n              );\n            })}\n          </div>\n        </ScrollArea>\n      </div>\n      \n      <div className=\"flex flex-col\">\n        <div className=\"p-3 bg-muted/50 border-b\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <GitBranch className=\"h-4 w-4\" />\n              <span className=\"font-medium\">{rightVersion.branchName}</span>\n              <Badge variant=\"outline\">v{rightVersion.versionNumber}</Badge>\n            </div>\n            <span className=\"text-xs text-muted-foreground\">\n              {format(new Date(rightVersion.createdAt), 'MMM d, HH:mm')}\n            </span>\n          </div>\n        </div>\n        <ScrollArea className=\"h-[500px]\">\n          <div className=\"font-mono text-sm\">\n            {diffData.rightLines.map((line, index) => {\n              const leftLine = diffData.leftLines[index];\n              const isChanged = line !== leftLine;\n              return (\n                <div\n                  key={index}\n                  className={`px-3 py-1 ${isChanged ? (line && !leftLine ? getLineClass('added') : line ? getLineClass('modified') : '') : ''}`}\n                  data-testid={`right-line-${index}`}\n                >\n                  <span className=\"text-muted-foreground mr-3 select-none\">\n                    {index + 1}\n                  </span>\n                  {line || '\\u00A0'}\n                </div>\n              );\n            })}\n          </div>\n        </ScrollArea>\n      </div>\n    </div>\n  );\n\n  const renderUnified = () => (\n    <ScrollArea className=\"h-[600px]\">\n      <div className=\"font-mono text-sm\">\n        {diffData.sections.map((section, sectionIndex) => (\n          <div key={sectionIndex} className=\"mb-2\">\n            {section.changes.map((change, changeIndex) => (\n              <div\n                key={changeIndex}\n                className={`px-3 py-1 ${getLineClass(change.type)}`}\n                data-testid={`unified-line-${sectionIndex}-${changeIndex}`}\n              >\n                <span className=\"text-muted-foreground mr-3 select-none\">\n                  {change.type === 'added' && '+'} \n                  {change.type === 'removed' && '-'}\n                  {change.type === 'modified' && '~'}\n                  {change.type === 'unchanged' && ' '}\n                </span>\n                <span className=\"text-muted-foreground mr-3 select-none\">\n                  {change.lineNumber}\n                </span>\n                {change.content || '\\u00A0'}\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n    </ScrollArea>\n  );\n\n  const hasChanges = diffData.totalChanges.additions > 0 || \n                    diffData.totalChanges.deletions > 0 || \n                    diffData.totalChanges.modifications > 0;\n\n  return (\n    <Card className=\"h-full flex flex-col\" data-testid=\"diff-viewer\">\n      <CardHeader className=\"border-b\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <CardTitle className=\"flex items-center\">\n              <ArrowLeftRight className=\"h-5 w-5 mr-2\" />\n              Version Comparison\n            </CardTitle>\n            <CardDescription>\n              Comparing changes between versions\n            </CardDescription>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            {hasChanges ? (\n              <div className=\"flex items-center space-x-4 text-sm\">\n                <Badge variant=\"outline\" className=\"text-green-600\">\n                  <Plus className=\"h-3 w-3 mr-1\" />\n                  {diffData.totalChanges.additions}\n                </Badge>\n                <Badge variant=\"outline\" className=\"text-red-600\">\n                  <Minus className=\"h-3 w-3 mr-1\" />\n                  {diffData.totalChanges.deletions}\n                </Badge>\n                <Badge variant=\"outline\" className=\"text-yellow-600\">\n                  <AlertCircle className=\"h-3 w-3 mr-1\" />\n                  {diffData.totalChanges.modifications}\n                </Badge>\n              </div>\n            ) : (\n              <Badge variant=\"secondary\" className=\"text-green-600\">\n                <CheckCircle className=\"h-3 w-3 mr-1\" />\n                No Changes\n              </Badge>\n            )}\n            {onClose && (\n              <Button size=\"sm\" variant=\"ghost\" onClick={onClose}>\n                Close\n              </Button>\n            )}\n          </div>\n        </div>\n      </CardHeader>\n\n      <div className=\"p-4 border-b bg-muted/50\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Select value={viewMode} onValueChange={(value) => setViewMode(value as any)}>\n              <SelectTrigger className=\"w-40\" data-testid=\"select-view-mode\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"side-by-side\">\n                  <div className=\"flex items-center\">\n                    <Layers className=\"h-4 w-4 mr-2\" />\n                    Side by Side\n                  </div>\n                </SelectItem>\n                <SelectItem value=\"unified\">\n                  <div className=\"flex items-center\">\n                    <FileText className=\"h-4 w-4 mr-2\" />\n                    Unified\n                  </div>\n                </SelectItem>\n              </SelectContent>\n            </Select>\n            \n            <Button\n              size=\"sm\"\n              variant={showOnlyChanges ? \"default\" : \"outline\"}\n              onClick={() => setShowOnlyChanges(!showOnlyChanges)}\n            >\n              <Eye className=\"h-4 w-4 mr-1\" />\n              {showOnlyChanges ? 'Show All' : 'Changes Only'}\n            </Button>\n          </div>\n          \n          {diffData.changeIndices.length > 0 && (\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-sm text-muted-foreground\">\n                Change {currentChangeIndex + 1} of {diffData.changeIndices.length}\n              </span>\n              <div className=\"flex items-center space-x-1\">\n                <TooltipProvider>\n                  <Tooltip>\n                    <TooltipTrigger asChild>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => navigateToChange('prev')}\n                        data-testid=\"button-prev-change\"\n                      >\n                        <ChevronUp className=\"h-4 w-4\" />\n                      </Button>\n                    </TooltipTrigger>\n                    <TooltipContent>Previous Change</TooltipContent>\n                  </Tooltip>\n                </TooltipProvider>\n                <TooltipProvider>\n                  <Tooltip>\n                    <TooltipTrigger asChild>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => navigateToChange('next')}\n                        data-testid=\"button-next-change\"\n                      >\n                        <ChevronDown className=\"h-4 w-4\" />\n                      </Button>\n                    </TooltipTrigger>\n                    <TooltipContent>Next Change</TooltipContent>\n                  </Tooltip>\n                </TooltipProvider>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n\n      <CardContent className=\"flex-1 p-0\">\n        {viewMode === 'side-by-side' && renderSideBySide()}\n        {viewMode === 'unified' && renderUnified()}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":14872},"client/src/components/merge-dialog.tsx":{"content":"import { useState } from 'react';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  GitMerge, \n  AlertTriangle, \n  Info, \n  ArrowRight,\n  FileText,\n  Plus,\n  Minus,\n  GitBranch,\n  CheckCircle,\n  XCircle\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface Branch {\n  id: string;\n  name: string;\n  description?: string;\n  lastCommitMessage?: string;\n  updatedAt: Date;\n}\n\ninterface MergePreview {\n  hasConflicts: boolean;\n  conflicts: Array<{\n    line: number;\n    content: string;\n    type: 'current' | 'incoming';\n  }>;\n  changes: {\n    additions: number;\n    deletions: number;\n    modified: number;\n  };\n  affectedSections: string[];\n}\n\ninterface MergeDialogProps {\n  open: boolean;\n  onClose: () => void;\n  branches: Branch[];\n  currentBranch: Branch | null;\n  onMerge: (sourceBranchId: string, targetBranchId: string, strategy?: 'merge' | 'overwrite') => Promise<void>;\n  onPreviewMerge?: (sourceBranchId: string, targetBranchId: string) => Promise<MergePreview>;\n  userRole?: string | null;\n}\n\nexport default function MergeDialog({\n  open,\n  onClose,\n  branches,\n  currentBranch,\n  onMerge,\n  onPreviewMerge,\n  userRole\n}: MergeDialogProps) {\n  const { toast } = useToast();\n  const [sourceBranch, setSourceBranch] = useState<string>('');\n  const [targetBranch, setTargetBranch] = useState<string>(currentBranch?.id || '');\n  const [mergeStrategy, setMergeStrategy] = useState<'merge' | 'overwrite'>('merge');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isPreviewing, setIsPreviewing] = useState(false);\n  const [preview, setPreview] = useState<MergePreview | null>(null);\n\n  const canMerge = userRole && ['owner', 'editor'].includes(userRole);\n\n  const handlePreview = async () => {\n    if (!sourceBranch || !targetBranch || !onPreviewMerge) return;\n\n    setIsPreviewing(true);\n    try {\n      const result = await onPreviewMerge(sourceBranch, targetBranch);\n      setPreview(result);\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to preview merge\",\n        variant: \"destructive\"\n      });\n    }\n    setIsPreviewing(false);\n  };\n\n  const handleMerge = async () => {\n    if (!sourceBranch || !targetBranch) {\n      toast({\n        title: \"Error\",\n        description: \"Please select both source and target branches\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    if (sourceBranch === targetBranch) {\n      toast({\n        title: \"Error\",\n        description: \"Source and target branches must be different\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      await onMerge(sourceBranch, targetBranch, mergeStrategy);\n      toast({\n        title: \"Success\",\n        description: \"Branches merged successfully\"\n      });\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to merge branches\",\n        variant: \"destructive\"\n      });\n    }\n    setIsLoading(false);\n  };\n\n  const getSourceBranch = () => branches.find(b => b.id === sourceBranch);\n  const getTargetBranch = () => branches.find(b => b.id === targetBranch);\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl\" data-testid=\"merge-dialog\">\n        <DialogHeader>\n          <DialogTitle>Merge Branches</DialogTitle>\n          <DialogDescription>\n            Merge changes from one branch into another\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-4 py-4\">\n          <div className=\"grid grid-cols-[1fr,auto,1fr] gap-4 items-end\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"source-branch\">Source Branch</Label>\n              <Select\n                value={sourceBranch}\n                onValueChange={setSourceBranch}\n                disabled={!canMerge}\n              >\n                <SelectTrigger id=\"source-branch\" data-testid=\"select-source-branch\">\n                  <SelectValue placeholder=\"Select source\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {branches\n                    .filter(b => b.id !== targetBranch)\n                    .map((branch) => (\n                      <SelectItem key={branch.id} value={branch.id}>\n                        <div className=\"flex items-center space-x-2\">\n                          <GitBranch className=\"h-3 w-3\" />\n                          <span>{branch.name}</span>\n                        </div>\n                      </SelectItem>\n                    ))}\n                </SelectContent>\n              </Select>\n              {getSourceBranch()?.description && (\n                <p className=\"text-xs text-muted-foreground\">\n                  {getSourceBranch()?.description}\n                </p>\n              )}\n            </div>\n\n            <ArrowRight className=\"h-5 w-5 text-muted-foreground mb-2\" />\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"target-branch\">Target Branch</Label>\n              <Select\n                value={targetBranch}\n                onValueChange={setTargetBranch}\n                disabled={!canMerge}\n              >\n                <SelectTrigger id=\"target-branch\" data-testid=\"select-target-branch\">\n                  <SelectValue placeholder=\"Select target\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {branches\n                    .filter(b => b.id !== sourceBranch)\n                    .map((branch) => (\n                      <SelectItem key={branch.id} value={branch.id}>\n                        <div className=\"flex items-center space-x-2\">\n                          <GitBranch className=\"h-3 w-3\" />\n                          <span>{branch.name}</span>\n                          {branch.id === currentBranch?.id && (\n                            <Badge variant=\"secondary\" className=\"text-xs\">Current</Badge>\n                          )}\n                        </div>\n                      </SelectItem>\n                    ))}\n                </SelectContent>\n              </Select>\n              {getTargetBranch()?.description && (\n                <p className=\"text-xs text-muted-foreground\">\n                  {getTargetBranch()?.description}\n                </p>\n              )}\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"merge-strategy\">Merge Strategy</Label>\n            <Select\n              value={mergeStrategy}\n              onValueChange={(value) => setMergeStrategy(value as 'merge' | 'overwrite')}\n              disabled={!canMerge}\n            >\n              <SelectTrigger id=\"merge-strategy\" data-testid=\"select-merge-strategy\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"merge\">\n                  <div className=\"space-y-1\">\n                    <div className=\"font-medium\">Merge</div>\n                    <div className=\"text-xs text-muted-foreground\">\n                      Combine changes from both branches\n                    </div>\n                  </div>\n                </SelectItem>\n                <SelectItem value=\"overwrite\">\n                  <div className=\"space-y-1\">\n                    <div className=\"font-medium\">Overwrite</div>\n                    <div className=\"text-xs text-muted-foreground\">\n                      Replace target with source content\n                    </div>\n                  </div>\n                </SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {onPreviewMerge && sourceBranch && targetBranch && (\n            <Button\n              variant=\"outline\"\n              onClick={handlePreview}\n              disabled={isPreviewing || !canMerge}\n              className=\"w-full\"\n              data-testid=\"button-preview-merge\"\n            >\n              {isPreviewing ? 'Analyzing...' : 'Preview Changes'}\n            </Button>\n          )}\n\n          {preview && (\n            <div className=\"space-y-3\">\n              <Separator />\n              \n              {preview.hasConflicts ? (\n                <Alert variant=\"destructive\">\n                  <AlertTriangle className=\"h-4 w-4\" />\n                  <AlertTitle>Merge Conflicts Detected</AlertTitle>\n                  <AlertDescription>\n                    {preview.conflicts.length} conflict{preview.conflicts.length > 1 ? 's' : ''} found. \n                    You will need to resolve these conflicts after merging.\n                  </AlertDescription>\n                </Alert>\n              ) : (\n                <Alert>\n                  <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                  <AlertTitle>No Conflicts</AlertTitle>\n                  <AlertDescription>\n                    These branches can be merged automatically without conflicts.\n                  </AlertDescription>\n                </Alert>\n              )}\n\n              <div className=\"grid grid-cols-3 gap-4\">\n                <div className=\"text-center p-3 bg-green-50 dark:bg-green-950 rounded-lg\">\n                  <Plus className=\"h-4 w-4 text-green-600 mx-auto mb-1\" />\n                  <div className=\"text-2xl font-bold text-green-600\">\n                    {preview.changes.additions}\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">Additions</div>\n                </div>\n                <div className=\"text-center p-3 bg-red-50 dark:bg-red-950 rounded-lg\">\n                  <Minus className=\"h-4 w-4 text-red-600 mx-auto mb-1\" />\n                  <div className=\"text-2xl font-bold text-red-600\">\n                    {preview.changes.deletions}\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">Deletions</div>\n                </div>\n                <div className=\"text-center p-3 bg-yellow-50 dark:bg-yellow-950 rounded-lg\">\n                  <FileText className=\"h-4 w-4 text-yellow-600 mx-auto mb-1\" />\n                  <div className=\"text-2xl font-bold text-yellow-600\">\n                    {preview.changes.modified}\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">Modified</div>\n                </div>\n              </div>\n\n              {preview.affectedSections.length > 0 && (\n                <div className=\"space-y-2\">\n                  <Label>Affected Sections</Label>\n                  <ScrollArea className=\"h-24 border rounded-lg p-2\">\n                    <div className=\"space-y-1\">\n                      {preview.affectedSections.map((section, index) => (\n                        <div key={index} className=\"text-sm text-muted-foreground\">\n                          • {section}\n                        </div>\n                      ))}\n                    </div>\n                  </ScrollArea>\n                </div>\n              )}\n            </div>\n          )}\n\n          {!canMerge && (\n            <Alert>\n              <Info className=\"h-4 w-4\" />\n              <AlertDescription>\n                You don't have permission to merge branches. Only owners and editors can perform merges.\n              </AlertDescription>\n            </Alert>\n          )}\n        </div>\n\n        <DialogFooter>\n          <Button variant=\"outline\" onClick={onClose}>\n            Cancel\n          </Button>\n          <Button\n            onClick={handleMerge}\n            disabled={!sourceBranch || !targetBranch || isLoading || !canMerge}\n            data-testid=\"button-merge-submit\"\n          >\n            <GitMerge className=\"h-4 w-4 mr-2\" />\n            {isLoading ? 'Merging...' : 'Merge Branches'}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":12298},"client/src/components/version-history.tsx":{"content":"import { useState } from 'react';\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { Card } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  History, \n  RotateCcw, \n  Eye, \n  User, \n  Calendar,\n  FileText,\n  GitCommit,\n  ChevronDown,\n  ChevronRight,\n  Diff\n} from \"lucide-react\";\nimport { format, formatDistanceToNow } from \"date-fns\";\n\ninterface Version {\n  id: string;\n  branchId: string;\n  versionNumber: number;\n  message: string;\n  content: string;\n  wordCount: number;\n  authorId: string;\n  authorName: string;\n  createdAt: Date;\n  parentVersionId?: string;\n  changes?: {\n    additions: number;\n    deletions: number;\n    modified: number;\n  };\n}\n\ninterface VersionHistoryProps {\n  versions: Version[];\n  currentVersionId?: string;\n  onRollback: (versionId: string) => Promise<void>;\n  onPreview: (versionId: string) => void;\n  onCompare: (versionId1: string, versionId2: string) => void;\n  userRole?: string | null;\n  isLoading?: boolean;\n}\n\nexport default function VersionHistory({\n  versions,\n  currentVersionId,\n  onRollback,\n  onPreview,\n  onCompare,\n  userRole,\n  isLoading = false\n}: VersionHistoryProps) {\n  const [expandedVersions, setExpandedVersions] = useState<Set<string>>(new Set());\n  const [rollbackVersion, setRollbackVersion] = useState<Version | null>(null);\n  const [compareMode, setCompareMode] = useState(false);\n  const [selectedForCompare, setSelectedForCompare] = useState<string[]>([]);\n  \n  const canRollback = userRole && ['owner', 'editor'].includes(userRole);\n\n  const toggleExpanded = (versionId: string) => {\n    const newExpanded = new Set(expandedVersions);\n    if (newExpanded.has(versionId)) {\n      newExpanded.delete(versionId);\n    } else {\n      newExpanded.add(versionId);\n    }\n    setExpandedVersions(newExpanded);\n  };\n\n  const handleSelectForCompare = (versionId: string) => {\n    if (selectedForCompare.includes(versionId)) {\n      setSelectedForCompare(selectedForCompare.filter(id => id !== versionId));\n    } else if (selectedForCompare.length < 2) {\n      setSelectedForCompare([...selectedForCompare, versionId]);\n    }\n    \n    if (selectedForCompare.length === 1 && !selectedForCompare.includes(versionId)) {\n      onCompare(selectedForCompare[0], versionId);\n      setSelectedForCompare([]);\n      setCompareMode(false);\n    }\n  };\n\n  const handleRollback = async () => {\n    if (!rollbackVersion) return;\n    \n    try {\n      await onRollback(rollbackVersion.id);\n      setRollbackVersion(null);\n    } catch (error) {\n      // Error handling done in parent component\n    }\n  };\n\n  const getChangesSummary = (changes?: Version['changes']) => {\n    if (!changes) return null;\n    \n    const parts = [];\n    if (changes.additions > 0) parts.push(`+${changes.additions}`);\n    if (changes.deletions > 0) parts.push(`-${changes.deletions}`);\n    if (changes.modified > 0) parts.push(`~${changes.modified}`);\n    \n    return parts.join(' ');\n  };\n\n  if (isLoading) {\n    return (\n      <Card className=\"p-4\" data-testid=\"version-history\">\n        <div className=\"flex items-center justify-center py-8\">\n          <div className=\"animate-spin w-6 h-6 border-2 border-primary border-t-transparent rounded-full\" />\n        </div>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"flex flex-col h-full\" data-testid=\"version-history\">\n      <div className=\"p-4 border-b\">\n        <div className=\"flex items-center justify-between mb-2\">\n          <h3 className=\"font-semibold flex items-center\">\n            <History className=\"h-4 w-4 mr-2\" />\n            Version History\n          </h3>\n          {versions.length > 1 && (\n            <Button\n              size=\"sm\"\n              variant={compareMode ? \"default\" : \"outline\"}\n              onClick={() => {\n                setCompareMode(!compareMode);\n                setSelectedForCompare([]);\n              }}\n              data-testid=\"button-toggle-compare\"\n            >\n              <Diff className=\"h-3 w-3 mr-1\" />\n              {compareMode ? 'Cancel' : 'Compare'}\n            </Button>\n          )}\n        </div>\n        {compareMode && (\n          <p className=\"text-xs text-muted-foreground\">\n            Select two versions to compare\n          </p>\n        )}\n      </div>\n      \n      <ScrollArea className=\"flex-1\">\n        <div className=\"p-4 space-y-3\">\n          {versions.map((version, index) => {\n            const isExpanded = expandedVersions.has(version.id);\n            const isCurrent = version.id === currentVersionId;\n            const isSelected = selectedForCompare.includes(version.id);\n            \n            return (\n              <div\n                key={version.id}\n                className={`border rounded-lg p-3 transition-colors ${\n                  isCurrent ? 'border-primary bg-primary/5' : 'hover:bg-accent/50'\n                } ${isSelected ? 'ring-2 ring-primary' : ''} ${\n                  compareMode ? 'cursor-pointer' : ''\n                }`}\n                onClick={() => compareMode && handleSelectForCompare(version.id)}\n                data-testid={`version-item-${version.id}`}\n              >\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        className=\"h-6 w-6 p-0\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          toggleExpanded(version.id);\n                        }}\n                      >\n                        {isExpanded ? (\n                          <ChevronDown className=\"h-4 w-4\" />\n                        ) : (\n                          <ChevronRight className=\"h-4 w-4\" />\n                        )}\n                      </Button>\n                      <GitCommit className=\"h-4 w-4 text-muted-foreground\" />\n                      <span className=\"font-medium text-sm\">\n                        v{version.versionNumber}\n                      </span>\n                      {isCurrent && (\n                        <Badge variant=\"default\" className=\"text-xs\">Current</Badge>\n                      )}\n                      {index === 0 && (\n                        <Badge variant=\"secondary\" className=\"text-xs\">Latest</Badge>\n                      )}\n                    </div>\n                    \n                    <div className=\"ml-8 mt-1\">\n                      <p className=\"text-sm\">{version.message}</p>\n                      \n                      <div className=\"flex items-center space-x-3 text-xs text-muted-foreground mt-2\">\n                        <span className=\"flex items-center\">\n                          <User className=\"h-3 w-3 mr-1\" />\n                          {version.authorName}\n                        </span>\n                        <span className=\"flex items-center\">\n                          <Calendar className=\"h-3 w-3 mr-1\" />\n                          <TooltipProvider>\n                            <Tooltip>\n                              <TooltipTrigger>\n                                {formatDistanceToNow(new Date(version.createdAt), { addSuffix: true })}\n                              </TooltipTrigger>\n                              <TooltipContent>\n                                {format(new Date(version.createdAt), 'PPpp')}\n                              </TooltipContent>\n                            </Tooltip>\n                          </TooltipProvider>\n                        </span>\n                        <span className=\"flex items-center\">\n                          <FileText className=\"h-3 w-3 mr-1\" />\n                          {version.wordCount} words\n                        </span>\n                      </div>\n                      \n                      {version.changes && (\n                        <div className=\"flex items-center space-x-2 mt-2\">\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {getChangesSummary(version.changes)}\n                          </Badge>\n                        </div>\n                      )}\n                      \n                      {isExpanded && (\n                        <div className=\"mt-3 pt-3 border-t space-y-2\">\n                          <div className=\"flex items-center space-x-2\">\n                            {!compareMode && (\n                              <>\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    onPreview(version.id);\n                                  }}\n                                  data-testid={`button-preview-${version.id}`}\n                                >\n                                  <Eye className=\"h-3 w-3 mr-1\" />\n                                  Preview\n                                </Button>\n                                {canRollback && !isCurrent && (\n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"outline\"\n                                    onClick={(e) => {\n                                      e.stopPropagation();\n                                      setRollbackVersion(version);\n                                    }}\n                                    data-testid={`button-rollback-${version.id}`}\n                                  >\n                                    <RotateCcw className=\"h-3 w-3 mr-1\" />\n                                    Rollback\n                                  </Button>\n                                )}\n                              </>\n                            )}\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n          \n          {versions.length === 0 && (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <History className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n              <p>No version history available</p>\n            </div>\n          )}\n        </div>\n      </ScrollArea>\n      \n      <AlertDialog open={!!rollbackVersion} onOpenChange={() => setRollbackVersion(null)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Rollback to Version {rollbackVersion?.versionNumber}</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to rollback to this version? This will create a new version with the content from v{rollbackVersion?.versionNumber}.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <AlertDialogAction onClick={handleRollback}>\n              Rollback\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </Card>\n  );\n}","size_bytes":11670},"client/src/hooks/useBranches.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useStore } from \"@/lib/store\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n// Types\ninterface Branch {\n  id: string;\n  documentId: string;\n  name: string;\n  description?: string;\n  parentBranchId?: string;\n  isDefault: boolean;\n  isProtected: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n  createdBy: string;\n  lastCommitMessage?: string;\n  commitCount?: number;\n}\n\ninterface Version {\n  id: string;\n  branchId: string;\n  versionNumber: number;\n  message: string;\n  content: string;\n  wordCount: number;\n  authorId: string;\n  authorName: string;\n  createdAt: Date;\n  parentVersionId?: string;\n  changes?: {\n    additions: number;\n    deletions: number;\n    modified: number;\n  };\n}\n\ninterface MergeEvent {\n  id: string;\n  documentId: string;\n  sourceBranchId: string;\n  targetBranchId: string;\n  status: 'pending' | 'completed' | 'conflict' | 'failed';\n  conflictCount: number;\n  createdAt: Date;\n  completedAt?: Date;\n  createdBy: string;\n  resolutionStrategy?: 'merge' | 'overwrite';\n}\n\ninterface MergePreview {\n  hasConflicts: boolean;\n  conflicts: Array<{\n    line: number;\n    content: string;\n    type: 'current' | 'incoming';\n  }>;\n  changes: {\n    additions: number;\n    deletions: number;\n    modified: number;\n  };\n  affectedSections: string[];\n}\n\n// Hook to fetch branches for a document\nexport function useBranches(documentId: string | null) {\n  return useQuery<Branch[]>({\n    queryKey: ['/api/documents', documentId, 'branches'],\n    enabled: !!documentId,\n    staleTime: 30000, // Consider data fresh for 30 seconds\n  });\n}\n\n// Hook to create a new branch\nexport function useCreateBranch() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  const { currentDocumentId } = useStore();\n\n  return useMutation({\n    mutationFn: async (data: {\n      documentId: string;\n      name: string;\n      description?: string;\n      parentBranchId?: string;\n    }) => {\n      return apiRequest(\"POST\", `/api/documents/${data.documentId}/branches`, {\n        name: data.name,\n        description: data.description,\n        parentBranchId: data.parentBranchId,\n      });\n    },\n    onSuccess: (data, variables) => {\n      queryClient.invalidateQueries({ \n        queryKey: ['/api/documents', variables.documentId, 'branches'] \n      });\n      toast({\n        title: \"Branch Created\",\n        description: `Branch \"${variables.name}\" has been created successfully.`,\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create branch. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n\n// Hook to switch to a different branch\nexport function useSwitchBranch() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  const { setCurrentBranch } = useStore();\n\n  return useMutation({\n    mutationFn: async ({ documentId, branchId }: {\n      documentId: string;\n      branchId: string;\n    }) => {\n      // First, get the latest version from the branch\n      const response = await apiRequest(\"GET\", `/api/branches/${branchId}/latest-version`);\n      const latestVersion = await response.json();\n      \n      // Update the document content with the branch's latest version\n      await apiRequest(\"PUT\", `/api/documents/${documentId}`, {\n        currentBranchId: branchId,\n        content: latestVersion.content,\n      });\n      \n      return latestVersion;\n    },\n    onSuccess: (data, variables) => {\n      setCurrentBranch(variables.branchId);\n      \n      // Invalidate relevant queries\n      queryClient.invalidateQueries({ \n        queryKey: ['/api/documents', variables.documentId] \n      });\n      queryClient.invalidateQueries({ \n        queryKey: ['/api/branches', variables.branchId, 'versions'] \n      });\n      \n      toast({\n        title: \"Branch Switched\",\n        description: \"Successfully switched to the selected branch.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to switch branch. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n\n// Hook to fetch versions for a branch\nexport function useBranchVersions(branchId: string | null) {\n  return useQuery<Version[]>({\n    queryKey: ['/api/branches', branchId, 'versions'],\n    enabled: !!branchId,\n    staleTime: 30000,\n  });\n}\n\n// Hook to rollback to a specific version\nexport function useRollback() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: async ({ versionId, branchId }: {\n      versionId: string;\n      branchId: string;\n    }) => {\n      return apiRequest(\"POST\", `/api/versions/${versionId}/rollback`);\n    },\n    onSuccess: (data, variables) => {\n      queryClient.invalidateQueries({ \n        queryKey: ['/api/branches', variables.branchId, 'versions'] \n      });\n      queryClient.invalidateQueries({ \n        queryKey: ['/api/documents'] \n      });\n      \n      toast({\n        title: \"Rollback Successful\",\n        description: \"The document has been rolled back to the selected version.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to rollback to the selected version.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n\n// Hook to merge branches\nexport function useMergeBranches() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: async ({ \n      documentId,\n      sourceBranchId, \n      targetBranchId,\n      strategy = 'merge'\n    }: {\n      documentId: string;\n      sourceBranchId: string;\n      targetBranchId: string;\n      strategy?: 'merge' | 'overwrite';\n    }) => {\n      const response = await apiRequest(\"POST\", `/api/documents/${documentId}/merge`, {\n        sourceBranchId,\n        targetBranchId,\n        strategy,\n      });\n      return await response.json();\n    },\n    onSuccess: (data, variables) => {\n      queryClient.invalidateQueries({ \n        queryKey: ['/api/documents', variables.documentId, 'branches'] \n      });\n      queryClient.invalidateQueries({ \n        queryKey: ['/api/branches'] \n      });\n      queryClient.invalidateQueries({ \n        queryKey: ['/api/documents', variables.documentId, 'merge-events'] \n      });\n      \n      if (data.hasConflicts) {\n        toast({\n          title: \"Merge Has Conflicts\",\n          description: `${data.conflictCount} conflict(s) need to be resolved.`,\n          variant: \"default\",\n        });\n      } else {\n        toast({\n          title: \"Merge Successful\",\n          description: \"Branches have been merged successfully.\",\n        });\n      }\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to merge branches. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n\n// Hook to fetch merge events\nexport function useMergeEvents(documentId: string | null) {\n  return useQuery<MergeEvent[]>({\n    queryKey: ['/api/documents', documentId, 'merge-events'],\n    enabled: !!documentId,\n    staleTime: 60000, // Consider data fresh for 1 minute\n  });\n}\n\n// Hook to preview a merge (check for conflicts)\nexport function useMergePreview() {\n  return useMutation({\n    mutationFn: async ({ \n      documentId,\n      sourceBranchId, \n      targetBranchId \n    }: {\n      documentId: string;\n      sourceBranchId: string;\n      targetBranchId: string;\n    }): Promise<MergePreview> => {\n      const response = await apiRequest(\"POST\", `/api/documents/${documentId}/merge-preview`, {\n        sourceBranchId,\n        targetBranchId,\n      });\n      return await response.json();\n    },\n  });\n}\n\n// Hook to update a branch\nexport function useUpdateBranch() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: async ({ \n      branchId,\n      data\n    }: {\n      branchId: string;\n      data: {\n        name?: string;\n        description?: string;\n        isProtected?: boolean;\n      };\n    }) => {\n      return apiRequest(\"PATCH\", `/api/branches/${branchId}`, data);\n    },\n    onSuccess: (data, variables) => {\n      queryClient.invalidateQueries({ \n        queryKey: ['/api/branches'] \n      });\n      queryClient.invalidateQueries({ \n        queryKey: ['/api/documents'] \n      });\n      \n      toast({\n        title: \"Branch Updated\",\n        description: \"Branch has been updated successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update branch.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n\n// Hook to delete a branch\nexport function useDeleteBranch() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: async (branchId: string) => {\n      return apiRequest(\"DELETE\", `/api/branches/${branchId}`);\n    },\n    onSuccess: (data, branchId) => {\n      queryClient.invalidateQueries({ \n        queryKey: ['/api/branches'] \n      });\n      queryClient.invalidateQueries({ \n        queryKey: ['/api/documents'] \n      });\n      \n      toast({\n        title: \"Branch Deleted\",\n        description: \"Branch has been deleted successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete branch. It may be protected or have dependent data.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n\n// Hook to resolve merge conflicts\nexport function useResolveMergeConflicts() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: async ({ \n      mergeEventId,\n      resolutions \n    }: {\n      mergeEventId: string;\n      resolutions: Array<{\n        conflictId: string;\n        resolution: 'current' | 'incoming' | 'manual' | 'both';\n        manualContent?: string;\n      }>;\n    }) => {\n      return apiRequest(\"POST\", `/api/merge-events/${mergeEventId}/resolve`, {\n        resolutions,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ \n        queryKey: ['/api/documents'] \n      });\n      queryClient.invalidateQueries({ \n        queryKey: ['/api/branches'] \n      });\n      \n      toast({\n        title: \"Conflicts Resolved\",\n        description: \"All conflicts have been resolved and the merge is complete.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to resolve conflicts. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n\n// Hook to create a version/commit\nexport function useCreateVersion() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: async ({ \n      branchId,\n      content,\n      message \n    }: {\n      branchId: string;\n      content: string;\n      message: string;\n    }) => {\n      return apiRequest(\"POST\", `/api/branches/${branchId}/versions`, {\n        content,\n        message,\n      });\n    },\n    onSuccess: (data, variables) => {\n      queryClient.invalidateQueries({ \n        queryKey: ['/api/branches', variables.branchId, 'versions'] \n      });\n      \n      toast({\n        title: \"Version Created\",\n        description: \"A new version has been saved.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create version.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n}","size_bytes":11557},"server/templates.ts":{"content":"import type { \n  InsertDocument, \n  InsertCharacter, \n  InsertWorldbuildingEntry, \n  InsertTimelineEvent \n} from \"@shared/schema\";\n\nexport type TemplateType = 'blank' | 'novel' | 'screenplay' | 'short-story';\n\nexport interface ProjectTemplate {\n  documents: Omit<InsertDocument, 'projectId' | 'authorId'>[];\n  characters: Omit<InsertCharacter, 'projectId'>[];\n  worldbuilding: Omit<InsertWorldbuildingEntry, 'projectId'>[];\n  timeline: Omit<InsertTimelineEvent, 'projectId'>[];\n}\n\nexport const templates: Record<TemplateType, ProjectTemplate> = {\n  blank: {\n    documents: [],\n    characters: [],\n    worldbuilding: [],\n    timeline: [],\n  },\n\n  novel: {\n    documents: [\n      {\n        title: \"Chapter 1\",\n        content: \"<p>Start writing your first chapter here. Introduce your characters, setting, and the initial conflict...</p>\",\n        orderIndex: 0,\n      },\n      {\n        title: \"Chapter 2\",\n        content: \"<p>Continue your story in chapter 2. Develop your plot and characters further...</p>\",\n        orderIndex: 1,\n      },\n      {\n        title: \"Chapter 3\",\n        content: \"<p>Build momentum in chapter 3. Deepen the conflict and raise the stakes...</p>\",\n        orderIndex: 2,\n      },\n    ],\n    characters: [\n      {\n        name: \"Protagonist\",\n        description: \"The main character of your story\",\n        background: \"Add the protagonist's backstory and history here...\",\n        personality: \"Describe their personality traits, motivations, and flaws...\",\n        appearance: \"Describe their physical appearance and distinctive features...\",\n        relationships: {},\n        notes: \"Additional notes about your protagonist...\",\n      },\n      {\n        name: \"Antagonist\",\n        description: \"The primary opposing force in your story\",\n        background: \"Add the antagonist's backstory and motivations here...\",\n        personality: \"Describe what drives them and their key characteristics...\",\n        appearance: \"Describe their physical appearance...\",\n        relationships: {},\n        notes: \"Additional notes about your antagonist...\",\n      },\n    ],\n    worldbuilding: [\n      {\n        title: \"Main Setting\",\n        type: \"location\",\n        description: \"Describe the primary location where your story takes place. Include details about geography, culture, society, and atmosphere...\",\n        tags: [\"primary\", \"setting\"],\n      },\n      {\n        title: \"Magic System\",\n        type: \"system\",\n        description: \"If your novel includes a magic system, supernatural elements, or unique world mechanics, describe them here. Include rules, limitations, and how they affect your story...\",\n        tags: [\"magic\", \"system\"],\n      },\n    ],\n    timeline: [\n      {\n        title: \"Story Beginning\",\n        date: null,\n        description: \"Mark the beginning of your story's timeline. What is the inciting incident that sets everything in motion?\",\n      },\n    ],\n  },\n\n  screenplay: {\n    documents: [\n      {\n        title: \"Act I\",\n        content: \"<p>ACT I - SETUP</p><p>Introduce your protagonist, their world, and the story's central conflict. End with a turning point that propels the story forward...</p>\",\n        orderIndex: 0,\n      },\n      {\n        title: \"Act II\",\n        content: \"<p>ACT II - CONFRONTATION</p><p>The protagonist faces obstacles and challenges. Develop subplots and deepen character relationships. Build toward the midpoint and second turning point...</p>\",\n        orderIndex: 1,\n      },\n      {\n        title: \"Act III\",\n        content: \"<p>ACT III - RESOLUTION</p><p>The climax and resolution of your story. All conflicts come to a head and are resolved...</p>\",\n        orderIndex: 2,\n      },\n    ],\n    characters: [\n      {\n        name: \"Main Character\",\n        description: \"The protagonist of your screenplay\",\n        background: \"Character's backstory and what brought them to this point...\",\n        personality: \"Personality traits, desires, and internal conflicts...\",\n        appearance: \"Age, physical description, and how they present themselves...\",\n        relationships: {},\n        notes: \"Character arc and development notes...\",\n      },\n      {\n        name: \"Supporting Character\",\n        description: \"A key supporting character\",\n        background: \"Their relationship to the main character and role in the story...\",\n        personality: \"Key traits and how they complement or challenge the protagonist...\",\n        appearance: \"Physical description...\",\n        relationships: {},\n        notes: \"Additional character notes...\",\n      },\n    ],\n    worldbuilding: [\n      {\n        title: \"Primary Location\",\n        type: \"location\",\n        description: \"Describe the main setting where most of your screenplay takes place. Include visual details, atmosphere, and how the location affects the story...\",\n        tags: [\"location\", \"primary\"],\n      },\n      {\n        title: \"Secondary Location\",\n        type: \"location\",\n        description: \"Describe an important secondary location. This could be where key scenes take place or represents a contrast to the primary setting...\",\n        tags: [\"location\", \"secondary\"],\n      },\n    ],\n    timeline: [\n      {\n        title: \"Opening Scene\",\n        date: null,\n        description: \"The opening image and scene of your screenplay. What visual and emotional tone are you setting?\",\n      },\n    ],\n  },\n\n  \"short-story\": {\n    documents: [\n      {\n        title: \"Draft\",\n        content: \"<p>Begin your short story here. Remember to focus on a single conflict or theme, with a clear beginning, middle, and end...</p>\",\n        orderIndex: 0,\n      },\n    ],\n    characters: [\n      {\n        name: \"Main Character\",\n        description: \"The protagonist of your short story\",\n        background: \"Brief backstory relevant to the story...\",\n        personality: \"Key personality traits and motivations...\",\n        appearance: \"Essential physical details...\",\n        relationships: {},\n        notes: \"Character notes and development...\",\n      },\n    ],\n    worldbuilding: [\n      {\n        title: \"Setting\",\n        type: \"location\",\n        description: \"Describe the setting of your short story. Include sensory details and atmosphere that enhance your theme...\",\n        tags: [\"setting\"],\n      },\n    ],\n    timeline: [\n      {\n        title: \"Key Event\",\n        date: null,\n        description: \"The central event or turning point of your short story.\",\n      },\n    ],\n  },\n};\n\nexport function getTemplate(templateType: TemplateType): ProjectTemplate {\n  return templates[templateType] || templates.blank;\n}\n","size_bytes":6598},"shared/utils.ts":{"content":"/**\n * Calculate word count from HTML content\n * Strips HTML tags, decodes entities, splits on whitespace\n * Works on both browser and Node.js environments\n */\nexport function calculateWordCount(htmlContent: string): number {\n  if (!htmlContent) return 0;\n  \n  // Strip HTML tags\n  const textWithEntities = htmlContent.replace(/<[^>]*>/g, '');\n  \n  // Decode common HTML entities manually (for Node.js compatibility)\n  let text = textWithEntities\n    .replace(/&nbsp;/g, ' ')\n    .replace(/&amp;/g, '&')\n    .replace(/&lt;/g, '<')\n    .replace(/&gt;/g, '>')\n    .replace(/&quot;/g, '\"')\n    .replace(/&#39;/g, \"'\")\n    .replace(/&mdash;/g, '—')\n    .replace(/&ndash;/g, '–')\n    .replace(/&hellip;/g, '…');\n  \n  // Treat punctuation as word separators (per architect requirement)\n  // Replace em-dash, en-dash, ellipsis with spaces\n  text = text\n    .replace(/—/g, ' ')  // em dash\n    .replace(/–/g, ' ')  // en dash\n    .replace(/…/g, ' ')  // ellipsis\n    .replace(/\\.\\.\\./g, ' ')  // three dots\n    .trim();\n  \n  if (!text) return 0;\n  \n  // Split on whitespace and filter empty strings\n  const words = text.split(/\\s+/).filter(s => s.length > 0);\n  return words.length;\n}\n","size_bytes":1189},"client/src/components/getting-started-checklist.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { X, RefreshCw, ChevronDown, ChevronUp } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface ChecklistStep {\n  id: string;\n  label: string;\n  description: string;\n  completed: boolean;\n}\n\ninterface GettingStartedChecklistProps {\n  steps: {\n    createProject: boolean;\n    useAI: boolean;\n    addCharacter: boolean;\n    viewAnalytics: boolean;\n    tryExport: boolean;\n  };\n  onRestartTour: () => void;\n  onDismiss: () => void;\n}\n\nexport default function GettingStartedChecklist({ \n  steps, \n  onRestartTour,\n  onDismiss \n}: GettingStartedChecklistProps) {\n  const [isCollapsed, setIsCollapsed] = useState(false);\n\n  const checklistSteps: ChecklistStep[] = [\n    {\n      id: \"createProject\",\n      label: \"Create your first project\",\n      description: \"Start your writing journey\",\n      completed: steps.createProject,\n    },\n    {\n      id: \"useAI\",\n      label: \"Try the AI writing assistant\",\n      description: \"Get help from The Muse, Editor, or Coach\",\n      completed: steps.useAI,\n    },\n    {\n      id: \"addCharacter\",\n      label: \"Add a character\",\n      description: \"Build your story bible\",\n      completed: steps.addCharacter,\n    },\n    {\n      id: \"viewAnalytics\",\n      label: \"View analytics\",\n      description: \"Track your writing progress\",\n      completed: steps.viewAnalytics,\n    },\n    {\n      id: \"tryExport\",\n      label: \"Export your work\",\n      description: \"Download in your preferred format\",\n      completed: steps.tryExport,\n    },\n  ];\n\n  const completedCount = checklistSteps.filter(step => step.completed).length;\n  const totalCount = checklistSteps.length;\n  const progressPercentage = (completedCount / totalCount) * 100;\n\n  return (\n    <Card \n      className=\"fixed bottom-6 right-6 w-96 shadow-2xl border-2 border-primary/20 dark:border-primary/30 bg-card dark:bg-card z-50\"\n      data-testid=\"card-getting-started\"\n    >\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between gap-2\">\n          <div className=\"flex-1\">\n            <CardTitle className=\"text-lg font-bold text-foreground dark:text-foreground\" data-testid=\"text-checklist-title\">\n              Getting Started\n            </CardTitle>\n            <CardDescription className=\"text-sm text-muted-foreground dark:text-muted-foreground\" data-testid=\"text-checklist-description\">\n              {completedCount} of {totalCount} completed\n            </CardDescription>\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"h-8 w-8 text-muted-foreground hover:text-foreground dark:text-muted-foreground dark:hover:text-foreground\"\n              onClick={() => setIsCollapsed(!isCollapsed)}\n              data-testid=\"button-toggle-collapse\"\n            >\n              {isCollapsed ? <ChevronUp className=\"h-4 w-4\" /> : <ChevronDown className=\"h-4 w-4\" />}\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"h-8 w-8 text-muted-foreground hover:text-foreground dark:text-muted-foreground dark:hover:text-foreground\"\n              onClick={onDismiss}\n              data-testid=\"button-dismiss-checklist\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n        \n        <div className=\"space-y-2 pt-2\">\n          <Progress \n            value={progressPercentage} \n            className=\"h-2 bg-muted dark:bg-muted\"\n            data-testid=\"progress-checklist\"\n          />\n          <p className=\"text-xs text-muted-foreground dark:text-muted-foreground\" data-testid=\"text-progress-percentage\">\n            {Math.round(progressPercentage)}% complete\n          </p>\n        </div>\n      </CardHeader>\n\n      {!isCollapsed && (\n        <CardContent className=\"space-y-4 pt-0\" data-testid=\"content-checklist-items\">\n          <div className=\"space-y-3\">\n            {checklistSteps.map((step, index) => (\n              <div\n                key={step.id}\n                className={cn(\n                  \"flex items-start gap-3 p-3 rounded-lg transition-all\",\n                  step.completed \n                    ? \"bg-primary/5 dark:bg-primary/10 border border-primary/20 dark:border-primary/30\" \n                    : \"bg-muted/30 dark:bg-muted/20 border border-transparent\"\n                )}\n                data-testid={`item-checklist-${step.id}`}\n              >\n                <Checkbox\n                  checked={step.completed}\n                  disabled\n                  className=\"mt-1\"\n                  data-testid={`checkbox-${step.id}`}\n                />\n                <div className=\"flex-1 space-y-1\">\n                  <p \n                    className={cn(\n                      \"text-sm font-medium\",\n                      step.completed \n                        ? \"text-foreground dark:text-foreground line-through\" \n                        : \"text-foreground dark:text-foreground\"\n                    )}\n                    data-testid={`text-step-label-${step.id}`}\n                  >\n                    {step.label}\n                  </p>\n                  <p \n                    className=\"text-xs text-muted-foreground dark:text-muted-foreground\"\n                    data-testid={`text-step-description-${step.id}`}\n                  >\n                    {step.description}\n                  </p>\n                </div>\n              </div>\n            ))}\n          </div>\n\n          <div className=\"pt-2 border-t border-border dark:border-border\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"w-full text-muted-foreground hover:text-foreground dark:text-muted-foreground dark:hover:text-foreground\"\n              onClick={onRestartTour}\n              data-testid=\"button-restart-tour\"\n            >\n              <RefreshCw className=\"w-4 h-4 mr-2\" />\n              Restart Tour\n            </Button>\n          </div>\n        </CardContent>\n      )}\n    </Card>\n  );\n}\n","size_bytes":6353},"client/src/components/onboarding-welcome.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Carousel, CarouselContent, CarouselItem, CarouselNext, CarouselPrevious } from \"@/components/ui/carousel\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { BookOpen, Bot, Users, Download, Sparkles, FileText, Map, Clock } from \"lucide-react\";\nimport type { CarouselApi } from \"@/components/ui/carousel\";\n\ninterface OnboardingWelcomeProps {\n  open: boolean;\n  onClose: () => void;\n  onComplete: () => void;\n}\n\nexport default function OnboardingWelcome({ open, onClose, onComplete }: OnboardingWelcomeProps) {\n  const [api, setApi] = useState<CarouselApi>();\n  const [current, setCurrent] = useState(0);\n\n  const slides = [\n    {\n      icon: Sparkles,\n      title: \"Welcome to 88away\",\n      description: \"Your AI-powered creative writing companion\",\n      content: \"88away helps you craft compelling stories with advanced AI assistance, comprehensive story management tools, and seamless collaboration features. Let's take a quick tour of what makes 88away special.\",\n    },\n    {\n      icon: Bot,\n      title: \"AI Writing Personas\",\n      description: \"Three distinct AI companions for every stage\",\n      content: \"Meet your AI team: The Muse for brainstorming inspiration, The Editor for refining your prose, and The Coach for overcoming writer's block. Choose project templates that match your genre to get started quickly.\",\n      features: [\n        { icon: Sparkles, text: \"The Muse - Brainstorming & Inspiration\" },\n        { icon: FileText, text: \"The Editor - Polish & Refinement\" },\n        { icon: BookOpen, text: \"The Coach - Guidance & Support\" },\n      ],\n    },\n    {\n      icon: Map,\n      title: \"Story Bible & World Building\",\n      description: \"Keep your narrative consistent and organized\",\n      content: \"Create detailed character profiles, build rich worlds, and maintain a comprehensive timeline. Everything you need to ensure continuity and depth in your storytelling.\",\n      features: [\n        { icon: Users, text: \"Character profiles with relationships\" },\n        { icon: Map, text: \"Worldbuilding entries for locations & lore\" },\n        { icon: Clock, text: \"Timeline tracking for plot consistency\" },\n      ],\n    },\n    {\n      icon: Download,\n      title: \"Collaboration & Export\",\n      description: \"Work together and share your stories\",\n      content: \"Invite collaborators with role-based permissions, track changes with version control, and export your work in multiple formats including Word, PDF, and EPUB.\",\n      features: [\n        { icon: Users, text: \"Real-time collaboration\" },\n        { icon: FileText, text: \"Version control & branching\" },\n        { icon: Download, text: \"Export to Word, PDF, EPUB\" },\n      ],\n    },\n  ];\n\n  const handleGetStarted = () => {\n    onComplete();\n  };\n\n  const handleSkip = () => {\n    onClose();\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent \n        className=\"max-w-3xl max-h-[90vh] overflow-y-auto bg-gradient-to-b from-background to-muted/20 dark:from-background dark:to-muted/10\"\n        data-testid=\"dialog-onboarding-welcome\"\n      >\n        <DialogHeader>\n          <DialogTitle className=\"text-2xl font-bold\" data-testid=\"text-welcome-title\">\n            Get Started with 88away\n          </DialogTitle>\n          <DialogDescription data-testid=\"text-welcome-description\">\n            Learn how to make the most of your creative writing journey\n          </DialogDescription>\n        </DialogHeader>\n\n        <Carousel \n          className=\"w-full\"\n          setApi={setApi}\n          opts={{ loop: false }}\n        >\n          <CarouselContent>\n            {slides.map((slide, index) => (\n              <CarouselItem key={index}>\n                <Card className=\"border-2 border-muted bg-card/50 dark:bg-card/30\" data-testid={`card-slide-${index}`}>\n                  <CardContent className=\"flex flex-col items-center justify-center p-8 space-y-6\">\n                    <div className=\"w-20 h-20 rounded-full bg-primary/10 dark:bg-primary/20 flex items-center justify-center\">\n                      <slide.icon className=\"w-10 h-10 text-primary\" data-testid={`icon-slide-${index}`} />\n                    </div>\n                    \n                    <div className=\"text-center space-y-2\">\n                      <h3 className=\"text-2xl font-bold text-foreground dark:text-foreground\" data-testid={`text-slide-title-${index}`}>\n                        {slide.title}\n                      </h3>\n                      <p className=\"text-sm font-medium text-muted-foreground dark:text-muted-foreground\" data-testid={`text-slide-description-${index}`}>\n                        {slide.description}\n                      </p>\n                    </div>\n\n                    <p className=\"text-center text-muted-foreground dark:text-muted-foreground max-w-xl\" data-testid={`text-slide-content-${index}`}>\n                      {slide.content}\n                    </p>\n\n                    {slide.features && (\n                      <div className=\"grid gap-4 w-full max-w-xl\" data-testid={`list-slide-features-${index}`}>\n                        {slide.features.map((feature, idx) => (\n                          <div \n                            key={idx} \n                            className=\"flex items-center gap-3 p-3 rounded-lg bg-muted/30 dark:bg-muted/20\"\n                            data-testid={`item-feature-${index}-${idx}`}\n                          >\n                            <feature.icon className=\"w-5 h-5 text-primary shrink-0\" />\n                            <span className=\"text-sm text-foreground dark:text-foreground\">{feature.text}</span>\n                          </div>\n                        ))}\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </CarouselItem>\n            ))}\n          </CarouselContent>\n          \n          <div className=\"flex items-center justify-center gap-4 mt-6\">\n            <CarouselPrevious \n              className=\"relative static translate-y-0\"\n              data-testid=\"button-carousel-previous\"\n            />\n            <div className=\"flex gap-2\" data-testid=\"indicator-carousel-dots\">\n              {slides.map((_, index) => (\n                <div\n                  key={index}\n                  className={`h-2 rounded-full transition-all ${\n                    index === (api?.selectedScrollSnap() ?? 0)\n                      ? \"w-8 bg-primary\"\n                      : \"w-2 bg-muted-foreground/30\"\n                  }`}\n                  data-testid={`dot-carousel-${index}`}\n                />\n              ))}\n            </div>\n            <CarouselNext \n              className=\"relative static translate-y-0\"\n              data-testid=\"button-carousel-next\"\n            />\n          </div>\n        </Carousel>\n\n        <div className=\"flex items-center justify-between gap-4 pt-4 border-t border-border dark:border-border\">\n          <Button\n            variant=\"ghost\"\n            onClick={handleSkip}\n            className=\"text-muted-foreground dark:text-muted-foreground hover:text-foreground dark:hover:text-foreground\"\n            data-testid=\"button-skip-tour\"\n          >\n            Skip Tour\n          </Button>\n          <Button\n            onClick={handleGetStarted}\n            className=\"bg-primary text-primary-foreground hover:bg-primary/90 dark:bg-primary dark:text-primary-foreground dark:hover:bg-primary/90\"\n            data-testid=\"button-get-started\"\n          >\n            Get Started\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":7789},"client/src/components/footer.tsx":{"content":"import { Link } from \"wouter\";\nimport { Separator } from \"@/components/ui/separator\";\n\nexport function Footer() {\n  return (\n    <>\n      <Separator />\n      <footer data-testid=\"footer-main\" className=\"mt-auto py-6 px-4\">\n        <div className=\"container max-w-7xl mx-auto\">\n          <div className=\"flex flex-col md:flex-row justify-between items-center gap-4\">\n            <p data-testid=\"text-copyright\" className=\"text-sm text-muted-foreground\">\n              © 2025 88Away. All rights reserved.\n            </p>\n            <div className=\"flex gap-6 text-sm\">\n              <Link data-testid=\"link-privacy\" href=\"/privacy\" className=\"text-muted-foreground hover:text-foreground\">\n                Privacy Policy\n              </Link>\n              <Link data-testid=\"link-terms\" href=\"/terms\" className=\"text-muted-foreground hover:text-foreground\">\n                Terms & Conditions\n              </Link>\n              <Link data-testid=\"link-cookies\" href=\"/cookies\" className=\"text-muted-foreground hover:text-foreground\">\n                Cookie Policy\n              </Link>\n            </div>\n          </div>\n        </div>\n      </footer>\n    </>\n  );\n}\n","size_bytes":1170},"client/src/pages/cookies.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Link } from \"wouter\";\nimport { ArrowLeft } from \"lucide-react\";\n\nexport default function CookiesPage() {\n  return (\n    <div data-testid=\"page-cookies\" className=\"min-h-screen bg-background\">\n      <div className=\"container max-w-4xl mx-auto py-12 px-4\">\n        <Link href=\"/\">\n          <Button variant=\"ghost\" className=\"mb-6\" data-testid=\"button-back\">\n            <ArrowLeft className=\"mr-2 h-4 w-4\" />\n            Back to Home\n          </Button>\n        </Link>\n\n        <h1 data-testid=\"heading-cookie-policy\" className=\"text-4xl font-bold mb-4\">\n          Cookie Policy\n        </h1>\n        <p className=\"text-muted-foreground mb-8\">\n          Last updated: October 2, 2025\n        </p>\n\n        <div className=\"space-y-6\">\n          <Card data-testid=\"section-what-are-cookies\">\n            <CardHeader>\n              <CardTitle className=\"text-2xl\">1. What Are Cookies</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <p className=\"text-muted-foreground\">\n                Cookies are small text files that are placed on your device (computer, tablet, or mobile) \n                when you visit a website. They are widely used to make websites work more efficiently and \n                provide a better user experience by remembering your preferences and previous actions.\n              </p>\n              <p className=\"text-muted-foreground\">\n                Cookies help us recognize you when you return to 88Away, remember your settings and \n                preferences, and provide essential functionality like keeping you logged in. They contain \n                information that is transferred to your device's hard drive and stored by your web browser.\n              </p>\n              <p className=\"text-muted-foreground\">\n                Most web browsers automatically accept cookies, but you can modify your browser settings \n                to decline cookies if you prefer. However, disabling cookies may prevent you from using \n                certain features of our platform.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"section-how-we-use-cookies\">\n            <CardHeader>\n              <CardTitle className=\"text-2xl\">2. How We Use Cookies</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <p className=\"text-muted-foreground\">\n                88Away uses cookies to enhance your experience and provide essential functionality. \n                We use cookies for the following purposes:\n              </p>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Session Management</h3>\n                <p className=\"text-muted-foreground\">\n                  Cookies help us manage your session on our platform, keeping you logged in as you \n                  navigate between pages and ensuring your collaborative editing sessions remain active \n                  without interruption.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Authentication</h3>\n                <p className=\"text-muted-foreground\">\n                  We use secure session cookies to verify your identity and maintain your authenticated \n                  state. This ensures that your writing projects and personal data remain secure and \n                  accessible only to you.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">User Preferences</h3>\n                <p className=\"text-muted-foreground\">\n                  Cookies store your personal preferences such as theme settings (light or dark mode), \n                  language preferences, editor settings, and other customization options to provide a \n                  personalized experience each time you visit.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Platform Functionality</h3>\n                <p className=\"text-muted-foreground\">\n                  Essential cookies enable core features like real-time collaboration, document auto-save, \n                  version control, and other critical platform functionality that makes 88Away work properly.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"section-cookie-types\">\n            <CardHeader>\n              <CardTitle className=\"text-2xl\">3. Types of Cookies We Use</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <p className=\"text-muted-foreground\">\n                We use different types of cookies for different purposes. Below is a detailed breakdown \n                of the cookies used on 88Away:\n              </p>\n\n              <div>\n                <h3 className=\"text-lg font-semibold mb-3\">Essential Cookies</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  These cookies are necessary for the website to function properly. They enable core \n                  functionality such as security, authentication, and session management. The website \n                  cannot function properly without these cookies.\n                </p>\n              </div>\n\n              <div>\n                <h3 className=\"text-lg font-semibold mb-3\">Functional Cookies</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  These cookies allow the website to remember choices you make (such as your username, \n                  language, or theme preference) and provide enhanced, personalized features.\n                </p>\n              </div>\n\n              <div>\n                <h3 className=\"text-lg font-semibold mb-3\">Analytics Cookies</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  These cookies help us understand how visitors interact with our platform by collecting \n                  and reporting information anonymously. This helps us improve our services and user experience.\n                </p>\n              </div>\n\n              <div>\n                <h3 className=\"text-lg font-semibold mb-3\">Cookie Details</h3>\n                <div className=\"rounded-md border\">\n                  <Table data-testid=\"table-cookies\">\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead className=\"font-semibold\">Cookie Name</TableHead>\n                        <TableHead className=\"font-semibold\">Purpose</TableHead>\n                        <TableHead className=\"font-semibold\">Duration</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      <TableRow>\n                        <TableCell className=\"font-mono text-sm\">connect.sid</TableCell>\n                        <TableCell className=\"text-muted-foreground\">\n                          Session authentication cookie that keeps you logged in and maintains \n                          your authenticated state across the platform\n                        </TableCell>\n                        <TableCell className=\"text-muted-foreground\">Session (expires when browser closes)</TableCell>\n                      </TableRow>\n                      <TableRow>\n                        <TableCell className=\"font-mono text-sm\">theme_preference</TableCell>\n                        <TableCell className=\"text-muted-foreground\">\n                          Stores your theme preference (light or dark mode) to provide a \n                          consistent visual experience\n                        </TableCell>\n                        <TableCell className=\"text-muted-foreground\">1 year</TableCell>\n                      </TableRow>\n                      <TableRow>\n                        <TableCell className=\"font-mono text-sm\">editor_settings</TableCell>\n                        <TableCell className=\"text-muted-foreground\">\n                          Remembers your editor preferences such as font size, line spacing, \n                          and formatting toolbar configuration\n                        </TableCell>\n                        <TableCell className=\"text-muted-foreground\">6 months</TableCell>\n                      </TableRow>\n                      <TableRow>\n                        <TableCell className=\"font-mono text-sm\">user_preferences</TableCell>\n                        <TableCell className=\"text-muted-foreground\">\n                          Stores various user preferences including language, notification \n                          settings, and dashboard layout\n                        </TableCell>\n                        <TableCell className=\"text-muted-foreground\">1 year</TableCell>\n                      </TableRow>\n                      <TableRow>\n                        <TableCell className=\"font-mono text-sm\">analytics_id</TableCell>\n                        <TableCell className=\"text-muted-foreground\">\n                          Anonymous identifier used to track usage patterns and analyze platform \n                          performance to improve user experience\n                        </TableCell>\n                        <TableCell className=\"text-muted-foreground\">2 years</TableCell>\n                      </TableRow>\n                    </TableBody>\n                  </Table>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"section-third-party-cookies\">\n            <CardHeader>\n              <CardTitle className=\"text-2xl\">4. Third-Party Cookies</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <p className=\"text-muted-foreground\">\n                In addition to our own cookies, we may use third-party cookies from trusted partners \n                to provide enhanced functionality and services:\n              </p>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Stripe Payment Cookies</h3>\n                <p className=\"text-muted-foreground\">\n                  When you make a payment or manage your subscription, Stripe (our payment processor) \n                  may set cookies to process transactions securely, prevent fraud, and remember your \n                  payment information for future purchases. These cookies are subject to Stripe's privacy \n                  policy and cookie policy.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Service Integration Cookies</h3>\n                <p className=\"text-muted-foreground\">\n                  We integrate with third-party services like OpenAI for AI writing assistance. These \n                  services may use cookies when you interact with their features. We do not control \n                  these third-party cookies, and they are subject to the respective third party's \n                  privacy and cookie policies.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Third-Party Responsibility</h3>\n                <p className=\"text-muted-foreground\">\n                  We are not responsible for the cookies set by third-party services. We encourage you \n                  to review the cookie policies of any third-party services you interact with through \n                  our platform. Links to third-party cookie policies are available in our Privacy Policy.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"section-managing-cookies\">\n            <CardHeader>\n              <CardTitle className=\"text-2xl\">5. Managing Cookie Preferences</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <p className=\"text-muted-foreground\">\n                You have the right to decide whether to accept or reject cookies. You can manage your \n                cookie preferences through your browser settings or by using our cookie preference tools.\n              </p>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Browser Settings</h3>\n                <p className=\"text-muted-foreground mb-3\">\n                  Most web browsers allow you to control cookies through their settings. You can set \n                  your browser to refuse all cookies or to indicate when a cookie is being sent. Here's \n                  how to manage cookies in popular browsers:\n                </p>\n                <ul className=\"list-disc list-inside space-y-2 text-muted-foreground ml-4\">\n                  <li><strong>Google Chrome:</strong> Settings → Privacy and security → Cookies and other site data</li>\n                  <li><strong>Mozilla Firefox:</strong> Settings → Privacy & Security → Cookies and Site Data</li>\n                  <li><strong>Safari:</strong> Preferences → Privacy → Cookies and website data</li>\n                  <li><strong>Microsoft Edge:</strong> Settings → Cookies and site permissions → Manage and delete cookies</li>\n                </ul>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Impact of Disabling Cookies</h3>\n                <p className=\"text-muted-foreground\">\n                  Please note that if you disable or refuse cookies, some features of 88Away may not \n                  function properly. Essential cookies are required for authentication and core platform \n                  functionality. Disabling these cookies will prevent you from logging in and using the \n                  platform effectively.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Deleting Cookies</h3>\n                <p className=\"text-muted-foreground\">\n                  You can delete cookies that have already been set through your browser settings. \n                  However, deleting cookies may result in the loss of saved preferences and require you \n                  to log in again. Your browser's help section will provide specific instructions on \n                  how to delete cookies.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Mobile Devices</h3>\n                <p className=\"text-muted-foreground\">\n                  For mobile devices, cookie management is typically handled through your device's \n                  browser settings. Consult your mobile browser's help documentation for specific \n                  instructions on managing cookies on mobile devices.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"section-cookie-duration\">\n            <CardHeader>\n              <CardTitle className=\"text-2xl\">6. Cookie Duration and Expiry</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <p className=\"text-muted-foreground\">\n                Cookies have different lifespans depending on their purpose. We use both session cookies \n                and persistent cookies:\n              </p>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Session Cookies</h3>\n                <p className=\"text-muted-foreground\">\n                  Session cookies are temporary and are deleted when you close your browser. These cookies \n                  are essential for maintaining your login session and ensuring secure authentication. Our \n                  main session cookie (connect.sid) is a session cookie that expires when you close your \n                  browser or log out.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Persistent Cookies</h3>\n                <p className=\"text-muted-foreground\">\n                  Persistent cookies remain on your device for a set period or until you delete them. \n                  These cookies remember your preferences and settings across multiple visits. Our \n                  persistent cookies have expiry periods ranging from 6 months to 2 years, depending \n                  on their purpose.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Automatic Expiry</h3>\n                <p className=\"text-muted-foreground\">\n                  All cookies automatically expire after their designated duration. When a cookie expires, \n                  it is automatically deleted from your device. You may need to reset your preferences \n                  or log in again after cookie expiry.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Cookie Renewal</h3>\n                <p className=\"text-muted-foreground\">\n                  Some cookies may be renewed or extended each time you visit our platform. This ensures \n                  that your preferences and settings are maintained as long as you continue to use 88Away \n                  regularly.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"section-policy-changes\">\n            <CardHeader>\n              <CardTitle className=\"text-2xl\">7. Changes to Cookie Policy</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <p className=\"text-muted-foreground\">\n                We may update this Cookie Policy from time to time to reflect changes in our cookie \n                usage, technology, legal requirements, or other operational needs. When we make \n                significant changes, we will notify you in the following ways:\n              </p>\n              <ul className=\"list-disc list-inside space-y-2 text-muted-foreground\">\n                <li>Updating the \"Last updated\" date at the top of this Cookie Policy</li>\n                <li>Posting a notice on our platform about the changes</li>\n                <li>Sending an email notification to your registered email address for significant changes</li>\n                <li>Displaying a prominent banner or popup notification when you visit the platform</li>\n              </ul>\n              <p className=\"text-muted-foreground\">\n                We encourage you to review this Cookie Policy periodically to stay informed about how \n                we use cookies and how they help improve your experience on 88Away. Your continued use \n                of our platform after any changes to this Cookie Policy constitutes your acceptance of \n                the updated terms.\n              </p>\n              <p className=\"text-muted-foreground\">\n                If you do not agree with any changes to this Cookie Policy, you may adjust your cookie \n                preferences through your browser settings or discontinue use of our platform.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"section-contact-information\">\n            <CardHeader>\n              <CardTitle className=\"text-2xl\">8. Contact Information</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <p className=\"text-muted-foreground\">\n                If you have any questions, concerns, or requests regarding this Cookie Policy or our \n                use of cookies, please don't hesitate to contact us. We're here to help you understand \n                how we use cookies and address any privacy concerns you may have.\n              </p>\n              <div className=\"bg-muted/50 p-4 rounded-lg space-y-2\">\n                <p className=\"font-semibold\">88Away Privacy Team</p>\n                <p className=\"text-muted-foreground\">Email: privacy@88away.com</p>\n                <p className=\"text-muted-foreground\">Support: support@88away.com</p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Additional Resources</h3>\n                <p className=\"text-muted-foreground\">\n                  For more information about how we handle your data and protect your privacy, please \n                  review our{\" \"}\n                  <Link href=\"/privacy\">\n                    <a className=\"text-primary hover:underline\" data-testid=\"link-privacy-policy\">\n                      Privacy Policy\n                    </a>\n                  </Link>\n                  . For questions about our terms of service, please see our{\" \"}\n                  <Link href=\"/terms\">\n                    <a className=\"text-primary hover:underline\" data-testid=\"link-terms\">\n                      Terms and Conditions\n                    </a>\n                  </Link>\n                  .\n                </p>\n              </div>\n              <p className=\"text-muted-foreground\">\n                We will respond to all legitimate inquiries within 30 days. For urgent cookie or \n                privacy matters, please mark your email as \"Urgent Privacy Matter\" in the subject line.\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"mt-12 p-6 bg-muted/30 rounded-lg\">\n          <p className=\"text-sm text-muted-foreground text-center\">\n            This Cookie Policy is effective as of October 2, 2025. By using 88Away, you acknowledge \n            that you have read and understood this Cookie Policy and consent to our use of cookies \n            as described herein.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":22029},"client/src/pages/privacy.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport { ArrowLeft } from \"lucide-react\";\n\nexport default function PrivacyPage() {\n  return (\n    <div data-testid=\"page-privacy\" className=\"min-h-screen bg-background\">\n      <div className=\"container max-w-4xl mx-auto py-12 px-4\">\n        <Link href=\"/\">\n          <Button variant=\"ghost\" className=\"mb-6\" data-testid=\"button-back\">\n            <ArrowLeft className=\"mr-2 h-4 w-4\" />\n            Back to Home\n          </Button>\n        </Link>\n\n        <h1 data-testid=\"heading-privacy-policy\" className=\"text-4xl font-bold mb-4\">\n          Privacy Policy\n        </h1>\n        <p className=\"text-muted-foreground mb-8\">\n          Last updated: October 2, 2025\n        </p>\n\n        <div className=\"space-y-6\">\n          <Card data-testid=\"section-data-collection\">\n            <CardHeader>\n              <CardTitle className=\"text-2xl\">1. Information We Collect</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Account Information</h3>\n                <p className=\"text-muted-foreground\">\n                  When you create an account on 88Away, we collect your email address, username, \n                  and authentication credentials. This information is necessary to provide you with \n                  access to our collaborative writing platform.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Content Data</h3>\n                <p className=\"text-muted-foreground\">\n                  We store all content you create on our platform, including your writing projects, \n                  characters, worldbuilding notes, timelines, and any other data you input into our \n                  system. This data is essential for providing our core services.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">AI Interaction Data</h3>\n                <p className=\"text-muted-foreground\">\n                  When you use our AI-powered writing assistant features (Muse, Editor, and Coach personas), \n                  we process your content and prompts to generate AI responses. This may include the text \n                  you're working on and your instructions to the AI.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Usage Information</h3>\n                <p className=\"text-muted-foreground\">\n                  We collect information about how you use 88Away, including pages visited, features used, \n                  collaboration activities, and analytics data to improve our services and user experience.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Payment Information</h3>\n                <p className=\"text-muted-foreground\">\n                  If you subscribe to a paid plan, our payment processor (Stripe) collects and processes \n                  your payment information. We do not store complete credit card numbers on our servers.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"section-how-we-use-information\">\n            <CardHeader>\n              <CardTitle className=\"text-2xl\">2. How We Use Information</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <p className=\"text-muted-foreground\">\n                We use the information we collect for the following purposes:\n              </p>\n              <ul className=\"list-disc list-inside space-y-2 text-muted-foreground\">\n                <li>To provide, maintain, and improve our collaborative writing platform services</li>\n                <li>To enable AI-powered writing assistance through OpenAI's language models</li>\n                <li>To facilitate team collaboration features and real-time document editing</li>\n                <li>To process payments and manage your subscription through Stripe</li>\n                <li>To send you service-related notifications and important updates</li>\n                <li>To analyze usage patterns and enhance user experience</li>\n                <li>To prevent fraud, abuse, and ensure platform security</li>\n                <li>To comply with legal obligations and enforce our terms of service</li>\n              </ul>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"section-data-storage-security\">\n            <CardHeader>\n              <CardTitle className=\"text-2xl\">3. Data Storage and Security</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Storage Infrastructure</h3>\n                <p className=\"text-muted-foreground\">\n                  Your data is stored securely using Neon Database, a serverless PostgreSQL platform \n                  with enterprise-grade security and reliability. All data is encrypted at rest and \n                  in transit using industry-standard encryption protocols.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Security Measures</h3>\n                <p className=\"text-muted-foreground\">\n                  We implement multiple layers of security including encrypted connections, secure \n                  authentication, role-based access controls, and regular security audits. Our platform \n                  is designed with security best practices to protect your creative work.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Data Backup</h3>\n                <p className=\"text-muted-foreground\">\n                  We maintain regular backups of your data to prevent loss. Our version control system \n                  also preserves document history, allowing you to recover previous versions of your work.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Access Controls</h3>\n                <p className=\"text-muted-foreground\">\n                  Access to user data is strictly limited to authorized personnel who need it to provide \n                  support or maintain our services. All access is logged and monitored.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"section-third-party-services\">\n            <CardHeader>\n              <CardTitle className=\"text-2xl\">4. Third-Party Services</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <p className=\"text-muted-foreground\">\n                88Away integrates with the following third-party services to provide our features:\n              </p>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">OpenAI</h3>\n                <p className=\"text-muted-foreground\">\n                  We use OpenAI's API to power our AI writing assistant features. When you use AI features, \n                  your content may be processed by OpenAI's services according to their data usage policies. \n                  OpenAI does not use data submitted via their API to train their models.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Stripe</h3>\n                <p className=\"text-muted-foreground\">\n                  Stripe processes all payment transactions for paid subscriptions. Your payment information \n                  is handled directly by Stripe and is subject to their privacy policy. We receive only \n                  limited payment information necessary for subscription management.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Neon Database</h3>\n                <p className=\"text-muted-foreground\">\n                  We use Neon Database as our primary data storage provider. Neon provides enterprise-grade \n                  security, encryption, and compliance certifications to protect your data.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Third-Party Links</h3>\n                <p className=\"text-muted-foreground\">\n                  Our service may contain links to third-party websites or services. We are not responsible \n                  for the privacy practices of these external sites.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"section-cookies-tracking\">\n            <CardHeader>\n              <CardTitle className=\"text-2xl\">5. Cookies and Tracking</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Essential Cookies</h3>\n                <p className=\"text-muted-foreground\">\n                  We use essential cookies to maintain your session, remember your preferences, and \n                  provide core functionality. These cookies are necessary for the platform to work properly.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Analytics</h3>\n                <p className=\"text-muted-foreground\">\n                  We collect anonymized usage data to understand how our platform is used and to improve \n                  our services. This includes page views, feature usage, and performance metrics.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Your Choices</h3>\n                <p className=\"text-muted-foreground\">\n                  Most browsers allow you to control cookies through their settings. However, disabling \n                  essential cookies may limit your ability to use certain features of our platform.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"section-user-rights\">\n            <CardHeader>\n              <CardTitle className=\"text-2xl\">6. Your Rights and Choices</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <p className=\"text-muted-foreground\">\n                You have the following rights regarding your personal data:\n              </p>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Access and Portability</h3>\n                <p className=\"text-muted-foreground\">\n                  You can access, download, and export your data at any time through our platform. \n                  We provide multiple export formats including JSON, PDF, and ePub depending on your \n                  subscription plan.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Correction and Update</h3>\n                <p className=\"text-muted-foreground\">\n                  You can modify your account information and content at any time through your account \n                  settings and project management tools.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Deletion</h3>\n                <p className=\"text-muted-foreground\">\n                  You have the right to request deletion of your account and associated data. Contact \n                  us at privacy@88away.com to initiate an account deletion request. Please note that \n                  we may retain certain information as required by law or for legitimate business purposes.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Data Processing Objection</h3>\n                <p className=\"text-muted-foreground\">\n                  You can opt out of certain data processing activities, such as marketing communications \n                  or optional analytics. However, some processing is necessary to provide our core services.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">GDPR Rights</h3>\n                <p className=\"text-muted-foreground\">\n                  If you are in the European Economic Area (EEA), you have additional rights under the \n                  General Data Protection Regulation (GDPR), including the right to lodge a complaint \n                  with a supervisory authority.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"section-childrens-privacy\">\n            <CardHeader>\n              <CardTitle className=\"text-2xl\">7. Children's Privacy</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <p className=\"text-muted-foreground\">\n                88Away is not intended for children under the age of 13. We do not knowingly collect \n                personal information from children under 13. If you are a parent or guardian and believe \n                your child has provided us with personal information, please contact us at \n                privacy@88away.com, and we will delete such information from our systems.\n              </p>\n              <p className=\"text-muted-foreground\">\n                For users between 13 and 18 years of age, we recommend parental guidance when using \n                our platform, particularly when using AI-powered features.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"section-policy-changes\">\n            <CardHeader>\n              <CardTitle className=\"text-2xl\">8. Changes to This Privacy Policy</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <p className=\"text-muted-foreground\">\n                We may update this Privacy Policy from time to time to reflect changes in our practices, \n                technology, legal requirements, or other factors. When we make significant changes, we \n                will notify you by:\n              </p>\n              <ul className=\"list-disc list-inside space-y-2 text-muted-foreground\">\n                <li>Posting the updated policy on this page with a new \"Last updated\" date</li>\n                <li>Sending an email notification to your registered email address</li>\n                <li>Displaying a prominent notice on our platform</li>\n              </ul>\n              <p className=\"text-muted-foreground\">\n                Your continued use of 88Away after any changes to this Privacy Policy constitutes your \n                acceptance of the updated terms. We encourage you to review this policy periodically.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"section-contact\">\n            <CardHeader>\n              <CardTitle className=\"text-2xl\">9. Contact Information</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <p className=\"text-muted-foreground\">\n                If you have any questions, concerns, or requests regarding this Privacy Policy or our \n                data practices, please contact us:\n              </p>\n              <div className=\"bg-muted/50 p-4 rounded-lg space-y-2\">\n                <p className=\"font-semibold\">88Away Privacy Team</p>\n                <p className=\"text-muted-foreground\">Email: privacy@88away.com</p>\n                <p className=\"text-muted-foreground\">Support: support@88away.com</p>\n              </div>\n              <p className=\"text-muted-foreground\">\n                We will respond to all legitimate requests within 30 days. For urgent privacy concerns, \n                please mark your email as \"Urgent Privacy Matter\" in the subject line.\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"mt-12 p-6 bg-muted/30 rounded-lg\">\n          <p className=\"text-sm text-muted-foreground text-center\">\n            This Privacy Policy is effective as of October 2, 2025. By using 88Away, you acknowledge \n            that you have read and understood this Privacy Policy and agree to its terms.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":16757},"client/src/pages/terms.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport { ArrowLeft } from \"lucide-react\";\n\nexport default function TermsPage() {\n  return (\n    <div data-testid=\"page-terms\" className=\"min-h-screen bg-background\">\n      <div className=\"container max-w-4xl mx-auto py-12 px-4\">\n        <Link href=\"/\">\n          <Button variant=\"ghost\" className=\"mb-6\" data-testid=\"button-back\">\n            <ArrowLeft className=\"mr-2 h-4 w-4\" />\n            Back to Home\n          </Button>\n        </Link>\n\n        <h1 data-testid=\"heading-terms-conditions\" className=\"text-4xl font-bold mb-4\">\n          Terms and Conditions\n        </h1>\n        <p className=\"text-muted-foreground mb-8\">\n          Last updated: October 2, 2025\n        </p>\n\n        <div className=\"space-y-6\">\n          <Card data-testid=\"section-acceptance\">\n            <CardHeader>\n              <CardTitle className=\"text-2xl\">1. Acceptance of Terms</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <p className=\"text-muted-foreground\">\n                Welcome to 88Away. By accessing or using our collaborative writing platform and services \n                (collectively, the \"Service\"), you agree to be bound by these Terms and Conditions (\"Terms\"). \n                If you do not agree to these Terms, you may not access or use the Service.\n              </p>\n              <p className=\"text-muted-foreground\">\n                These Terms constitute a legally binding agreement between you and 88Away. Your use of the \n                Service is also governed by our Privacy Policy, which is incorporated into these Terms by \n                reference. By creating an account or using the Service, you acknowledge that you have read, \n                understood, and agree to be bound by these Terms and our Privacy Policy.\n              </p>\n              <p className=\"text-muted-foreground\">\n                You must be at least 13 years old to use the Service. If you are between 13 and 18 years of \n                age, you represent that you have your parent's or legal guardian's permission to use the Service \n                and that they have reviewed and agreed to these Terms on your behalf.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"section-service-description\">\n            <CardHeader>\n              <CardTitle className=\"text-2xl\">2. Description of Service</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <p className=\"text-muted-foreground\">\n                88Away is a collaborative writing platform designed to help writers create, organize, and \n                develop their creative projects. Our Service provides the following key features:\n              </p>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Collaborative Writing Tools</h3>\n                <p className=\"text-muted-foreground\">\n                  Real-time document editing and collaboration features that allow multiple users to work \n                  together on writing projects. Our platform includes version control, branching, merging, \n                  and conflict resolution tools to manage collaborative workflows effectively.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">AI Writing Assistance</h3>\n                <p className=\"text-muted-foreground\">\n                  AI-powered writing assistant features with three distinct personas: Muse (creative \n                  brainstorming), Editor (technical editing), and Coach (structural guidance). These AI \n                  features are powered by OpenAI's language models and are designed to enhance your creative \n                  process.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Project Management</h3>\n                <p className=\"text-muted-foreground\">\n                  Comprehensive tools for organizing your writing projects, including character management, \n                  worldbuilding databases, timeline visualization, analytics dashboards, and commenting systems.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Export and Publishing</h3>\n                <p className=\"text-muted-foreground\">\n                  The ability to export your work in multiple formats including PDF, ePub, DOCX, and JSON, \n                  with export capabilities varying based on your subscription tier.\n                </p>\n              </div>\n              <p className=\"text-muted-foreground\">\n                We reserve the right to modify, suspend, or discontinue any part of the Service at any time, \n                with or without notice. We will make reasonable efforts to notify users of significant changes \n                to core features.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"section-accounts\">\n            <CardHeader>\n              <CardTitle className=\"text-2xl\">3. User Accounts and Registration</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Account Creation</h3>\n                <p className=\"text-muted-foreground\">\n                  To access certain features of the Service, you must create an account. You agree to provide \n                  accurate, current, and complete information during registration and to update your information \n                  to keep it accurate and current.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Account Security</h3>\n                <p className=\"text-muted-foreground\">\n                  You are responsible for maintaining the confidentiality of your account credentials and for \n                  all activities that occur under your account. You agree to immediately notify us of any \n                  unauthorized access or use of your account. We cannot and will not be liable for any loss \n                  or damage arising from your failure to maintain account security.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Account Responsibility</h3>\n                <p className=\"text-muted-foreground\">\n                  You are solely responsible for your account activity and all content created, shared, or \n                  stored through your account. You may not share your account credentials with others or allow \n                  others to access your account except through authorized collaboration features.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Multiple Accounts</h3>\n                <p className=\"text-muted-foreground\">\n                  You may not create multiple accounts for the purpose of circumventing subscription limits, \n                  evading suspension or termination, or otherwise violating these Terms.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"section-payment\">\n            <CardHeader>\n              <CardTitle className=\"text-2xl\">4. Subscription and Payment Terms</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Subscription Plans</h3>\n                <p className=\"text-muted-foreground\">\n                  88Away offers multiple subscription tiers with varying features, storage limits, AI usage \n                  quotas, and export capabilities. Subscription details, pricing, and features are available \n                  on our pricing page and may be modified from time to time with notice to existing subscribers.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Payment Processing</h3>\n                <p className=\"text-muted-foreground\">\n                  All payments are processed securely through Stripe, our third-party payment processor. \n                  By subscribing to a paid plan, you authorize us to charge your payment method on a recurring \n                  basis according to your selected billing cycle (monthly or annual).\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Billing and Renewals</h3>\n                <p className=\"text-muted-foreground\">\n                  Subscriptions automatically renew at the end of each billing period unless you cancel before \n                  the renewal date. You will be charged the then-current subscription rate, which we reserve \n                  the right to modify with at least 30 days' notice to existing subscribers.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Cancellation and Refunds</h3>\n                <p className=\"text-muted-foreground\">\n                  You may cancel your subscription at any time through your account settings. Upon cancellation, \n                  you will retain access to paid features until the end of your current billing period. We do \n                  not offer refunds for partial billing periods except as required by law or at our sole discretion.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Payment Failures</h3>\n                <p className=\"text-muted-foreground\">\n                  If a payment fails, we will attempt to notify you and retry the charge. Continued payment \n                  failure may result in suspension or downgrade of your account. We are not responsible for \n                  any loss of data or access resulting from payment failures.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Taxes</h3>\n                <p className=\"text-muted-foreground\">\n                  All fees are exclusive of applicable taxes unless otherwise stated. You are responsible for \n                  any taxes, duties, or other governmental charges associated with your subscription.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"section-intellectual-property\">\n            <CardHeader>\n              <CardTitle className=\"text-2xl\">5. Intellectual Property Rights</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Your Content Ownership</h3>\n                <p className=\"text-muted-foreground\">\n                  You retain all intellectual property rights to the content you create, upload, or store on \n                  88Away (\"Your Content\"). These Terms do not transfer any ownership of Your Content to us. \n                  Your creative work belongs to you, and we respect your rights as a creator.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">License to Us</h3>\n                <p className=\"text-muted-foreground\">\n                  By using the Service, you grant us a limited, non-exclusive, royalty-free, worldwide license \n                  to host, store, process, display, and transmit Your Content solely for the purpose of \n                  providing and improving the Service. This includes processing Your Content through AI features \n                  when you choose to use them.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Collaborative Content</h3>\n                <p className=\"text-muted-foreground\">\n                  When you collaborate with other users on shared projects, you acknowledge that all \n                  collaborators may have shared rights to the collaborative work. You are responsible for \n                  ensuring you have appropriate agreements with your collaborators regarding ownership and \n                  use of collaborative content.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Platform Intellectual Property</h3>\n                <p className=\"text-muted-foreground\">\n                  The Service itself, including all software, designs, trademarks, logos, and other materials \n                  (excluding Your Content), is owned by 88Away and is protected by copyright, trademark, and \n                  other intellectual property laws. You may not copy, modify, distribute, or create derivative \n                  works of our platform or its components.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Content Representations</h3>\n                <p className=\"text-muted-foreground\">\n                  By submitting content to the Service, you represent and warrant that you own or have the \n                  necessary rights to use and authorize us to use Your Content as described in these Terms, \n                  and that Your Content does not infringe on the intellectual property rights of any third party.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"section-ai-content\">\n            <CardHeader>\n              <CardTitle className=\"text-2xl\">6. AI-Generated Content</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Nature of AI Assistance</h3>\n                <p className=\"text-muted-foreground\">\n                  Our AI writing assistant features use large language models provided by OpenAI to generate \n                  suggestions, edits, and content based on your prompts. AI-generated content is created through \n                  statistical patterns and should be considered as assistance and inspiration rather than \n                  definitive or authoritative output.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">No Guarantees</h3>\n                <p className=\"text-muted-foreground\">\n                  We make no representations or warranties about the accuracy, completeness, quality, or \n                  appropriateness of AI-generated content. AI outputs may contain errors, inconsistencies, \n                  inappropriate content, or biases. You are solely responsible for reviewing, editing, and \n                  verifying any AI-generated content before using it.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">AI Content Ownership</h3>\n                <p className=\"text-muted-foreground\">\n                  You own the rights to content generated by AI features when used within the Service, subject \n                  to the terms of service of our AI provider (OpenAI). However, AI may generate similar or \n                  identical outputs for different users given similar prompts. We cannot guarantee exclusive \n                  rights to AI-generated content.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">User Responsibility</h3>\n                <p className=\"text-muted-foreground\">\n                  You are responsible for ensuring that any AI-generated content you use or publish complies \n                  with applicable laws and does not infringe on third-party rights. You should independently \n                  verify facts, claims, and other information in AI-generated content.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">AI Data Processing</h3>\n                <p className=\"text-muted-foreground\">\n                  When you use AI features, your prompts and selected content are sent to OpenAI's API for \n                  processing. OpenAI does not use data submitted via their API to train their models. For more \n                  information, please review our Privacy Policy and OpenAI's data usage policies.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"section-user-conduct\">\n            <CardHeader>\n              <CardTitle className=\"text-2xl\">7. User Responsibilities and Prohibited Conduct</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <p className=\"text-muted-foreground\">\n                You agree to use the Service responsibly and in accordance with these Terms. You agree NOT to:\n              </p>\n              <ul className=\"list-disc list-inside space-y-2 text-muted-foreground\">\n                <li>Violate any applicable laws, regulations, or third-party rights</li>\n                <li>Upload, create, or share content that is illegal, harmful, threatening, abusive, harassing, \n                    defamatory, vulgar, obscene, or otherwise objectionable</li>\n                <li>Infringe on the intellectual property rights, privacy rights, or other rights of others</li>\n                <li>Impersonate any person or entity, or falsely represent your affiliation with any person or entity</li>\n                <li>Use the Service to transmit viruses, malware, or other malicious code</li>\n                <li>Attempt to gain unauthorized access to any portion of the Service, other users' accounts, \n                    or any systems or networks connected to the Service</li>\n                <li>Interfere with or disrupt the Service or servers or networks connected to the Service</li>\n                <li>Use automated systems (bots, scrapers) to access the Service without our express written permission</li>\n                <li>Reverse engineer, decompile, or disassemble any part of the Service</li>\n                <li>Use the Service for any commercial purpose without our express written permission</li>\n                <li>Share your account credentials or allow unauthorized access to your account</li>\n                <li>Abuse or exploit bugs, glitches, or vulnerabilities in the Service</li>\n                <li>Use the Service to send spam, chain letters, or other unsolicited communications</li>\n                <li>Exceed rate limits or usage quotas specified for your subscription tier</li>\n              </ul>\n              <p className=\"text-muted-foreground\">\n                We reserve the right to investigate and take appropriate action against anyone who violates \n                these Terms, including removing content, suspending or terminating accounts, and reporting \n                to law enforcement authorities when appropriate.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"section-privacy\">\n            <CardHeader>\n              <CardTitle className=\"text-2xl\">8. Data and Privacy</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <p className=\"text-muted-foreground\">\n                Your privacy is important to us. Our collection, use, and protection of your personal \n                information is governed by our Privacy Policy, which is incorporated into these Terms by \n                reference.\n              </p>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Data Collection and Use</h3>\n                <p className=\"text-muted-foreground\">\n                  We collect and process information as described in our Privacy Policy, including account \n                  information, content data, usage data, and payment information. By using the Service, you \n                  consent to such collection and processing in accordance with our Privacy Policy.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Data Security</h3>\n                <p className=\"text-muted-foreground\">\n                  We implement appropriate technical and organizational measures to protect your data. However, \n                  no system is completely secure. You acknowledge that you provide your information at your \n                  own risk.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Third-Party Services</h3>\n                <p className=\"text-muted-foreground\">\n                  The Service integrates with third-party services including OpenAI (for AI features), Stripe \n                  (for payment processing), and Neon Database (for data storage). Your use of these integrated \n                  features is subject to the respective privacy policies of these third parties.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Review Our Privacy Policy</h3>\n                <p className=\"text-muted-foreground\">\n                  For complete information about how we collect, use, and protect your data, please review our{\" \"}\n                  <Link href=\"/privacy\">\n                    <a className=\"text-primary hover:underline\">Privacy Policy</a>\n                  </Link>.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"section-termination\">\n            <CardHeader>\n              <CardTitle className=\"text-2xl\">9. Termination and Suspension</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Termination by You</h3>\n                <p className=\"text-muted-foreground\">\n                  You may terminate your account at any time by contacting our support team at \n                  support@88away.com or through your account settings. Upon termination, you will lose access \n                  to the Service and Your Content stored on our platform. We recommend exporting your content \n                  before terminating your account.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Termination by Us</h3>\n                <p className=\"text-muted-foreground\">\n                  We reserve the right to suspend or terminate your account and access to the Service at any \n                  time, with or without cause, and with or without notice. Reasons for termination may include, \n                  but are not limited to: violation of these Terms, fraudulent activity, abuse of the Service, \n                  non-payment of fees, or at our sole discretion.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Effect of Termination</h3>\n                <p className=\"text-muted-foreground\">\n                  Upon termination, your right to use the Service immediately ceases. We may delete your \n                  account and all associated data after a reasonable period. You remain liable for all charges \n                  incurred prior to termination. Sections of these Terms that by their nature should survive \n                  termination shall survive, including ownership provisions, warranty disclaimers, and \n                  limitations of liability.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Data Retention</h3>\n                <p className=\"text-muted-foreground\">\n                  After account termination, we may retain certain information as required by law, for \n                  legitimate business purposes, or as described in our Privacy Policy. We are under no \n                  obligation to store or provide access to Your Content after termination.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"section-liability\">\n            <CardHeader>\n              <CardTitle className=\"text-2xl\">10. Limitation of Liability</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Disclaimer of Warranties</h3>\n                <p className=\"text-muted-foreground\">\n                  THE SERVICE IS PROVIDED \"AS IS\" AND \"AS AVAILABLE\" WITHOUT WARRANTIES OF ANY KIND, EITHER \n                  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO IMPLIED WARRANTIES OF MERCHANTABILITY, \n                  FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, OR COURSE OF PERFORMANCE. WE DO NOT \n                  WARRANT THAT THE SERVICE WILL BE UNINTERRUPTED, SECURE, OR ERROR-FREE.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Limitation of Liability</h3>\n                <p className=\"text-muted-foreground\">\n                  TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL 88AWAY, ITS OFFICERS, DIRECTORS, \n                  EMPLOYEES, OR AGENTS BE LIABLE FOR ANY INDIRECT, INCIDENTAL, SPECIAL, CONSEQUENTIAL, OR \n                  PUNITIVE DAMAGES, INCLUDING BUT NOT LIMITED TO LOSS OF PROFITS, DATA, USE, GOODWILL, OR \n                  OTHER INTANGIBLE LOSSES, ARISING OUT OF OR RELATED TO YOUR USE OR INABILITY TO USE THE SERVICE.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Maximum Liability</h3>\n                <p className=\"text-muted-foreground\">\n                  TO THE MAXIMUM EXTENT PERMITTED BY LAW, OUR TOTAL LIABILITY TO YOU FOR ALL CLAIMS ARISING \n                  OUT OF OR RELATED TO THESE TERMS OR THE SERVICE SHALL NOT EXCEED THE AMOUNT YOU PAID TO US \n                  IN THE TWELVE (12) MONTHS PRECEDING THE EVENT GIVING RISE TO LIABILITY, OR $100, WHICHEVER \n                  IS GREATER.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Data Loss</h3>\n                <p className=\"text-muted-foreground\">\n                  We are not liable for any loss or corruption of Your Content or other data. You are solely \n                  responsible for maintaining backups of Your Content. We strongly recommend regularly exporting \n                  and backing up your work.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Third-Party Actions</h3>\n                <p className=\"text-muted-foreground\">\n                  We are not responsible for the actions, content, or data of third parties, including other \n                  users, and you release us from any claims arising from such third-party actions.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Jurisdictional Limitations</h3>\n                <p className=\"text-muted-foreground\">\n                  Some jurisdictions do not allow the exclusion or limitation of certain warranties or \n                  liabilities. In such jurisdictions, the above limitations and exclusions may not apply to \n                  you, and our liability will be limited to the maximum extent permitted by law.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"section-dispute-resolution\">\n            <CardHeader>\n              <CardTitle className=\"text-2xl\">11. Dispute Resolution</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Informal Resolution</h3>\n                <p className=\"text-muted-foreground\">\n                  If you have a dispute with us, you agree to first contact us at legal@88away.com and attempt \n                  to resolve the dispute informally. We will work in good faith to resolve any disputes through \n                  direct communication.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Governing Law</h3>\n                <p className=\"text-muted-foreground\">\n                  These Terms shall be governed by and construed in accordance with the laws of the jurisdiction \n                  in which 88Away is incorporated, without regard to its conflict of law provisions.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Arbitration</h3>\n                <p className=\"text-muted-foreground\">\n                  Any dispute, controversy, or claim arising out of or relating to these Terms or the Service \n                  that cannot be resolved informally shall be settled by binding arbitration in accordance with \n                  applicable arbitration rules. The arbitration shall be conducted in English, and the arbitrator's \n                  decision shall be final and binding.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Class Action Waiver</h3>\n                <p className=\"text-muted-foreground\">\n                  You agree that any arbitration or proceeding shall be limited to the dispute between you and \n                  us individually. To the fullest extent permitted by law, you agree that no arbitration or \n                  proceeding shall be joined with any other, no dispute shall be arbitrated on a class-action \n                  basis, and you waive any right to participate in a class action against us.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Exceptions</h3>\n                <p className=\"text-muted-foreground\">\n                  Either party may seek equitable relief (such as injunctive relief) in a court of competent \n                  jurisdiction to prevent infringement of intellectual property rights or other irreparable harm.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"section-changes\">\n            <CardHeader>\n              <CardTitle className=\"text-2xl\">12. Changes to Terms</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <p className=\"text-muted-foreground\">\n                We reserve the right to modify these Terms at any time. When we make changes to these Terms, \n                we will update the \"Last updated\" date at the top of this page and notify you through one or \n                more of the following methods:\n              </p>\n              <ul className=\"list-disc list-inside space-y-2 text-muted-foreground\">\n                <li>Email notification to your registered email address</li>\n                <li>A prominent notice on our platform or Service</li>\n                <li>An in-app notification when you next use the Service</li>\n              </ul>\n              <p className=\"text-muted-foreground\">\n                Your continued use of the Service after any changes to these Terms constitutes your acceptance \n                of the modified Terms. If you do not agree to the modified Terms, you must stop using the \n                Service and may terminate your account.\n              </p>\n              <p className=\"text-muted-foreground\">\n                Material changes that negatively affect your rights will be communicated at least 30 days \n                before they take effect, except when changes are required to comply with legal requirements, \n                in which case they may take effect immediately.\n              </p>\n              <p className=\"text-muted-foreground\">\n                We encourage you to review these Terms periodically to stay informed of any updates. You can \n                always find the most current version of these Terms on this page.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"section-contact\">\n            <CardHeader>\n              <CardTitle className=\"text-2xl\">13. Contact Information</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <p className=\"text-muted-foreground\">\n                If you have any questions, concerns, or feedback regarding these Terms and Conditions or the \n                Service, please contact us through the following channels:\n              </p>\n              <div className=\"bg-muted/50 p-4 rounded-lg space-y-2\">\n                <p className=\"font-semibold\">88Away Legal Team</p>\n                <p className=\"text-muted-foreground\">General Support: support@88away.com</p>\n                <p className=\"text-muted-foreground\">Legal Inquiries: legal@88away.com</p>\n                <p className=\"text-muted-foreground\">Privacy Matters: privacy@88away.com</p>\n                <p className=\"text-muted-foreground\">Billing Questions: billing@88away.com</p>\n              </div>\n              <p className=\"text-muted-foreground\">\n                We will make reasonable efforts to respond to all legitimate inquiries within 5 business days. \n                For urgent legal matters, please mark your email as \"Urgent Legal Matter\" in the subject line.\n              </p>\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Additional Information</h3>\n                <p className=\"text-muted-foreground\">\n                  For information about our data practices, please see our{\" \"}\n                  <Link href=\"/privacy\">\n                    <a className=\"text-primary hover:underline\">Privacy Policy</a>\n                  </Link>.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"mt-12 p-6 bg-muted/30 rounded-lg\">\n          <p className=\"text-sm text-muted-foreground text-center\">\n            These Terms and Conditions are effective as of October 2, 2025. By using 88Away, you acknowledge \n            that you have read, understood, and agree to be bound by these Terms and Conditions.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":34971},"client/src/components/notification-bell.tsx":{"content":"import { useState } from \"react\";\nimport { Bell } from \"lucide-react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n  DropdownMenuSeparator,\n} from \"@/components/ui/dropdown-menu\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { formatDistanceToNow } from \"date-fns\";\n\ninterface Notification {\n  id: string;\n  type: string;\n  title: string;\n  message: string;\n  isRead: boolean;\n  createdAt: string;\n  entityType?: string;\n  entityId?: string;\n}\n\nexport function NotificationBell({ collapsed = false }: { collapsed?: boolean }) {\n  const [open, setOpen] = useState(false);\n\n  const { data: notifications = [] } = useQuery<Notification[]>({\n    queryKey: [\"/api/notifications\"],\n    refetchInterval: 30000,\n  });\n\n  const { data: unreadData } = useQuery<{ count: number }>({\n    queryKey: [\"/api/notifications/unread-count\"],\n    refetchInterval: 30000,\n  });\n\n  const unreadCount = unreadData?.count || 0;\n\n  const markAsReadMutation = useMutation({\n    mutationFn: async (notificationId: string) => {\n      return apiRequest(\"PATCH\", `/api/notifications/${notificationId}/read`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications/unread-count\"] });\n    },\n  });\n\n  const markAllAsReadMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest(\"POST\", \"/api/notifications/read-all\");\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications/unread-count\"] });\n    },\n  });\n\n  const handleNotificationClick = (notification: Notification) => {\n    if (!notification.isRead) {\n      markAsReadMutation.mutate(notification.id);\n    }\n  };\n\n  return (\n    <DropdownMenu open={open} onOpenChange={setOpen}>\n      <DropdownMenuTrigger asChild>\n        <Button\n          variant=\"ghost\"\n          size={collapsed ? \"icon\" : \"default\"}\n          className=\"relative\"\n          data-testid=\"button-notifications\"\n        >\n          <Bell className=\"h-5 w-5\" />\n          {unreadCount > 0 && (\n            <Badge\n              variant=\"destructive\"\n              className=\"absolute -top-1 -right-1 h-5 w-5 flex items-center justify-center p-0 text-xs\"\n              data-testid=\"badge-notification-count\"\n            >\n              {unreadCount > 99 ? \"99+\" : unreadCount}\n            </Badge>\n          )}\n          {!collapsed && <span className=\"ml-2\">Notifications</span>}\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" className=\"w-80\" data-testid=\"dropdown-notifications\">\n        <div className=\"flex items-center justify-between px-4 py-2\">\n          <h3 className=\"font-semibold\">Notifications</h3>\n          {unreadCount > 0 && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => markAllAsReadMutation.mutate()}\n              data-testid=\"button-mark-all-read\"\n            >\n              Mark all read\n            </Button>\n          )}\n        </div>\n        <DropdownMenuSeparator />\n        <ScrollArea className=\"h-[400px]\">\n          {notifications.length === 0 ? (\n            <div className=\"p-4 text-center text-muted-foreground\" data-testid=\"text-no-notifications\">\n              No notifications\n            </div>\n          ) : (\n            notifications.map((notification) => (\n              <DropdownMenuItem\n                key={notification.id}\n                className=\"p-4 cursor-pointer\"\n                onClick={() => handleNotificationClick(notification)}\n                data-testid={`notification-item-${notification.id}`}\n              >\n                <div className=\"flex flex-col gap-1 w-full\">\n                  <div className=\"flex items-start justify-between gap-2\">\n                    <p className={`text-sm font-medium ${notification.isRead ? 'text-muted-foreground' : ''}`}>\n                      {notification.title}\n                    </p>\n                    {!notification.isRead && (\n                      <div className=\"h-2 w-2 bg-primary rounded-full flex-shrink-0 mt-1\" />\n                    )}\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">{notification.message}</p>\n                  <p className=\"text-xs text-muted-foreground\">\n                    {formatDistanceToNow(new Date(notification.createdAt), { addSuffix: true })}\n                  </p>\n                </div>\n              </DropdownMenuItem>\n            ))\n          )}\n        </ScrollArea>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n","size_bytes":4945},"server/activities.ts":{"content":"import { DatabaseStorage } from \"./storage\";\nimport { InsertActivity } from \"@shared/schema\";\n\nexport async function logActivity(\n  storage: DatabaseStorage,\n  projectId: string,\n  userId: string,\n  activity: Omit<InsertActivity, \"projectId\" | \"userId\">\n) {\n  try {\n    await storage.createActivity({\n      ...activity,\n      projectId,\n      userId,\n    });\n  } catch (error) {\n    console.error(\"Failed to log activity:\", error);\n  }\n}\n\nexport function getUserDisplayName(user: { firstName?: string | null; lastName?: string | null; email?: string | null } | undefined): string {\n  if (!user) {\n    return 'A user';\n  }\n  if (user.firstName || user.lastName) {\n    return `${user.firstName || ''} ${user.lastName || ''}`.trim();\n  }\n  return user.email || 'A user';\n}\n","size_bytes":770},"server/notifications.ts":{"content":"import { DatabaseStorage } from \"./storage\";\nimport { InsertNotification } from \"@shared/schema\";\n\nexport async function notifyProjectCollaborators(\n  storage: DatabaseStorage,\n  projectId: string,\n  actorId: string,\n  notification: Omit<InsertNotification, \"userId\" | \"projectId\">\n) {\n  // Get project with collaborators\n  const project = await storage.getProject(projectId);\n  \n  if (!project) {\n    return;\n  }\n  \n  // Get all collaborator user IDs\n  const collaboratorIds = project.collaborators.map(c => c.userId);\n  \n  // Build list of recipients: owner + collaborators, excluding the actor\n  const recipientIds = new Set<string>();\n  \n  // Add project owner if not the actor\n  if (project.ownerId !== actorId) {\n    recipientIds.add(project.ownerId);\n  }\n  \n  // Add collaborators if not the actor\n  collaboratorIds.forEach(id => {\n    if (id !== actorId) {\n      recipientIds.add(id);\n    }\n  });\n  \n  // Create notification for each recipient\n  const promises = Array.from(recipientIds).map(userId =>\n    storage.createNotification({\n      ...notification,\n      userId,\n      projectId,\n    })\n  );\n  \n  await Promise.all(promises);\n}\n","size_bytes":1145},"client/src/components/activity-feed.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport {\n  FileText,\n  Users,\n  Globe,\n  Clock,\n  UserPlus,\n  UserMinus,\n  Pencil,\n  Trash2,\n  Plus\n} from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\n\ninterface Activity {\n  id: string;\n  type: string;\n  description: string;\n  entityType?: string | null;\n  entityId?: string | null;\n  entityName?: string | null;\n  createdAt: string;\n  userId: string;\n  metadata?: any;\n}\n\ninterface ActivityFeedProps {\n  projectId?: string; // If provided, shows project-specific activities\n  limit?: number;\n  className?: string;\n}\n\nexport function ActivityFeed({ projectId, limit = 20, className = \"\" }: ActivityFeedProps) {\n  // Fetch activities - either for specific project or all user activities\n  const endpoint = projectId \n    ? `/api/projects/${projectId}/activities?limit=${limit}`\n    : `/api/activities?limit=${limit}`;\n    \n  const { data: activities = [], isLoading } = useQuery<Activity[]>({\n    queryKey: [endpoint],\n    refetchInterval: 60000, // Refetch every minute\n  });\n\n  // Get icon based on activity type\n  const getActivityIcon = (type: string) => {\n    if (type.includes(\"document\")) return <FileText className=\"h-4 w-4\" />;\n    if (type.includes(\"character\")) return <Users className=\"h-4 w-4\" />;\n    if (type.includes(\"worldbuilding\")) return <Globe className=\"h-4 w-4\" />;\n    if (type.includes(\"timeline\")) return <Clock className=\"h-4 w-4\" />;\n    if (type.includes(\"collaborator_added\")) return <UserPlus className=\"h-4 w-4\" />;\n    if (type.includes(\"collaborator_removed\")) return <UserMinus className=\"h-4 w-4\" />;\n    return <Pencil className=\"h-4 w-4\" />;\n  };\n\n  // Get color based on activity type\n  const getActivityColor = (type: string) => {\n    if (type.includes(\"created\")) return \"text-green-600 dark:text-green-400\";\n    if (type.includes(\"updated\")) return \"text-blue-600 dark:text-blue-400\";\n    if (type.includes(\"deleted\")) return \"text-red-600 dark:text-red-400\";\n    if (type.includes(\"collaborator\")) return \"text-purple-600 dark:text-purple-400\";\n    return \"text-gray-600 dark:text-gray-400\";\n  };\n\n  if (isLoading) {\n    return (\n      <Card className={className} data-testid=\"card-activity-feed\">\n        <CardHeader>\n          <CardTitle>Recent Activity</CardTitle>\n          <CardDescription>Loading activities...</CardDescription>\n        </CardHeader>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className={className} data-testid=\"card-activity-feed\">\n      <CardHeader>\n        <CardTitle>Recent Activity</CardTitle>\n        <CardDescription>\n          {projectId ? \"Project activity timeline\" : \"Your recent activity across all projects\"}\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <ScrollArea className=\"h-[500px] pr-4\">\n          {activities.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\" data-testid=\"text-no-activities\">\n              No recent activity\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {activities.map((activity) => (\n                <div\n                  key={activity.id}\n                  className=\"flex gap-4 pb-4 border-b last:border-0\"\n                  data-testid={`activity-item-${activity.id}`}\n                >\n                  <div className={`mt-1 ${getActivityColor(activity.type)}`}>\n                    {getActivityIcon(activity.type)}\n                  </div>\n                  <div className=\"flex-1 space-y-1\">\n                    <p className=\"text-sm font-medium leading-none\">\n                      {activity.description}\n                    </p>\n                    {activity.entityName && (\n                      <p className=\"text-sm text-muted-foreground\">\n                        {activity.entityName}\n                      </p>\n                    )}\n                    <p className=\"text-xs text-muted-foreground\">\n                      {formatDistanceToNow(new Date(activity.createdAt), { addSuffix: true })}\n                    </p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </ScrollArea>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4417},"client/src/components/search-bar.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\";\nimport { \n  Search, \n  FileText, \n  Users, \n  Globe, \n  Clock,\n  ArrowRight\n} from \"lucide-react\";\nimport { SearchResult } from \"@shared/schema\";\n\nexport function SearchBar() {\n  const [open, setOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [debouncedQuery, setDebouncedQuery] = useState(\"\");\n  const [, navigate] = useLocation();\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  // Debounce search query\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedQuery(searchQuery);\n    }, 300);\n\n    return () => clearTimeout(timer);\n  }, [searchQuery]);\n\n  // Fetch search results\n  const { data: results = [], isLoading } = useQuery<SearchResult[]>({\n    queryKey: [`/api/search?q=${debouncedQuery}&limit=5`],\n    enabled: debouncedQuery.length >= 2,\n  });\n\n  // Get icon based on result type\n  const getIcon = (type: string) => {\n    switch (type) {\n      case \"document\":\n        return <FileText className=\"h-4 w-4\" />;\n      case \"character\":\n        return <Users className=\"h-4 w-4\" />;\n      case \"worldbuilding\":\n        return <Globe className=\"h-4 w-4\" />;\n      case \"timeline\":\n        return <Clock className=\"h-4 w-4\" />;\n      default:\n        return <FileText className=\"h-4 w-4\" />;\n    }\n  };\n\n  // Navigate to result\n  const handleSelect = (result: SearchResult) => {\n    setOpen(false);\n    setSearchQuery(\"\");\n    \n    // Navigate based on result type\n    switch (result.type) {\n      case \"document\":\n        navigate(`/projects/${result.projectId}/documents/${result.id}`);\n        break;\n      case \"character\":\n        navigate(`/projects/${result.projectId}?tab=characters`);\n        break;\n      case \"worldbuilding\":\n        navigate(`/projects/${result.projectId}?tab=worldbuilding`);\n        break;\n      case \"timeline\":\n        navigate(`/projects/${result.projectId}?tab=timeline`);\n        break;\n    }\n  };\n\n  // Navigate to full search results\n  const handleViewAll = () => {\n    setOpen(false);\n    navigate(`/search?q=${encodeURIComponent(searchQuery)}`);\n  };\n\n  // Keyboard shortcuts (Cmd/Ctrl+K)\n  useEffect(() => {\n    const down = (e: KeyboardEvent) => {\n      if (e.key === \"k\" && (e.metaKey || e.ctrlKey)) {\n        e.preventDefault();\n        inputRef.current?.focus();\n      }\n    };\n\n    document.addEventListener(\"keydown\", down);\n    return () => document.removeEventListener(\"keydown\", down);\n  }, []);\n\n  return (\n    <div className=\"relative w-full max-w-sm\" data-testid=\"search-bar-container\">\n      <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n      <Input\n        ref={inputRef}\n        type=\"text\"\n        placeholder=\"Search... (⌘K)\"\n        value={searchQuery}\n        onChange={(e) => {\n          setSearchQuery(e.target.value);\n          setOpen(e.target.value.length >= 2);\n        }}\n        onFocus={() => searchQuery.length >= 2 && setOpen(true)}\n        className=\"pl-9 pr-4\"\n        data-testid=\"input-search\"\n      />\n      \n      {open && searchQuery.length >= 2 && (\n        <div className=\"absolute top-full left-0 right-0 mt-2 z-50 bg-popover border rounded-md shadow-lg\">\n          <Command>\n            <CommandList>\n              {isLoading && (\n                <CommandEmpty>Searching...</CommandEmpty>\n              )}\n              {!isLoading && results.length === 0 && (\n                <CommandEmpty data-testid=\"text-no-results\">No results found</CommandEmpty>\n              )}\n              {!isLoading && results.length > 0 && (\n                <>\n                  <CommandGroup heading=\"Quick Results\">\n                    {results.map((result) => (\n                      <CommandItem\n                        key={`${result.type}-${result.id}`}\n                        onSelect={() => handleSelect(result)}\n                        className=\"cursor-pointer\"\n                        data-testid={`search-result-${result.id}`}\n                      >\n                        <div className=\"flex items-center gap-3 w-full\">\n                          {getIcon(result.type)}\n                          <div className=\"flex-1 overflow-hidden\">\n                            <div className=\"font-medium truncate\">{result.title}</div>\n                            <div className=\"text-xs text-muted-foreground truncate\">\n                              {result.projectTitle}\n                            </div>\n                          </div>\n                          <span className=\"text-xs text-muted-foreground capitalize\">\n                            {result.type}\n                          </span>\n                        </div>\n                      </CommandItem>\n                    ))}\n                  </CommandGroup>\n                  <div className=\"border-t\">\n                    <CommandItem\n                      onSelect={handleViewAll}\n                      className=\"cursor-pointer justify-center text-sm text-primary\"\n                      data-testid=\"button-view-all-results\"\n                    >\n                      <span>View all results</span>\n                      <ArrowRight className=\"ml-2 h-4 w-4\" />\n                    </CommandItem>\n                  </div>\n                </>\n              )}\n            </CommandList>\n          </Command>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":5618},"client/src/pages/search-results.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useLocation, Link } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Search, \n  FileText, \n  Users, \n  Globe, \n  Clock,\n  ChevronRight\n} from \"lucide-react\";\nimport { SearchResult } from \"@shared/schema\";\n\nexport default function SearchResultsPage() {\n  const [location, navigate] = useLocation();\n  const searchParams = new URLSearchParams(location.split('?')[1] || '');\n  const initialQuery = searchParams.get('q') || '';\n  \n  const [searchQuery, setSearchQuery] = useState(initialQuery);\n  const [debouncedQuery, setDebouncedQuery] = useState(initialQuery);\n\n  // Debounce search query\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedQuery(searchQuery);\n      // Update URL\n      if (searchQuery) {\n        navigate(`/search?q=${encodeURIComponent(searchQuery)}`);\n      }\n    }, 300);\n\n    return () => clearTimeout(timer);\n  }, [searchQuery, navigate]);\n\n  // Fetch search results\n  const { data: results = [], isLoading } = useQuery<SearchResult[]>({\n    queryKey: [`/api/search?q=${debouncedQuery}&limit=100`],\n    enabled: debouncedQuery.length >= 2,\n  });\n\n  // Categorize results\n  const documents = results.filter(r => r.type === 'document');\n  const characters = results.filter(r => r.type === 'character');\n  const worldbuilding = results.filter(r => r.type === 'worldbuilding');\n  const timeline = results.filter(r => r.type === 'timeline');\n\n  const allCount = results.length;\n  const counts = {\n    documents: documents.length,\n    characters: characters.length,\n    worldbuilding: worldbuilding.length,\n    timeline: timeline.length,\n  };\n\n  // Get navigation path for result\n  const getResultPath = (result: SearchResult) => {\n    switch (result.type) {\n      case \"document\":\n        return `/projects/${result.projectId}/documents/${result.id}`;\n      case \"character\":\n        return `/projects/${result.projectId}?tab=characters`;\n      case \"worldbuilding\":\n        return `/projects/${result.projectId}?tab=worldbuilding`;\n      case \"timeline\":\n        return `/projects/${result.projectId}?tab=timeline`;\n      default:\n        return `/projects/${result.projectId}`;\n    }\n  };\n\n  // Truncate content for preview\n  const truncateContent = (content: string, maxLength: number = 150) => {\n    const stripped = content.replace(/<[^>]*>/g, '').replace(/&[^;]+;/g, ' ').trim();\n    if (stripped.length <= maxLength) return stripped;\n    return stripped.substring(0, maxLength).trim() + '...';\n  };\n\n  // Result card component\n  const ResultCard = ({ result }: { result: SearchResult }) => (\n    <Link href={getResultPath(result)}>\n      <Card className=\"cursor-pointer hover:bg-accent/50 transition-colors\" data-testid={`search-result-card-${result.id}`}>\n        <CardHeader className=\"pb-3\">\n          <div className=\"flex items-start justify-between\">\n            <div className=\"flex items-start gap-3 flex-1\">\n              <div className=\"mt-1\">\n                {result.type === 'document' && <FileText className=\"h-5 w-5 text-blue-500\" />}\n                {result.type === 'character' && <Users className=\"h-5 w-5 text-purple-500\" />}\n                {result.type === 'worldbuilding' && <Globe className=\"h-5 w-5 text-green-500\" />}\n                {result.type === 'timeline' && <Clock className=\"h-5 w-5 text-orange-500\" />}\n              </div>\n              <div className=\"flex-1\">\n                <CardTitle className=\"text-base\">{result.title}</CardTitle>\n                <CardDescription className=\"mt-1\">\n                  {result.projectTitle}\n                </CardDescription>\n              </div>\n            </div>\n            <Badge variant=\"outline\" className=\"capitalize\">\n              {result.type}\n            </Badge>\n          </div>\n        </CardHeader>\n        {result.content && (\n          <CardContent className=\"pt-0\">\n            <p className=\"text-sm text-muted-foreground line-clamp-2\">\n              {truncateContent(result.content)}\n            </p>\n          </CardContent>\n        )}\n      </Card>\n    </Link>\n  );\n\n  return (\n    <div className=\"container mx-auto p-6 max-w-6xl\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-3xl font-bold mb-4\">Search</h1>\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n          <Input\n            type=\"text\"\n            placeholder=\"Search across all your projects...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-9\"\n            autoFocus\n            data-testid=\"input-search-page\"\n          />\n        </div>\n      </div>\n\n      {debouncedQuery.length < 2 ? (\n        <Card>\n          <CardContent className=\"py-12 text-center text-muted-foreground\">\n            <Search className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n            <p>Enter at least 2 characters to search</p>\n          </CardContent>\n        </Card>\n      ) : isLoading ? (\n        <Card>\n          <CardContent className=\"py-12 text-center text-muted-foreground\">\n            <p>Searching...</p>\n          </CardContent>\n        </Card>\n      ) : results.length === 0 ? (\n        <Card>\n          <CardContent className=\"py-12 text-center text-muted-foreground\" data-testid=\"text-no-search-results\">\n            <Search className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n            <p>No results found for \"{debouncedQuery}\"</p>\n          </CardContent>\n        </Card>\n      ) : (\n        <Tabs defaultValue=\"all\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-5\">\n            <TabsTrigger value=\"all\" data-testid=\"tab-all\">\n              All ({allCount})\n            </TabsTrigger>\n            <TabsTrigger value=\"documents\" data-testid=\"tab-documents\">\n              Documents ({counts.documents})\n            </TabsTrigger>\n            <TabsTrigger value=\"characters\" data-testid=\"tab-characters\">\n              Characters ({counts.characters})\n            </TabsTrigger>\n            <TabsTrigger value=\"worldbuilding\" data-testid=\"tab-worldbuilding\">\n              Worldbuilding ({counts.worldbuilding})\n            </TabsTrigger>\n            <TabsTrigger value=\"timeline\" data-testid=\"tab-timeline\">\n              Timeline ({counts.timeline})\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"all\" className=\"mt-6 space-y-4\">\n            {results.map(result => (\n              <ResultCard key={`${result.type}-${result.id}`} result={result} />\n            ))}\n          </TabsContent>\n\n          <TabsContent value=\"documents\" className=\"mt-6 space-y-4\">\n            {documents.length > 0 ? (\n              documents.map(result => (\n                <ResultCard key={result.id} result={result} />\n              ))\n            ) : (\n              <Card>\n                <CardContent className=\"py-8 text-center text-muted-foreground\">\n                  No documents found\n                </CardContent>\n              </Card>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"characters\" className=\"mt-6 space-y-4\">\n            {characters.length > 0 ? (\n              characters.map(result => (\n                <ResultCard key={result.id} result={result} />\n              ))\n            ) : (\n              <Card>\n                <CardContent className=\"py-8 text-center text-muted-foreground\">\n                  No characters found\n                </CardContent>\n              </Card>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"worldbuilding\" className=\"mt-6 space-y-4\">\n            {worldbuilding.length > 0 ? (\n              worldbuilding.map(result => (\n                <ResultCard key={result.id} result={result} />\n              ))\n            ) : (\n              <Card>\n                <CardContent className=\"py-8 text-center text-muted-foreground\">\n                  No worldbuilding entries found\n                </CardContent>\n              </Card>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"timeline\" className=\"mt-6 space-y-4\">\n            {timeline.length > 0 ? (\n              timeline.map(result => (\n                <ResultCard key={result.id} result={result} />\n              ))\n            ) : (\n              <Card>\n                <CardContent className=\"py-8 text-center text-muted-foreground\">\n                  No timeline events found\n                </CardContent>\n              </Card>\n            )}\n          </TabsContent>\n        </Tabs>\n      )}\n    </div>\n  );\n}\n","size_bytes":8866},"client/src/pages/prompt-library.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { \n  Search, \n  Star, \n  Sparkles, \n  PenTool, \n  Target, \n  TrendingUp\n} from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { useAiModalStore } from \"@/stores/ai-modal-store\";\nimport type { Prompt } from \"@shared/schema\";\n\nexport default function PromptLibraryPage() {\n  const [, navigate] = useLocation();\n  const { openWithPrompt } = useAiModalStore();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [debouncedQuery, setDebouncedQuery] = useState(\"\");\n  const [category, setCategory] = useState(\"all\");\n  const [persona, setPersona] = useState(\"all\");\n  const [targetRole, setTargetRole] = useState(\"all\");\n  const [featuredOnly, setFeaturedOnly] = useState(false);\n  const [favoritesOnly, setFavoritesOnly] = useState(false);\n\n  // Debounce search\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedQuery(searchQuery);\n    }, 300);\n    return () => clearTimeout(timer);\n  }, [searchQuery]);\n\n  // Fetch prompts based on filters\n  const { data: allPrompts = [], isLoading } = useQuery<Prompt[]>({\n    queryKey: debouncedQuery ? [`/api/prompts/search?q=${debouncedQuery}`] : [\"/api/prompts\"],\n  });\n\n  // Fetch user favorites\n  const { data: favoritePrompts = [] } = useQuery<Prompt[]>({\n    queryKey: [\"/api/user/favorite-prompts\"],\n  });\n\n  const favoriteIds = new Set(favoritePrompts.map(p => p.id));\n\n  // Filter prompts client-side\n  const filteredPrompts = allPrompts.filter(prompt => {\n    if (category !== \"all\" && prompt.category !== category) return false;\n    if (persona !== \"all\" && prompt.persona !== persona && prompt.persona !== \"any\") return false;\n    if (targetRole !== \"all\" && prompt.targetRole !== targetRole && prompt.targetRole !== \"all\") return false;\n    if (featuredOnly && !prompt.isFeatured) return false;\n    if (favoritesOnly && !favoriteIds.has(prompt.id)) return false;\n    return true;\n  });\n\n  // Toggle favorite mutation\n  const toggleFavoriteMutation = useMutation({\n    mutationFn: async ({ promptId, isFavorited }: { promptId: number; isFavorited: boolean }) => {\n      if (isFavorited) {\n        await apiRequest(\"DELETE\", `/api/user/favorite-prompts/${promptId}`);\n      } else {\n        await apiRequest(\"POST\", `/api/user/favorite-prompts/${promptId}`);\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/favorite-prompts\"] });\n    },\n  });\n\n  // Use prompt mutation (track usage and navigate to AI)\n  const usePromptMutation = useMutation({\n    mutationFn: async (promptId: number) => {\n      await apiRequest(\"POST\", `/api/prompts/${promptId}/use`);\n    },\n  });\n\n  const handleUsePrompt = (prompt: Prompt) => {\n    usePromptMutation.mutate(prompt.id);\n    \n    const persona = prompt.persona === \"any\" ? \"muse\" : prompt.persona as \"muse\" | \"editor\" | \"coach\";\n    \n    openWithPrompt({\n      persona,\n      prompt: prompt.content\n    });\n    \n    navigate(\"/\");\n  };\n\n  const getPersonaIcon = (persona: string) => {\n    switch (persona) {\n      case \"muse\": return <Sparkles className=\"h-4 w-4\" />;\n      case \"editor\": return <PenTool className=\"h-4 w-4\" />;\n      case \"coach\": return <Target className=\"h-4 w-4\" />;\n      default: return null;\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 max-w-7xl\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-4xl font-bold mb-2\">Prompt Library</h1>\n        <p className=\"text-muted-foreground\">\n          1000+ Expert Writing Prompts for Writers, Editors & Publishers\n        </p>\n      </div>\n\n      {/* Search */}\n      <div className=\"mb-6 relative\">\n        <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n        <Input\n          type=\"text\"\n          placeholder=\"Search prompts...\"\n          value={searchQuery}\n          onChange={(e) => setSearchQuery(e.target.value)}\n          className=\"pl-9\"\n          data-testid=\"input-search-prompts\"\n        />\n      </div>\n\n      {/* Filters */}\n      <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4 mb-6\">\n        <Select value={category} onValueChange={setCategory}>\n          <SelectTrigger data-testid=\"select-category\">\n            <SelectValue placeholder=\"Category\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Categories</SelectItem>\n            <SelectItem value=\"Character Development\">Character Development</SelectItem>\n            <SelectItem value=\"Plot & Story Structure\">Plot & Story</SelectItem>\n            <SelectItem value=\"Dialogue & Voice\">Dialogue</SelectItem>\n            <SelectItem value=\"Scene Writing & Description\">Scene Writing</SelectItem>\n            <SelectItem value=\"Worldbuilding\">Worldbuilding</SelectItem>\n            <SelectItem value=\"Editing & Revision\">Editing</SelectItem>\n            <SelectItem value=\"Genre-Specific\">Genre-Specific</SelectItem>\n            <SelectItem value=\"Ghostwriting\">Ghostwriting</SelectItem>\n            <SelectItem value=\"Self-Publishing & Marketing\">Marketing</SelectItem>\n            <SelectItem value=\"Publishing Prep\">Publishing Prep</SelectItem>\n          </SelectContent>\n        </Select>\n\n        <Select value={persona} onValueChange={setPersona}>\n          <SelectTrigger data-testid=\"select-persona\">\n            <SelectValue placeholder=\"AI Persona\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Personas</SelectItem>\n            <SelectItem value=\"muse\">Muse (Creative)</SelectItem>\n            <SelectItem value=\"editor\">Editor (Polish)</SelectItem>\n            <SelectItem value=\"coach\">Coach (Planning)</SelectItem>\n          </SelectContent>\n        </Select>\n\n        <Select value={targetRole} onValueChange={setTargetRole}>\n          <SelectTrigger data-testid=\"select-role\">\n            <SelectValue placeholder=\"Target Role\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Roles</SelectItem>\n            <SelectItem value=\"writer\">Writer</SelectItem>\n            <SelectItem value=\"ghostwriter\">Ghostwriter</SelectItem>\n            <SelectItem value=\"editor\">Editor</SelectItem>\n            <SelectItem value=\"publisher\">Publisher</SelectItem>\n          </SelectContent>\n        </Select>\n\n        <div className=\"flex items-center space-x-2\">\n          <Switch\n            id=\"featured\"\n            checked={featuredOnly}\n            onCheckedChange={setFeaturedOnly}\n            data-testid=\"switch-featured\"\n          />\n          <Label htmlFor=\"featured\">Featured Only</Label>\n        </div>\n\n        <div className=\"flex items-center space-x-2\">\n          <Switch\n            id=\"favorites\"\n            checked={favoritesOnly}\n            onCheckedChange={setFavoritesOnly}\n            data-testid=\"switch-favorites\"\n          />\n          <Label htmlFor=\"favorites\">My Favorites</Label>\n        </div>\n      </div>\n\n      {/* Results count */}\n      <div className=\"mb-4 text-sm text-muted-foreground\">\n        Showing {filteredPrompts.length} prompts\n      </div>\n\n      {/* Prompts grid */}\n      {isLoading ? (\n        <div className=\"text-center py-12\">Loading prompts...</div>\n      ) : filteredPrompts.length === 0 ? (\n        <Card>\n          <CardContent className=\"py-12 text-center text-muted-foreground\">\n            <Search className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n            <p>No prompts found matching your criteria</p>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {filteredPrompts.map((prompt) => (\n            <Card key={prompt.id} data-testid={`prompt-card-${prompt.id}`}>\n              <CardHeader>\n                <div className=\"flex items-start justify-between mb-2\">\n                  <div className=\"flex items-center gap-2\">\n                    {getPersonaIcon(prompt.persona)}\n                    <Badge variant=\"outline\">{prompt.category}</Badge>\n                  </div>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    onClick={() => toggleFavoriteMutation.mutate({\n                      promptId: prompt.id,\n                      isFavorited: favoriteIds.has(prompt.id)\n                    })}\n                    data-testid={`button-favorite-${prompt.id}`}\n                  >\n                    <Star className={`h-4 w-4 ${favoriteIds.has(prompt.id) ? 'fill-yellow-400 text-yellow-400' : ''}`} />\n                  </Button>\n                </div>\n                <CardTitle className=\"text-base\">{prompt.title}</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-sm text-muted-foreground mb-4 line-clamp-3\">\n                  {prompt.content}\n                </p>\n                {prompt.tags && prompt.tags.length > 0 && (\n                  <div className=\"flex flex-wrap gap-1 mb-4\">\n                    {prompt.tags.slice(0, 3).map((tag, idx) => (\n                      <Badge key={idx} variant=\"secondary\" className=\"text-xs\">\n                        {tag}\n                      </Badge>\n                    ))}\n                  </div>\n                )}\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-xs text-muted-foreground flex items-center gap-1\">\n                    <TrendingUp className=\"h-3 w-3\" />\n                    {prompt.usageCount || 0} uses\n                  </span>\n                  <Button\n                    size=\"sm\"\n                    onClick={() => handleUsePrompt(prompt)}\n                    data-testid={`button-use-prompt-${prompt.id}`}\n                  >\n                    Use This Prompt\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":10495},"server/seed-prompts.ts":{"content":"import { db } from './db';\nimport { prompts } from '@shared/schema';\n\n// Prompt Library Seed Data - 1008 professional writing prompts\n// Distributed across 10 categories for comprehensive writing support\nconst promptsData = [\n  // ==================== CHARACTER DEVELOPMENT (120 prompts) ====================\n  \n  // Motivation & Goals\n  {\n    title: \"Deep Character Motivation Analysis\",\n    content: \"What does [character name] want more than anything? What do they need (which may be different)? How do these desires conflict, and how will this internal struggle drive their character arc?\",\n    category: \"Character Development\",\n    subcategory: \"Motivation & Goals\",\n    tags: [\"motivation\", \"character arc\", \"internal conflict\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Character Desire vs. Need Framework\",\n    content: \"Identify [character name]'s surface-level desire and their deeper psychological need. How does pursuing their want prevent them from getting what they need? When will they realize this contradiction?\",\n    category: \"Character Development\",\n    subcategory: \"Motivation & Goals\",\n    tags: [\"desire\", \"need\", \"character growth\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Character Goal Obstacles\",\n    content: \"List all the obstacles preventing [character name] from achieving their goal. Include: 1) External obstacles (other characters, circumstances), 2) Internal obstacles (fears, flaws, beliefs), 3) Unexpected obstacles that will emerge.\",\n    category: \"Character Development\",\n    subcategory: \"Motivation & Goals\",\n    tags: [\"goals\", \"obstacles\", \"conflict\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Motivation Origin Story\",\n    content: \"Trace [character name]'s primary motivation back to its source. What experience, relationship, or realization created this driving force? How has it evolved over time?\",\n    category: \"Character Development\",\n    subcategory: \"Motivation & Goals\",\n    tags: [\"motivation\", \"backstory\", \"origin\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Character Stakes Personal Inventory\",\n    content: \"What does [character name] stand to lose if they fail? What will they gain if they succeed? Make both answers deeply personal and emotionally resonant.\",\n    category: \"Character Development\",\n    subcategory: \"Motivation & Goals\",\n    tags: [\"stakes\", \"consequences\", \"motivation\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  \n  // Backstory\n  {\n    title: \"Character Backstory Builder\",\n    content: \"Create a detailed backstory for [character name] that explains: 1) Their greatest fear and where it originated, 2) A formative childhood experience, 3) Their relationship with their parents/guardians, 4) A secret they've never told anyone.\",\n    category: \"Character Development\",\n    subcategory: \"Backstory\",\n    tags: [\"backstory\", \"character depth\", \"psychology\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Wound and Belief System\",\n    content: \"What is [character name]'s emotional wound? What happened to create it? What false belief did they adopt because of this wound? How does this belief hold them back?\",\n    category: \"Character Development\",\n    subcategory: \"Backstory\",\n    tags: [\"wound\", \"trauma\", \"beliefs\", \"psychology\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Character's Best Day and Worst Day\",\n    content: \"Describe [character name]'s best day before the story begins. Then describe their worst day. How do these experiences shape who they are when the story opens?\",\n    category: \"Character Development\",\n    subcategory: \"Backstory\",\n    tags: [\"backstory\", \"formative experiences\", \"character history\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Family Dynamics Deep Dive\",\n    content: \"Explore [character name]'s family relationships. What role did they play in their family? What unresolved issues exist? How do these family patterns show up in their current relationships?\",\n    category: \"Character Development\",\n    subcategory: \"Backstory\",\n    tags: [\"family\", \"relationships\", \"psychology\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Turning Point Timeline\",\n    content: \"Create a timeline of the 5 most significant moments that shaped [character name] before the story begins. For each: what happened, how old they were, and what changed in them afterward.\",\n    category: \"Character Development\",\n    subcategory: \"Backstory\",\n    tags: [\"timeline\", \"formative moments\", \"character history\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Secret History\",\n    content: \"What significant event happened in [character name]'s past that no other character knows about? Why have they kept it secret? When/how might it be revealed?\",\n    category: \"Character Development\",\n    subcategory: \"Backstory\",\n    tags: [\"secrets\", \"revelation\", \"backstory\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Educational and Career Path\",\n    content: \"Chart [character name]'s education and career history. What were their dreams? What compromises did they make? What do their choices reveal about their values and circumstances?\",\n    category: \"Character Development\",\n    subcategory: \"Backstory\",\n    tags: [\"career\", \"education\", \"life path\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Past Relationships Impact\",\n    content: \"Detail [character name]'s most significant past relationship (romantic, friendship, or mentorship). How did it change them? What patterns or scars did it leave?\",\n    category: \"Character Development\",\n    subcategory: \"Backstory\",\n    tags: [\"relationships\", \"past\", \"influence\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  \n  // Relationships\n  {\n    title: \"Character Relationship Map\",\n    content: \"Map out [character name]'s key relationships. For each important person in their life, describe: the relationship dynamic, unresolved tension, what they need from each other, and how this relationship will evolve throughout the story.\",\n    category: \"Character Development\",\n    subcategory: \"Relationships\",\n    tags: [\"relationships\", \"character dynamics\", \"supporting cast\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Relationship Tension Analysis\",\n    content: \"Examine the relationship between [character A] and [character B]. What do they want from each other? What prevents them from getting it? How does this tension drive the plot forward?\",\n    category: \"Character Development\",\n    subcategory: \"Relationships\",\n    tags: [\"tension\", \"conflict\", \"relationships\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Power Dynamics in Relationships\",\n    content: \"Who has power in the relationship between [character A] and [character B]? How does this power shift throughout the story? What would equalize or reverse this dynamic?\",\n    category: \"Character Development\",\n    subcategory: \"Relationships\",\n    tags: [\"power dynamics\", \"relationships\", \"conflict\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Mentor-Student Dynamic\",\n    content: \"Develop the mentor-student relationship between [character A] and [character B]. What lesson is being taught? What is being learned unintentionally? When will the student surpass the mentor?\",\n    category: \"Character Development\",\n    subcategory: \"Relationships\",\n    tags: [\"mentor\", \"student\", \"growth\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Romantic Chemistry Builder\",\n    content: \"Build romantic chemistry between [character A] and [character B]. What attracts them to each other? What makes them incompatible? How will they overcome or succumb to these obstacles?\",\n    category: \"Character Development\",\n    subcategory: \"Relationships\",\n    tags: [\"romance\", \"chemistry\", \"attraction\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Rival Relationship Framework\",\n    content: \"Define the rivalry between [character A] and [character B]. What are they competing for? Do they respect each other? Could they ever become allies?\",\n    category: \"Character Development\",\n    subcategory: \"Relationships\",\n    tags: [\"rivalry\", \"competition\", \"conflict\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Found Family Dynamics\",\n    content: \"Explore the found family dynamic in your story. What roles does each character play? How do they support each other? What tests their loyalty?\",\n    category: \"Character Development\",\n    subcategory: \"Relationships\",\n    tags: [\"found family\", \"belonging\", \"relationships\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Betrayal Setup and Payoff\",\n    content: \"Plan a betrayal in the relationship between [character A] and [character B]. What trust has been built? What motivation would cause the betrayal? How will it devastate both characters?\",\n    category: \"Character Development\",\n    subcategory: \"Relationships\",\n    tags: [\"betrayal\", \"trust\", \"conflict\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  \n  // Personality & Traits\n  {\n    title: \"Character Flaw and Strength Pairing\",\n    content: \"Identify [character name]'s greatest strength. Now flip it: how does this strength become their greatest flaw when taken too far? How will the story force them to confront this?\",\n    category: \"Character Development\",\n    subcategory: \"Personality & Traits\",\n    tags: [\"flaws\", \"strengths\", \"duality\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Myers-Briggs Character Profile\",\n    content: \"Assign [character name] a Myers-Briggs personality type. How do their preferences (Introvert/Extrovert, Sensing/Intuition, Thinking/Feeling, Judging/Perceiving) influence their decisions and relationships?\",\n    category: \"Character Development\",\n    subcategory: \"Personality & Traits\",\n    tags: [\"personality\", \"psychology\", \"mbti\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Enneagram Character Deep Dive\",\n    content: \"Determine [character name]'s Enneagram type. What is their core fear and core desire? How do they behave when stressed vs. secure? What is their character arc in Enneagram terms?\",\n    category: \"Character Development\",\n    subcategory: \"Personality & Traits\",\n    tags: [\"enneagram\", \"personality\", \"psychology\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Character Values System\",\n    content: \"List [character name]'s top 5 values in order of importance. What happens when these values come into conflict? Which value will they ultimately choose when forced to decide?\",\n    category: \"Character Development\",\n    subcategory: \"Personality & Traits\",\n    tags: [\"values\", \"morality\", \"choices\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Moral Compass and Boundaries\",\n    content: \"What is [character name]'s moral code? What lines will they never cross? What circumstances might force them to cross those lines anyway?\",\n    category: \"Character Development\",\n    subcategory: \"Personality & Traits\",\n    tags: [\"morality\", \"ethics\", \"boundaries\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Coping Mechanisms and Defense Mechanisms\",\n    content: \"How does [character name] cope with stress, fear, or trauma? What defense mechanisms do they employ? Are these healthy or destructive?\",\n    category: \"Character Development\",\n    subcategory: \"Personality & Traits\",\n    tags: [\"coping\", \"psychology\", \"behavior\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Character Habits and Routines\",\n    content: \"Describe [character name]'s daily routine and ingrained habits. Which habits reveal their character? Which habits will be disrupted by the story events?\",\n    category: \"Character Development\",\n    subcategory: \"Personality & Traits\",\n    tags: [\"habits\", \"routine\", \"behavior\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Sense of Humor Profile\",\n    content: \"What makes [character name] laugh? How do they use humor? Is it a shield, a weapon, or genuine joy? How does their humor reveal their character?\",\n    category: \"Character Development\",\n    subcategory: \"Personality & Traits\",\n    tags: [\"humor\", \"personality\", \"voice\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Decision-Making Style\",\n    content: \"How does [character name] make decisions? Do they rely on logic, emotion, intuition, or others' opinions? What happens when they don't have time to decide their usual way?\",\n    category: \"Character Development\",\n    subcategory: \"Personality & Traits\",\n    tags: [\"decision-making\", \"psychology\", \"choices\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Introvert vs. Extrovert Energy\",\n    content: \"Is [character name] an introvert or extrovert? How do they recharge? How does this affect their relationships and decisions throughout the story?\",\n    category: \"Character Development\",\n    subcategory: \"Personality & Traits\",\n    tags: [\"personality\", \"energy\", \"social\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  \n  // Voice & Speech Patterns  \n  {\n    title: \"Character Voice Signature\",\n    content: \"Define [character name]'s unique speaking pattern. What words or phrases do they overuse? What topics do they avoid? How does their education level and background affect their word choice?\",\n    category: \"Character Development\",\n    subcategory: \"Voice & Speech\",\n    tags: [\"voice\", \"dialogue\", \"speech patterns\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Dialogue Tics and Quirks\",\n    content: \"Give [character name] 3-5 distinct dialogue quirks (verbal tics, catchphrases, speech patterns). How do these reveal their personality, background, or emotional state?\",\n    category: \"Character Development\",\n    subcategory: \"Voice & Speech\",\n    tags: [\"dialogue\", \"quirks\", \"voice\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Voice Under Pressure\",\n    content: \"How does [character name]'s speaking style change when they're angry, scared, or lying? What tells give them away?\",\n    category: \"Character Development\",\n    subcategory: \"Voice & Speech\",\n    tags: [\"voice\", \"emotion\", \"speech patterns\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Education and Vocabulary\",\n    content: \"How does [character name]'s education level show in their vocabulary? Do they use jargon, slang, or formal language? Do they code-switch in different social situations?\",\n    category: \"Character Development\",\n    subcategory: \"Voice & Speech\",\n    tags: [\"vocabulary\", \"education\", \"voice\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  \n  // Physical Description & Mannerisms\n  {\n    title: \"Character Appearance Through Another's Eyes\",\n    content: \"Describe [character name]'s appearance from another character's POV. What do they notice first? What details reveal personality rather than just physical description?\",\n    category: \"Character Development\",\n    subcategory: \"Physical Description\",\n    tags: [\"appearance\", \"description\", \"POV\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Mannerisms and Body Language\",\n    content: \"List [character name]'s distinctive physical mannerisms. How do they move when confident vs. nervous? What unconscious gestures reveal their emotional state?\",\n    category: \"Character Development\",\n    subcategory: \"Physical Description\",\n    tags: [\"mannerisms\", \"body language\", \"nonverbal\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Character's Relationship with Their Body\",\n    content: \"How does [character name] feel about their physical appearance? What insecurities do they have? How does this affect their behavior and confidence?\",\n    category: \"Character Development\",\n    subcategory: \"Physical Description\",\n    tags: [\"body image\", \"insecurity\", \"psychology\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Signature Style and Presentation\",\n    content: \"Describe [character name]'s personal style. How do they dress? How do they present themselves? What does their appearance communicate to others?\",\n    category: \"Character Development\",\n    subcategory: \"Physical Description\",\n    tags: [\"style\", \"appearance\", \"presentation\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Physical Tells and Nervous Habits\",\n    content: \"What physical tells does [character name] have? Do they bite their nails, tap their foot, avoid eye contact? What triggers these behaviors?\",\n    category: \"Character Development\",\n    subcategory: \"Physical Description\",\n    tags: [\"tells\", \"nervous habits\", \"body language\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  \n  // Character Arc & Transformation\n  {\n    title: \"Character Arc Blueprint\",\n    content: \"Map [character name]'s complete character arc: 1) Who they are at the start, 2) What belief/behavior needs to change, 3) What forces the change, 4) Who they become by the end.\",\n    category: \"Character Development\",\n    subcategory: \"Character Arc\",\n    tags: [\"character arc\", \"transformation\", \"growth\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Lie They Believe vs. Truth They Need\",\n    content: \"What lie does [character name] believe about themselves or the world? What is the truth they need to learn? How will the story prove the lie false?\",\n    category: \"Character Development\",\n    subcategory: \"Character Arc\",\n    tags: [\"lie vs truth\", \"belief\", \"growth\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Moment of Change\",\n    content: \"Identify the specific moment when [character name] makes their crucial decision to change. What triggers this moment? What is the internal shift that occurs?\",\n    category: \"Character Development\",\n    subcategory: \"Character Arc\",\n    tags: [\"transformation\", \"turning point\", \"decision\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Resistance to Change\",\n    content: \"What makes it difficult for [character name] to change? What comfort or safety do they get from staying the same? What will finally make change more appealing than stagnation?\",\n    category: \"Character Development\",\n    subcategory: \"Character Arc\",\n    tags: [\"resistance\", \"change\", \"growth\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Positive vs. Negative Arc\",\n    content: \"Is [character name] on a positive arc (growth) or negative arc (decline)? Chart the progression. If negative, what point of no return seals their fate?\",\n    category: \"Character Development\",\n    subcategory: \"Character Arc\",\n    tags: [\"character arc\", \"positive arc\", \"negative arc\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Before and After Character Portrait\",\n    content: \"Write a detailed comparison of [character name] at the beginning vs. end of their arc. What has changed in their beliefs, behaviors, relationships, and goals?\",\n    category: \"Character Development\",\n    subcategory: \"Character Arc\",\n    tags: [\"transformation\", \"before and after\", \"growth\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Flat Arc Character\",\n    content: \"If [character name] has a flat arc (doesn't change), what truth do they already know? How do they help change the world or other characters around them?\",\n    category: \"Character Development\",\n    subcategory: \"Character Arc\",\n    tags: [\"flat arc\", \"steadfast character\", \"truth\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  \n  // Supporting Characters\n  {\n    title: \"Supporting Character Purpose\",\n    content: \"Define the purpose of [supporting character]. How do they: 1) Serve the plot, 2) Reveal the protagonist, 3) Represent a theme, 4) Provide necessary skills or information?\",\n    category: \"Character Development\",\n    subcategory: \"Supporting Characters\",\n    tags: [\"supporting characters\", \"purpose\", \"function\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Ensemble Cast Balance\",\n    content: \"Review your ensemble cast. Does each character have a distinct personality, goal, and voice? Are any characters redundant? Who needs more development or should be cut?\",\n    category: \"Character Development\",\n    subcategory: \"Supporting Characters\",\n    tags: [\"ensemble\", \"cast\", \"balance\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Secondary Character Subplot\",\n    content: \"Develop a subplot for [supporting character] that: 1) Runs parallel to the main plot, 2) Intersects at crucial moments, 3) Has its own arc and resolution.\",\n    category: \"Character Development\",\n    subcategory: \"Supporting Characters\",\n    tags: [\"subplot\", \"supporting characters\", \"secondary plot\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Contrast Character Development\",\n    content: \"Create a character who serves as a contrast to [main character]. How do their opposing traits, choices, or methods highlight the main character's journey?\",\n    category: \"Character Development\",\n    subcategory: \"Supporting Characters\",\n    tags: [\"contrast\", \"foil\", \"supporting characters\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Love Interest Development\",\n    content: \"Develop the love interest as a fully-realized character with their own goals, flaws, and arc. How do they challenge and complement the protagonist? What do they want besides romance?\",\n    category: \"Character Development\",\n    subcategory: \"Supporting Characters\",\n    tags: [\"love interest\", \"romance\", \"character development\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  \n  // Antagonist Development\n  {\n    title: \"Antagonist Motivation\",\n    content: \"Why does the antagonist oppose the protagonist? Develop their motivation until it's as compelling as the hero's. What do they believe they're fighting for?\",\n    category: \"Character Development\",\n    subcategory: \"Antagonist\",\n    tags: [\"antagonist\", \"villain\", \"motivation\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Villain as Hero of Their Own Story\",\n    content: \"Rewrite a scene from your antagonist's perspective. How do they justify their actions? What do they see as heroic about their quest?\",\n    category: \"Character Development\",\n    subcategory: \"Antagonist\",\n    tags: [\"antagonist\", \"POV\", \"perspective\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Antagonist's Wound and Fear\",\n    content: \"What emotional wound does your antagonist carry? What is their greatest fear? How does this drive their antagonistic behavior?\",\n    category: \"Character Development\",\n    subcategory: \"Antagonist\",\n    tags: [\"antagonist\", \"wound\", \"psychology\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Sympathetic Villain Elements\",\n    content: \"Give your antagonist 3 sympathetic or relatable qualities. How can readers understand their choices even while opposing them?\",\n    category: \"Character Development\",\n    subcategory: \"Antagonist\",\n    tags: [\"antagonist\", \"sympathy\", \"complexity\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Protagonist-Antagonist Mirror\",\n    content: \"How are your protagonist and antagonist similar? What parallel experiences or choices led them down different paths? Could they have been friends in other circumstances?\",\n    category: \"Character Development\",\n    subcategory: \"Antagonist\",\n    tags: [\"mirror\", \"parallel\", \"antagonist\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Antagonist's Reasonable Goal\",\n    content: \"What if your antagonist's goal is actually reasonable or good? How can you make them pursue it through the wrong methods, creating moral complexity?\",\n    category: \"Character Development\",\n    subcategory: \"Antagonist\",\n    tags: [\"antagonist\", \"moral complexity\", \"goals\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  \n  // Character Complexity\n  {\n    title: \"Contradiction and Complexity\",\n    content: \"Give [character name] an internal contradiction (e.g., a violent person who loves poetry, a cynic who believes in destiny). How does this complexity make them more realistic?\",\n    category: \"Character Development\",\n    subcategory: \"Complexity\",\n    tags: [\"contradiction\", \"complexity\", \"depth\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Character Blind Spot\",\n    content: \"What is [character name] completely blind to about themselves? What truth do other characters see that they don't? When will they finally see it?\",\n    category: \"Character Development\",\n    subcategory: \"Complexity\",\n    tags: [\"blind spot\", \"self-awareness\", \"psychology\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Hypocrisy and Double Standards\",\n    content: \"In what way is [character name] hypocritical? What standards do they apply to others but not themselves? Will they realize this hypocrisy?\",\n    category: \"Character Development\",\n    subcategory: \"Complexity\",\n    tags: [\"hypocrisy\", \"flaws\", \"self-awareness\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Character's Irrational Fear\",\n    content: \"What irrational fear does [character name] have? How does this phobia or anxiety affect their decisions? Will the story force them to confront it?\",\n    category: \"Character Development\",\n    subcategory: \"Complexity\",\n    tags: [\"fear\", \"phobia\", \"psychology\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Public Persona vs. Private Self\",\n    content: \"How does [character name]'s public persona differ from their private self? What mask do they wear? Who (if anyone) gets to see the real them?\",\n    category: \"Character Development\",\n    subcategory: \"Complexity\",\n    tags: [\"persona\", \"mask\", \"authenticity\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  \n  // Character Details\n  {\n    title: \"Character's Possessions\",\n    content: \"What objects does [character name] carry or treasure? What do these items reveal about their history, values, or secrets?\",\n    category: \"Character Development\",\n    subcategory: \"Details\",\n    tags: [\"possessions\", \"objects\", \"symbolism\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Character's Living Space\",\n    content: \"Describe [character name]'s home or bedroom. Is it messy or organized? What's on the walls? What does this space reveal about who they are?\",\n    category: \"Character Development\",\n    subcategory: \"Details\",\n    tags: [\"setting\", \"home\", \"characterization\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Hobbies and Passions\",\n    content: \"What does [character name] do for fun or passion? How did they discover this interest? How does it connect to their character arc?\",\n    category: \"Character Development\",\n    subcategory: \"Details\",\n    tags: [\"hobbies\", \"interests\", \"passion\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Character's Guilty Pleasures\",\n    content: \"What guilty pleasures does [character name] indulge in? What do these secret indulgences reveal about their hidden desires or needs?\",\n    category: \"Character Development\",\n    subcategory: \"Details\",\n    tags: [\"guilty pleasures\", \"secrets\", \"desires\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Music and Cultural Tastes\",\n    content: \"What music does [character name] listen to? What books do they read? What movies do they watch? How do these tastes reflect their personality and background?\",\n    category: \"Character Development\",\n    subcategory: \"Details\",\n    tags: [\"culture\", \"taste\", \"interests\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Food and Eating Habits\",\n    content: \"What is [character name]'s relationship with food? What do they love to eat? What won't they touch? How do meals reveal their culture, class, or emotional state?\",\n    category: \"Character Development\",\n    subcategory: \"Details\",\n    tags: [\"food\", \"habits\", \"culture\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Sleep Patterns and Dreams\",\n    content: \"How well does [character name] sleep? What nightmares or dreams haunt them? What does their relationship with sleep reveal about their mental state?\",\n    category: \"Character Development\",\n    subcategory: \"Details\",\n    tags: [\"sleep\", \"dreams\", \"psychology\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Character's Education and Intelligence\",\n    content: \"What kind of intelligence does [character name] have? Are they book-smart, street-smart, emotionally intelligent, or creatively gifted? How does this shape their problem-solving?\",\n    category: \"Character Development\",\n    subcategory: \"Details\",\n    tags: [\"intelligence\", \"education\", \"skills\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Character Skills and Talents\",\n    content: \"What special skills or talents does [character name] have? How did they acquire them? Which will be crucial to the plot?\",\n    category: \"Character Development\",\n    subcategory: \"Details\",\n    tags: [\"skills\", \"talents\", \"abilities\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Character's Relationship with Money\",\n    content: \"What is [character name]'s financial situation? How do they feel about money? What would they do for it? What wouldn't they do?\",\n    category: \"Character Development\",\n    subcategory: \"Details\",\n    tags: [\"money\", \"class\", \"values\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Spiritual or Philosophical Beliefs\",\n    content: \"What does [character name] believe about religion, spirituality, or the meaning of life? How do these beliefs guide or trouble them?\",\n    category: \"Character Development\",\n    subcategory: \"Details\",\n    tags: [\"beliefs\", \"philosophy\", \"religion\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Character's Pets or Animals\",\n    content: \"Does [character name] have a pet or significant relationship with an animal? What does this relationship reveal about their capacity for care and connection?\",\n    category: \"Character Development\",\n    subcategory: \"Details\",\n    tags: [\"pets\", \"animals\", \"relationships\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  \n  // Character Questions & Exercises\n  {\n    title: \"Character Interview\",\n    content: \"Interview [character name] in their voice. Ask: What's your greatest fear? Your proudest moment? Your biggest regret? A secret you've never told? What do you want more than anything?\",\n    category: \"Character Development\",\n    subcategory: \"Exercises\",\n    tags: [\"interview\", \"character voice\", \"development\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Character in Different Situation\",\n    content: \"Write a scene with [character name] in a completely different situation from your story (at a party, in a job interview, on a first date). How do they react? What does this reveal?\",\n    category: \"Character Development\",\n    subcategory: \"Exercises\",\n    tags: [\"exercise\", \"exploration\", \"character\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Character's Perfect Day\",\n    content: \"Describe [character name]'s ideal perfect day from start to finish. What does this fantasy reveal about what they truly value and desire?\",\n    category: \"Character Development\",\n    subcategory: \"Exercises\",\n    tags: [\"desires\", \"values\", \"character\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Character at Different Ages\",\n    content: \"Write a scene with [character name] at age 10, 20, and 40. How has their core personality remained the same? How have they changed?\",\n    category: \"Character Development\",\n    subcategory: \"Exercises\",\n    tags: [\"timeline\", \"growth\", \"character history\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Character's Obituary\",\n    content: \"Write [character name]'s obituary as it would appear at the end of their life. What would people say about them? What legacy do they leave?\",\n    category: \"Character Development\",\n    subcategory: \"Exercises\",\n    tags: [\"legacy\", \"impact\", \"character\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Character Letter to Self\",\n    content: \"Have [character name] write a letter to their younger or older self. What advice would they give? What would they warn about? What would they confess?\",\n    category: \"Character Development\",\n    subcategory: \"Exercises\",\n    tags: [\"voice\", \"reflection\", \"character\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Character's Worst Nightmare\",\n    content: \"Describe [character name]'s literal worst nightmare. What imagery appears? What fears manifest? How does this connect to their waking life?\",\n    category: \"Character Development\",\n    subcategory: \"Exercises\",\n    tags: [\"fear\", \"psychology\", \"nightmare\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Character Under Pressure Decision\",\n    content: \"Put [character name] in a pressure-cooker decision: they have 60 seconds to choose between two terrible options. What do they choose? Why? What does this reveal?\",\n    category: \"Character Development\",\n    subcategory: \"Exercises\",\n    tags: [\"decision\", \"pressure\", \"values\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Character Strengths Inventory\",\n    content: \"List 10 strengths for [character name]. Then identify which 3 are most crucial to the story. How will these strengths be tested or fail them?\",\n    category: \"Character Development\",\n    subcategory: \"Exercises\",\n    tags: [\"strengths\", \"skills\", \"testing\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Character Weaknesses Inventory\",\n    content: \"List 10 weaknesses for [character name]. Which weakness will cause the most problems in the story? How will they overcome or succumb to it?\",\n    category: \"Character Development\",\n    subcategory: \"Exercises\",\n    tags: [\"weaknesses\", \"flaws\", \"obstacles\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Character Conversation with Themself\",\n    content: \"Write [character name] having an internal argument with themselves about a major decision. What are the conflicting voices in their head? Which wins?\",\n    category: \"Character Development\",\n    subcategory: \"Exercises\",\n    tags: [\"internal conflict\", \"decision\", \"psychology\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Character's Social Media Profile\",\n    content: \"Create [character name]'s social media profile. What do they share publicly? What do they hide? How does their online persona differ from reality?\",\n    category: \"Character Development\",\n    subcategory: \"Exercises\",\n    tags: [\"modern\", \"persona\", \"character\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Character in a Crisis\",\n    content: \"How does [character name] respond in a crisis? Do they freeze, fight, flee, or take charge? What does their crisis response reveal about their true nature?\",\n    category: \"Character Development\",\n    subcategory: \"Exercises\",\n    tags: [\"crisis\", \"response\", \"behavior\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Character's Confidant Conversation\",\n    content: \"Write a scene where [character name] confides their deepest truth to someone they trust. What do they finally admit? How does saying it aloud change things?\",\n    category: \"Character Development\",\n    subcategory: \"Exercises\",\n    tags: [\"confession\", \"truth\", \"relationships\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Character Transformation Visual\",\n    content: \"Create a before-and-after visual description of [character name]. How has their appearance, posture, or presentation changed from beginning to end? What does this physical change symbolize?\",\n    category: \"Character Development\",\n    subcategory: \"Exercises\",\n    tags: [\"transformation\", \"visual\", \"symbolism\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Character's Five Senses\",\n    content: \"Describe [character name]'s relationship with each of the five senses. Which sense do they rely on most? Do they have any sensory sensitivities or preferences?\",\n    category: \"Character Development\",\n    subcategory: \"Details\",\n    tags: [\"senses\", \"perception\", \"character\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Character's Unreliable Narrative\",\n    content: \"In what ways might [character name] be an unreliable narrator or perspective? What do they misperceive about themselves or others? How will readers see the truth?\",\n    category: \"Character Development\",\n    subcategory: \"Complexity\",\n    tags: [\"unreliable narrator\", \"perception\", \"POV\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Character's Cultural Background\",\n    content: \"Detail [character name]'s cultural and ethnic background. How does their culture influence their values, behaviors, and worldview? What cultural conflicts might they face?\",\n    category: \"Character Development\",\n    subcategory: \"Details\",\n    tags: [\"culture\", \"background\", \"identity\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Character's Gender Identity and Expression\",\n    content: \"How does [character name] experience and express their gender? How does this aspect of identity influence their relationships and role in the story?\",\n    category: \"Character Development\",\n    subcategory: \"Details\",\n    tags: [\"gender\", \"identity\", \"expression\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Character's Sexuality and Romance\",\n    content: \"What is [character name]'s sexual orientation? How do they experience attraction? What role does romance or sexuality play in their journey?\",\n    category: \"Character Development\",\n    subcategory: \"Details\",\n    tags: [\"sexuality\", \"romance\", \"identity\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Character's Disability or Difference\",\n    content: \"If [character name] has a disability, chronic illness, or significant difference, how does this shape their experience? How can you portray this authentically without making it their only trait?\",\n    category: \"Character Development\",\n    subcategory: \"Details\",\n    tags: [\"disability\", \"representation\", \"authenticity\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Character Ensemble Diversity Check\",\n    content: \"Review your full cast for diversity across race, ethnicity, gender, sexuality, ability, class, and perspective. Are you avoiding stereotypes? Is anyone a token? Who needs more depth?\",\n    category: \"Character Development\",\n    subcategory: \"Ensemble\",\n    tags: [\"diversity\", \"representation\", \"cast\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Character Voice Consistency Check\",\n    content: \"Review dialogue for [character name] across multiple scenes. Is their voice consistent? Do they sound like themselves in every scene? Where does their voice feel off?\",\n    category: \"Character Development\",\n    subcategory: \"Voice & Speech\",\n    tags: [\"consistency\", \"voice\", \"dialogue\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Character Growth Tracking\",\n    content: \"Track [character name]'s growth across the story. Mark 5-7 key moments where they show change. Is the progression gradual and believable? Are there enough beats?\",\n    category: \"Character Development\",\n    subcategory: \"Character Arc\",\n    tags: [\"growth\", \"tracking\", \"progression\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Character Agency Audit\",\n    content: \"Does [character name] have agency throughout the story? Are they making active choices or just reacting? Where can they take more control of their journey?\",\n    category: \"Character Development\",\n    subcategory: \"Character Arc\",\n    tags: [\"agency\", \"active character\", \"choices\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Character Motivation Clarity\",\n    content: \"Can readers clearly understand what [character name] wants in every scene? Are their motivations driving the action? Where is motivation unclear or inconsistent?\",\n    category: \"Character Development\",\n    subcategory: \"Motivation & Goals\",\n    tags: [\"motivation\", \"clarity\", \"consistency\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Character's Relationship with Money\",\n    content: \"How does [character name] relate to money? Are they stingy, generous, reckless, or strategic? What childhood experiences shaped their financial attitudes? How does this affect their choices?\",\n    category: \"Character Development\",\n    subcategory: \"Values & Beliefs\",\n    tags: [\"money\", \"values\", \"psychology\", \"beliefs\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Generational Trauma Patterns\",\n    content: \"What patterns has [character name] inherited from their parents or ancestors? What cycles are they repeating unconsciously? How will recognizing these patterns affect their growth?\",\n    category: \"Character Development\",\n    subcategory: \"Backstory\",\n    tags: [\"generational trauma\", \"family patterns\", \"psychology\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Character's Cultural Identity\",\n    content: \"How does [character name]'s cultural background influence their worldview, communication style, and values? Where do they feel caught between cultures? How do they navigate code-switching?\",\n    category: \"Character Development\",\n    subcategory: \"Identity\",\n    tags: [\"culture\", \"identity\", \"heritage\", \"values\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Micro-Expressions and Physical Tells\",\n    content: \"What involuntary physical tells does [character name] exhibit when lying, nervous, or experiencing strong emotion? What microexpressions betray their true feelings?\",\n    category: \"Character Development\",\n    subcategory: \"Physical Description\",\n    tags: [\"microexpressions\", \"tells\", \"body language\", \"nonverbal\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n\n  // ==================== PLOT & STORY STRUCTURE (120 prompts) ====================\n  \n  {\n    title: \"Three-Act Structure Breakdown\",\n    content: \"Using the three-act structure, help me outline: Act 1 (setup and inciting incident), Act 2 (rising action, midpoint, and complications), Act 3 (climax and resolution). What key story beats should I hit in each act?\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Story Framework\",\n    tags: [\"three-act structure\", \"outlining\", \"story beats\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Stakes Escalation Analysis\",\n    content: \"Review my current plot and help me escalate the stakes progressively. How can I make the consequences more severe at each plot point? What personal, external, and philosophical stakes should I layer in?\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Conflict & Stakes\",\n    tags: [\"stakes\", \"tension\", \"conflict\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Inciting Incident Power\",\n    content: \"Evaluate your inciting incident. Does it: 1) Disrupt the status quo, 2) Force the protagonist to make a choice, 3) Set up the central conflict, 4) Occur early enough? How can you make it more impactful?\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Story Beats\",\n    tags: [\"inciting incident\", \"opening\", \"setup\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Midpoint Reversal\",\n    content: \"What major revelation or reversal happens at your midpoint? How does this shift: 1) What the protagonist knows, 2) What they want, 3) The stakes, 4) The direction of the story?\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Story Beats\",\n    tags: [\"midpoint\", \"reversal\", \"turning point\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Dark Night of the Soul\",\n    content: \"Design the darkest moment before the climax. What has the protagonist lost? What do they believe about themselves or their quest? What internal shift prepares them for the final confrontation?\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Story Beats\",\n    tags: [\"dark night\", \"low point\", \"crisis\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Climax Maximum Impact\",\n    content: \"Craft your climax scene. How can you make it: 1) The highest stakes moment, 2) A test of character growth, 3) Inevitable yet surprising, 4) Emotionally and physically intense?\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Story Beats\",\n    tags: [\"climax\", \"resolution\", \"peak\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Save the Cat Beat Sheet\",\n    content: \"Apply the Save the Cat beat sheet to your story. Identify: Opening Image, Theme Stated, Setup, Catalyst, Debate, Break into Two, B Story, Fun and Games, Midpoint, Bad Guys Close In, All Is Lost, Dark Night, Break into Three, Finale, Final Image.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Story Framework\",\n    tags: [\"save the cat\", \"beat sheet\", \"structure\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Hero's Journey Mapping\",\n    content: \"Map your story onto the Hero's Journey: Ordinary World, Call to Adventure, Refusal, Meeting the Mentor, Crossing the Threshold, Tests/Allies/Enemies, Approach, Ordeal, Reward, The Road Back, Resurrection, Return with Elixir.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Story Framework\",\n    tags: [\"hero's journey\", \"monomyth\", \"structure\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Five-Act Structure\",\n    content: \"Structure your story in five acts: Exposition, Rising Action, Climax, Falling Action, Denouement. What key events belong in each act? How does this differ from three-act structure for your story?\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Story Framework\",\n    tags: [\"five-act\", \"structure\", \"framework\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Seven-Point Story Structure\",\n    content: \"Apply Dan Wells' seven-point structure: 1) Hook, 2) Plot Turn 1, 3) Pinch Point 1, 4) Midpoint, 5) Pinch Point 2, 6) Plot Turn 2, 7) Resolution. Work backwards from the resolution.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Story Framework\",\n    tags: [\"seven-point\", \"structure\", \"framework\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Story Premise Strength\",\n    content: \"Refine your premise until it contains: 1) A protagonist we care about, 2) Their goal, 3) The obstacle/antagonist, 4) The stakes. Can you state this in one compelling sentence?\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Foundation\",\n    tags: [\"premise\", \"logline\", \"foundation\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Central Conflict Definition\",\n    content: \"Define your story's central conflict clearly. Is it: Person vs. Person, Person vs. Nature, Person vs. Society, Person vs. Technology, Person vs. Supernatural, or Person vs. Self? How do multiple conflict types layer?\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Conflict & Stakes\",\n    tags: [\"conflict\", \"central conflict\", \"types\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"External vs. Internal Conflict Balance\",\n    content: \"Map your external plot (what happens) against your internal plot (character growth). Do they mirror and reinforce each other? Where is one stronger than the other?\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Conflict & Stakes\",\n    tags: [\"external conflict\", \"internal conflict\", \"balance\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Subplot Integration\",\n    content: \"List all your subplots. For each, identify: 1) Its connection to the main plot, 2) What theme it explores, 3) When it intersects with the main plot, 4) How it resolves. Cut any that don't serve the story.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Subplots\",\n    tags: [\"subplots\", \"integration\", \"structure\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Subplot Weaving Technique\",\n    content: \"How can you weave subplots through your main story without losing focus? Plan when to: advance the subplot, let it simmer in background, and bring it forward at crucial moments.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Subplots\",\n    tags: [\"subplots\", \"weaving\", \"pacing\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Cause and Effect Chain\",\n    content: \"Check that each major plot point is caused by the previous one. Mark any coincidences or convenient plot devices. How can you make the chain of causation stronger?\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Plot Logic\",\n    tags: [\"cause and effect\", \"logic\", \"causation\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Plot Holes Identification\",\n    content: \"Systematically search for plot holes. Ask: Could the problem be solved more easily? Why don't characters use available resources? Are there contradictions in the timeline or logic?\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Plot Logic\",\n    tags: [\"plot holes\", \"logic\", \"consistency\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Raising the Stakes Ladder\",\n    content: \"Create a 'stakes ladder' with 7-10 rungs, each representing an escalation. What does the protagonist risk at each stage? How do consequences grow more severe and personal?\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Conflict & Stakes\",\n    tags: [\"stakes\", \"escalation\", \"progression\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Ticking Clock Tension\",\n    content: \"Add or strengthen a ticking clock. What deadline is the protagonist racing against? How can you remind readers of the diminishing time? What happens if time runs out?\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Tension & Pacing\",\n    tags: [\"ticking clock\", \"deadline\", \"tension\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Pacing Audit\",\n    content: \"Review your story's pacing. Map scenes on a timeline: action scenes, quiet scenes, revelations, setbacks. Are there too many quiet scenes in a row? Too much action without breathing room?\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Tension & Pacing\",\n    tags: [\"pacing\", \"rhythm\", \"balance\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Scene-Sequel Structure\",\n    content: \"Apply scene-sequel structure: Scene (goal, conflict, disaster) followed by Sequel (reaction, dilemma, decision). Which of your scenes need a sequel? Which sequels can be cut?\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Tension & Pacing\",\n    tags: [\"scene structure\", \"sequel\", \"pacing\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Yes But, No And\",\n    content: \"For each scene, does the protagonist get what they want? Apply: 'Yes, but...' (they succeed but with complications) or 'No, and...' (they fail and things get worse). Avoid 'Yes' or 'No' alone.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Tension & Pacing\",\n    tags: [\"scene structure\", \"progression\", \"complications\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Action and Reaction Balance\",\n    content: \"Balance proactive scenes (character takes action) with reactive scenes (character deals with consequences). Too many reactive scenes make the protagonist passive.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Tension & Pacing\",\n    tags: [\"action\", \"reaction\", \"agency\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Plot Twist Execution\",\n    content: \"Plan a plot twist that is both surprising and inevitable. How can you: 1) Plant subtle clues, 2) Misdirect attention, 3) Make it feel earned, 4) Avoid cheapness or randomness?\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Twists & Reveals\",\n    tags: [\"plot twist\", \"surprise\", \"revelation\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Twist Foreshadowing\",\n    content: \"Plant clues for your twist. On first read, these should seem innocent. On rereading, they should be obvious. What details can you layer in without being too obvious?\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Twists & Reveals\",\n    tags: [\"foreshadowing\", \"clues\", \"setup\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Multiple Reveal Layers\",\n    content: \"Design a revelation with layers: first reveal surprises readers, second reveal recontextualizes the first, third reveal adds emotional depth. How can each layer deepen understanding?\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Twists & Reveals\",\n    tags: [\"reveals\", \"layers\", \"complexity\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"False Victory or Defeat\",\n    content: \"Create a false victory (protagonist thinks they've won but haven't) or false defeat (seems all is lost but isn't). How does this fake-out raise stakes and tension?\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Twists & Reveals\",\n    tags: [\"false victory\", \"reversal\", \"tension\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Red Herring Strategy\",\n    content: \"Plant a red herring that distracts from the real answer. How can you make it compelling enough to believe but fair enough that clues to the truth exist?\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Twists & Reveals\",\n    tags: [\"red herring\", \"misdirection\", \"mystery\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Opening Hook Strength\",\n    content: \"Evaluate your opening page. Does it: 1) Establish voice, 2) Introduce stakes, 3) Create questions, 4) Ground readers in time/place, 5) Make readers care? What can you cut or sharpen?\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Opening & Ending\",\n    tags: [\"opening\", \"hook\", \"first page\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"In Medias Res Opening\",\n    content: \"Consider starting in the middle of action (in medias res). What exciting scene can you open with? How will you weave in necessary backstory without losing momentum?\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Opening & Ending\",\n    tags: [\"in medias res\", \"opening\", \"action\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Ending Resonance\",\n    content: \"Craft an ending that resonates emotionally and thematically. How can your final scene: 1) Show character growth, 2) Answer the central question, 3) Echo the opening, 4) Satisfy while leaving readers thinking?\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Opening & Ending\",\n    tags: [\"ending\", \"resolution\", \"resonance\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Epilogue Necessity\",\n    content: \"Do you need an epilogue? Only include one if: 1) The climax is so intense readers need cooling down, 2) You're showing long-term consequences, 3) There's a thematic point to make. Otherwise, end at the climax resolution.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Opening & Ending\",\n    tags: [\"epilogue\", \"ending\", \"structure\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Circular Structure\",\n    content: \"Create a circular structure where the ending mirrors the opening but with everything changed. What image, phrase, or situation can you echo to show transformation?\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Opening & Ending\",\n    tags: [\"circular structure\", \"bookends\", \"theme\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Multiple POV Structure\",\n    content: \"If using multiple POVs, how will you structure them? Alternating chapters? Different timelines? Converging storylines? What's the pattern and purpose?\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Structure Variations\",\n    tags: [\"multiple POV\", \"structure\", \"perspective\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Dual Timeline Structure\",\n    content: \"Structure a dual timeline (past and present). How do the timelines: 1) Inform each other, 2) Build suspense, 3) Reveal information strategically, 4) Converge at the end?\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Structure Variations\",\n    tags: [\"dual timeline\", \"structure\", \"past and present\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Non-Linear Structure\",\n    content: \"Experiment with non-linear structure. Why are you telling the story out of order? How does this serve theme or suspense? Will readers be able to follow?\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Structure Variations\",\n    tags: [\"non-linear\", \"structure\", \"experimental\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Frame Story Structure\",\n    content: \"Use a frame story (story within a story). What is the frame? How does the inner story comment on or change the frame? Why is this structure necessary?\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Structure Variations\",\n    tags: [\"frame story\", \"structure\", \"nested\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Episodic vs. Dramatic Structure\",\n    content: \"Is your story episodic (series of loosely connected events) or dramatic (tightly plotted cause-and-effect)? If episodic, what ties episodes together? How can you strengthen the through-line?\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Structure Variations\",\n    tags: [\"episodic\", \"dramatic\", \"structure\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Quest Structure\",\n    content: \"Structure your story as a quest. What is the object of the quest? What trials must be overcome? Who are the allies and obstacles? What does the protagonist learn beyond finding the object?\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Story Framework\",\n    tags: [\"quest\", \"journey\", \"structure\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Mystery Structure\",\n    content: \"Structure your mystery: Plant the crime/question early, introduce suspects/clues, add red herrings, complicate with new information, build to revelation, explain the solution. Are you playing fair with readers?\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Genre Structure\",\n    tags: [\"mystery\", \"structure\", \"clues\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Heist Structure\",\n    content: \"Structure a heist: Assemble the team, plan the job, show what can go wrong, execute with complications, add a betrayal or twist, conclude with success or failure (and unexpected consequences).\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Genre Structure\",\n    tags: [\"heist\", \"structure\", \"planning\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Prophecy and Destiny Structure\",\n    content: \"If using prophecy or destiny, how can you make it feel fresh? Can the prophecy be misinterpreted? Can the protagonist fight or embrace it? How does free will interact with fate?\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Fantasy Elements\",\n    tags: [\"prophecy\", \"destiny\", \"fate\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Training Sequence Montage\",\n    content: \"Structure a training or preparation sequence. Show progress through specific milestones. Skip boring repetition. Include setbacks. Show how training pays off later in the story.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Common Sequences\",\n    tags: [\"training\", \"montage\", \"preparation\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Gathering Allies Sequence\",\n    content: \"Structure the 'assembling the team' sequence. Give each recruitment its own mini-story. Show why each person is needed. Include one who initially refuses. Make the process build momentum.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Common Sequences\",\n    tags: [\"allies\", \"team\", \"recruitment\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Chase Sequence Structure\",\n    content: \"Structure a chase sequence with: 1) Clear stakes (what happens if caught), 2) Escalating obstacles, 3) Brief moments of hope, 4) Reversals (chaser becomes chased), 5) Satisfying resolution.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Action Sequences\",\n    tags: [\"chase\", \"action\", \"sequence\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Battle or Fight Structure\",\n    content: \"Structure a major battle: Show preparation, initial clash, setback for heroes, turning point, final push, aftermath. Keep readers oriented in chaos. Show personal stakes within larger conflict.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Action Sequences\",\n    tags: [\"battle\", \"fight\", \"action\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Discovery and Investigation\",\n    content: \"Structure a discovery/investigation sequence. What clues are found in what order? How do early findings mislead? When does the true picture emerge? How do you balance revelation with mystery?\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Common Sequences\",\n    tags: [\"discovery\", \"investigation\", \"mystery\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Escape Sequence\",\n    content: \"Structure an escape sequence: Show the trap, establish what's at stake, introduce complications, create near-misses, require clever solutions, show consequences of the escape.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Action Sequences\",\n    tags: [\"escape\", \"action\", \"tension\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Tournament or Competition Structure\",\n    content: \"Structure a tournament or competition: Show initial rounds (establish rivals), raise stakes, include an upset, build to finals, add complications beyond winning, show what victory really costs.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Common Sequences\",\n    tags: [\"tournament\", \"competition\", \"structure\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Revelation Scene Structure\",\n    content: \"Structure a major revelation scene: Build anticipation, deliver the truth, show immediate reaction, explore implications, show how it changes everything moving forward.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Twists & Reveals\",\n    tags: [\"revelation\", \"truth\", \"impact\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Betrayal Structure\",\n    content: \"Structure a betrayal: Build trust first, plant subtle warning signs, create the moment of betrayal, show emotional devastation, deal with consequences, offer potential for redemption or revenge.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Emotional Beats\",\n    tags: [\"betrayal\", \"trust\", \"consequences\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Sacrifice Scene\",\n    content: \"Structure a sacrifice scene: Establish what must be given up, show the decision process, make the moment of sacrifice powerful, honor the sacrifice with consequences, show how it changes the protagonist.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Emotional Beats\",\n    tags: [\"sacrifice\", \"choice\", \"consequences\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Reunion Scene\",\n    content: \"Structure a reunion scene: Build anticipation, create obstacles to the reunion, make the moment earn its emotion, show how both characters have changed, establish the new dynamic.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Emotional Beats\",\n    tags: [\"reunion\", \"emotion\", \"relationships\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Argument and Confrontation\",\n    content: \"Structure a major argument: Start with underlying tension, trigger the explosion, escalate with revelations, reach a breaking point, show immediate fallout, hint at long-term consequences.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Conflict Scenes\",\n    tags: [\"argument\", \"confrontation\", \"conflict\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Negotiation Scene\",\n    content: \"Structure a negotiation: Establish what each party wants, show opening positions, reveal leverage and weaknesses, include reversals and concessions, reach a resolution that costs both sides something.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Conflict Scenes\",\n    tags: [\"negotiation\", \"conflict\", \"compromise\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Interrogation Scene\",\n    content: \"Structure an interrogation: Establish power dynamic, use questions to build tension, include lies and evasions, create a breakthrough moment, show psychological warfare, end with revelation or stalemate.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Conflict Scenes\",\n    tags: [\"interrogation\", \"tension\", \"revelation\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Trial or Judgment Scene\",\n    content: \"Structure a trial or judgment: Present the accusation, allow defense, introduce evidence, create doubt, deliver verdict, show immediate and delayed consequences.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Conflict Scenes\",\n    tags: [\"trial\", \"judgment\", \"justice\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Death Scene Impact\",\n    content: \"Structure a character death: Foreshadow without telegraphing, make the moment matter, show immediate reactions, explore grief and guilt, demonstrate lasting impact on story and characters.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Emotional Beats\",\n    tags: [\"death\", \"loss\", \"grief\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Birth or New Beginning\",\n    content: \"Structure a birth or new beginning: Show anticipation and preparation, include complications, create the moment of arrival, explore immediate joy/adjustment, hint at future implications.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Emotional Beats\",\n    tags: [\"birth\", \"beginning\", \"hope\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Coming of Age Moment\",\n    content: \"Structure the definitive coming-of-age moment: Show innocence before, create the experience that changes everything, mark the loss and gain, demonstrate new maturity in subsequent actions.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Emotional Beats\",\n    tags: [\"coming of age\", \"growth\", \"maturity\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"First Kiss or Intimate Scene\",\n    content: \"Structure a first kiss or intimate scene: Build tension over time, create the perfect/imperfect moment, show vulnerability, make it character-revealing, deal with aftermath and shift in relationship.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Romantic Beats\",\n    tags: [\"romance\", \"intimacy\", \"relationship\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Breakup or Separation Scene\",\n    content: \"Structure a breakup: Show the cracks forming, trigger the break, allow both sides to be heard, make it hurt, show immediate aftermath, hint at whether reconciliation is possible.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Romantic Beats\",\n    tags: [\"breakup\", \"separation\", \"heartbreak\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Declaration of Love\",\n    content: \"Structure a love declaration: Build to the moment, create obstacles to saying it, make the confession vulnerable and specific, show the response, deal with whether feelings are mutual.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Romantic Beats\",\n    tags: [\"love\", \"confession\", \"vulnerability\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Proposal Scene\",\n    content: \"Structure a proposal: Show the decision to propose, create the moment (perfect or disrupted), make the response uncertain, deal with the immediate emotional aftermath, show what changes.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Romantic Beats\",\n    tags: [\"proposal\", \"commitment\", \"romance\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Meet-Cute Structure\",\n    content: \"Structure a compelling meet-cute: Make it memorable and character-revealing, include conflict or mishap, show spark or mutual annoyance, plant seeds for future relationship, avoid cliché.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Romantic Beats\",\n    tags: [\"meet-cute\", \"romance\", \"first meeting\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Grand Gesture Scene\",\n    content: \"Structure a grand romantic gesture: Show what's at stake, make it personal (not generic), include risk of failure or embarrassment, deliver the moment, show authentic response.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Romantic Beats\",\n    tags: [\"grand gesture\", \"romance\", \"risk\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Chosen One vs. Earned Hero\",\n    content: \"Are you using 'chosen one' or 'earned hero'? If chosen, how do you make it feel earned? If earned, what specific choices and sacrifices lead to hero status?\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Hero Types\",\n    tags: [\"chosen one\", \"hero\", \"destiny\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Reluctant Hero Journey\",\n    content: \"Structure a reluctant hero arc: Show why they refuse the call, what finally forces their hand, initial failures, gradual acceptance, full commitment, unexpected aptitude.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Hero Types\",\n    tags: [\"reluctant hero\", \"journey\", \"growth\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Antihero Redemption or Fall\",\n    content: \"Structure an antihero arc: Establish their moral grayness, show glimpses of good/bad, create a decision point, choose redemption or descent, show consequences of their choice.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Hero Types\",\n    tags: [\"antihero\", \"redemption\", \"morality\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Ensemble Plot Balance\",\n    content: \"Balance an ensemble plot: Give each character purpose, vary screen time appropriately, create intersecting storylines, avoid having one character disappear, bring together for climax.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Structure Variations\",\n    tags: [\"ensemble\", \"multiple protagonists\", \"balance\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"MacGuffin Usage\",\n    content: \"Use a MacGuffin (object everyone wants): Make it specific, give it significance, have multiple parties pursuing it, use it to drive plot and reveal character, consider whether it delivers what's promised.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Plot Devices\",\n    tags: [\"macguffin\", \"object\", \"quest\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Deadline Pressure\",\n    content: \"Add multiple deadline pressures that converge: External deadline (event date), internal deadline (running out of resources), personal deadline (emotional limit). Make them collide at climax.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Tension & Pacing\",\n    tags: [\"deadline\", \"pressure\", \"convergence\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Point of No Return\",\n    content: \"Identify the point of no return: Where can't the protagonist turn back? Make this moment clear and powerful. Show them recognizing they've crossed it. Raise stakes immediately after.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Story Beats\",\n    tags: [\"point of no return\", \"commitment\", \"stakes\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"False Protagonist\",\n    content: \"Consider using a false protagonist: Character who seems like the main character but isn't (dies, becomes antagonist, or steps aside). How can you misdirect without cheating readers?\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Advanced Techniques\",\n    tags: [\"false protagonist\", \"misdirection\", \"surprise\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Unreliable Narrator Plot\",\n    content: \"Structure a plot with an unreliable narrator: Plant inconsistencies, give readers clues the narrator misses, build to revelation of truth, show how unreliability affected events.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Advanced Techniques\",\n    tags: [\"unreliable narrator\", \"perspective\", \"truth\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Parallel Storylines Convergence\",\n    content: \"Structure parallel storylines that converge: Keep them thematically linked, build each independently, plant connections readers notice before characters, create satisfying convergence.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Structure Variations\",\n    tags: [\"parallel\", \"convergence\", \"structure\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Flashback Integration\",\n    content: \"Integrate flashbacks purposefully: Only include if essential to present story, make each flashback reveal something crucial, vary length and frequency, return to present with new understanding.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Techniques\",\n    tags: [\"flashback\", \"backstory\", \"integration\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Foreshadowing Without Telegraphing\",\n    content: \"Plant foreshadowing that works on reread: First time seems innocent/natural, second time seems obvious. Use environmental details, throwaway lines, character quirks.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Techniques\",\n    tags: [\"foreshadowing\", \"setup\", \"subtlety\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Chekhov's Gun Audit\",\n    content: \"Apply Chekhov's gun: Everything introduced should matter. Review your story—what details are set up but not paid off? What payoffs lack setup? Fix or cut.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Plot Logic\",\n    tags: [\"chekhov's gun\", \"setup\", \"payoff\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Symmetry and Parallelism\",\n    content: \"Create symmetry: Parallel scenes with key differences, repeated imagery with evolved meaning, matching beginning and ending with growth shown. How does structure reflect theme?\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Advanced Techniques\",\n    tags: [\"symmetry\", \"parallelism\", \"structure\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"B-Story Enhancement\",\n    content: \"Strengthen your B-story (usually romance or key relationship): Show how it provides relief from A-story, explores theme differently, teaches lessons protagonist needs, affects A-story resolution.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Subplots\",\n    tags: [\"b-story\", \"relationship\", \"theme\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Stakes Personal Connection\",\n    content: \"Make stakes deeply personal: It's not just 'save the world' but 'save my child.' Connect external stakes to internal wounds. Make failure mean losing what the protagonist needs most.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Conflict & Stakes\",\n    tags: [\"stakes\", \"personal\", \"emotional\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Impossible Choice Dilemma\",\n    content: \"Create an impossible choice: Protagonist must choose between two things they desperately need/want. Make both options terrible for different reasons. Show internal agony of decision.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Conflict & Stakes\",\n    tags: [\"impossible choice\", \"dilemma\", \"decision\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Cost of Victory\",\n    content: \"Ensure victory has real cost: What does protagonist sacrifice or lose to win? How are they changed? Make the cost significant enough that readers question if it was worth it.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Resolution\",\n    tags: [\"cost\", \"victory\", \"sacrifice\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Pyrrhic Victory Structure\",\n    content: \"Consider a pyrrhic victory: Protagonist wins but the cost is devastating. Structure the revelation of the cost. Show whether they'd make the same choice knowing the price.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Resolution\",\n    tags: [\"pyrrhic victory\", \"cost\", \"consequences\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Bittersweet Ending\",\n    content: \"Craft a bittersweet ending: Mix victory and loss, growth and grief, hope and sorrow. Balance the elements so neither overwhelms. Make it feel true to the journey.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Resolution\",\n    tags: [\"bittersweet\", \"ending\", \"balance\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Tragic Ending Execution\",\n    content: \"Execute a tragic ending: Make it feel inevitable yet heartbreaking, show how protagonist's flaw led here, include moment of recognition, ensure it serves theme, avoid gratuitous darkness.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Resolution\",\n    tags: [\"tragic ending\", \"tragedy\", \"catharsis\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Happy Ending Earned\",\n    content: \"Make a happy ending feel earned: Protagonist must change to deserve it, show specific actions that led to success, include realistic complications even in happiness, avoid deus ex machina.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Resolution\",\n    tags: [\"happy ending\", \"earned\", \"satisfaction\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Open Ending Ambiguity\",\n    content: \"Craft an open/ambiguous ending: Give readers enough to form conclusions, include evidence for multiple interpretations, make ambiguity thematic, ensure it's satisfying not frustrating.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Resolution\",\n    tags: [\"open ending\", \"ambiguity\", \"interpretation\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Series Setup in Standalone\",\n    content: \"Set up a series while completing book 1: Resolve the immediate plot, show character growth, plant seeds for larger arc, introduce ongoing mysteries, make book 1 satisfying alone.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Series Planning\",\n    tags: [\"series\", \"standalone\", \"setup\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Cliffhanger vs. Resolution\",\n    content: \"Choose between cliffhanger and resolution: Cliffhanger for series middle books (resolve character arc, not plot). Resolution for standalone or series end. Hook can be subtle for next book.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Series Planning\",\n    tags: [\"cliffhanger\", \"resolution\", \"series\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Second Act Sag Fix\",\n    content: \"Fix second act sag: Add midpoint reversal, introduce new complications, develop subplots, deepen relationships, reveal secrets, raise stakes. Ensure protagonist stays active.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Common Problems\",\n    tags: [\"second act\", \"pacing\", \"structure\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Sagging Middle Solutions\",\n    content: \"Diagnose why the middle sags: Is protagonist passive? Are stakes static? Is it episodic without progression? Are subplots overwhelming? Fix the root cause.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Common Problems\",\n    tags: [\"middle\", \"pacing\", \"problems\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Plot Armor Awareness\",\n    content: \"Check for plot armor: Are protagonists surviving impossible odds without consequences? Add real danger, injuries, failures. Make readers genuinely worry about character safety.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Common Problems\",\n    tags: [\"plot armor\", \"stakes\", \"consequences\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Deus Ex Machina Removal\",\n    content: \"Eliminate deus ex machina: Don't solve problems with convenient new information, characters, or abilities. Solutions should come from setup earlier in story. Make victory earned through struggle.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Common Problems\",\n    tags: [\"deus ex machina\", \"earned victory\", \"setup\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Contrived Coincidence Audit\",\n    content: \"Find contrived coincidences: Too-convenient meetings, perfect timing, overheard conversations solving problems. Coincidence can start trouble but shouldn't solve it. Add causation.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Common Problems\",\n    tags: [\"coincidence\", \"causation\", \"believability\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Idiot Plot Prevention\",\n    content: \"Avoid 'idiot plot' (only works if characters act stupidly): Would a smart person in this situation make this choice? If not, either justify the choice or change the plot.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Common Problems\",\n    tags: [\"idiot plot\", \"character consistency\", \"logic\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Pacing Variety\",\n    content: \"Vary pacing deliberately: Fast (action, dialogue, short sentences), Medium (description, moderate scenes), Slow (introspection, world-detail). Don't stay at one speed too long.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Tension & Pacing\",\n    tags: [\"pacing\", \"variety\", \"rhythm\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Tension in Quiet Scenes\",\n    content: \"Maintain tension in quiet scenes through: unresolved questions, character secrets, relationship strain, ticking clocks in background, foreshadowing, internal conflict.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Tension & Pacing\",\n    tags: [\"tension\", \"quiet scenes\", \"pacing\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Momentum Maintenance\",\n    content: \"Keep momentum: End chapters with questions or hooks, start new chapters in action, cut slow openings, make each scene advance plot or character, remove tangents.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Tension & Pacing\",\n    tags: [\"momentum\", \"pacing\", \"hooks\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Scene Purpose Clarity\",\n    content: \"Ensure every scene has clear purpose: Advances plot, develops character, explores theme, or provides necessary information. If it doesn't do at least two, cut or combine it.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Scene Structure\",\n    tags: [\"scene purpose\", \"efficiency\", \"editing\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Scene Entry and Exit\",\n    content: \"Enter scenes late, leave early: Start as close to the conflict as possible, end once the point is made. Cut greetings, logistics, and wind-down unless they serve character.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Scene Structure\",\n    tags: [\"scene structure\", \"pacing\", \"efficiency\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Multi-Purpose Scene Creation\",\n    content: \"Make scenes do double/triple duty: Advance plot while developing character and relationship. Reveal backstory while building suspense. Layer purposes for efficiency.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Scene Structure\",\n    tags: [\"efficiency\", \"layering\", \"scene purpose\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Emotional Beats Placement\",\n    content: \"Place emotional beats strategically: After action for impact, before action for stakes, during quiet for depth. Don't rush past emotional moments. Give readers time to feel.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Emotional Beats\",\n    tags: [\"emotion\", \"pacing\", \"impact\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Emotional Arc Mapping\",\n    content: \"Map the emotional arc alongside plot arc: Track protagonist's emotional state through story. Show progression from emotional starting point to end point. Align with plot beats.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Emotional Beats\",\n    tags: [\"emotional arc\", \"progression\", \"tracking\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Hope and Despair Balance\",\n    content: \"Balance hope and despair: Give readers moments of hope when things seem darkest, include setbacks after victories. Avoid too much of either. Build to earned hope at end.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Emotional Beats\",\n    tags: [\"hope\", \"despair\", \"balance\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Reader Emotional Journey\",\n    content: \"Design the reader's emotional journey: What should they feel in each section? Map desired emotions (fear, joy, anger, hope). Write scenes to evoke these feelings.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Emotional Beats\",\n    tags: [\"reader emotion\", \"journey\", \"impact\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Catharsis Creation\",\n    content: \"Build to catharsis: Increase tension and emotion until release is necessary. Deliver the cathartic moment powerfully. Allow aftermath for processing. Show transformation.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Emotional Beats\",\n    tags: [\"catharsis\", \"release\", \"emotion\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Plot Thread Tracking\",\n    content: \"Track all plot threads: List every question raised, mystery introduced, conflict started. Ensure each is resolved or deliberately left open. Don't drop threads accidentally.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Plot Logic\",\n    tags: [\"plot threads\", \"tracking\", \"resolution\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Payoff Worksheet\",\n    content: \"Create payoff worksheet: List all setup/foreshadowing. Mark where each pays off. Ensure nothing is set up without payoff. Ensure payoffs aren't random but set up earlier.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Plot Logic\",\n    tags: [\"setup\", \"payoff\", \"tracking\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Stakes Ladder Visual\",\n    content: \"Create visual stakes ladder: Plot each escalation. See if progression is gradual or has jumps. Ensure each rung is higher than previous. Identify if any rungs can be cut or need adding.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Conflict & Stakes\",\n    tags: [\"stakes\", \"escalation\", \"visualization\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Character Agency in Plot\",\n    content: \"Ensure protagonist drives the plot: Are they making choices that cause events, or just reacting? Passive protagonists make weak plots. Give them agency and consequences.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Character-Driven Plot\",\n    tags: [\"agency\", \"active protagonist\", \"character-driven\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Plot from Character\",\n    content: \"Generate plot from character: What would THIS character do in this situation? Let their flaws create problems. Let their growth determine solutions. Make plot feel inevitable from who they are.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Character-Driven Plot\",\n    tags: [\"character-driven\", \"organic plot\", \"inevitability\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Thematic Plot Integration\",\n    content: \"Integrate theme into plot: Every major plot point should also explore theme. Protagonist's choices should reflect thematic questions. Resolution should answer thematic argument.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Theme\",\n    tags: [\"theme\", \"integration\", \"meaning\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Plot Complexity Audit\",\n    content: \"Audit plot complexity: Is it too simple (predictable) or too complex (confusing)? Test with beat sheet. Can you explain main plot in 3-4 sentences? If not, simplify.\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Common Problems\",\n    tags: [\"complexity\", \"simplicity\", \"clarity\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Multiple Timeline Weaving\",\n    content: \"Coordinate multiple timelines: ensure each has its own arc, create meaningful connections between timelines, reveal information strategically. When do the timelines intersect? How do they illuminate each other?\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Structure Techniques\",\n    tags: [\"multiple timelines\", \"structure\", \"complexity\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Cliffhanger Placement Strategy\",\n    content: \"Place cliffhangers strategically: end chapters with unanswered questions, unresolved tension, or shocking revelations. Balance leaving readers wanting more with not frustrating them. Where are your natural cliffhanger moments?\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Pacing\",\n    tags: [\"cliffhangers\", \"chapter endings\", \"tension\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"False Resolution Technique\",\n    content: \"Create a false resolution before the real climax: let characters think they've won, then reveal the real challenge. How does this false victory make the true conflict more devastating?\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Plot Twists\",\n    tags: [\"false resolution\", \"plot twist\", \"structure\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Plot Twist Believability Test\",\n    content: \"Test your plot twist: Is it surprising yet inevitable? Have you planted enough clues? Will readers feel cheated or delighted? Does it emerge from character and established rules?\",\n    category: \"Plot & Story Structure\",\n    subcategory: \"Plot Twists\",\n    tags: [\"plot twist\", \"foreshadowing\", \"surprise\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n\n  // ==================== DIALOGUE & VOICE (100 prompts) ====================\n  \n  {\n    title: \"Natural Conversation Flow\",\n    content: \"Review this dialogue between [character A] and [character B]. Does it sound like real conversation? Remove formal speech, add interruptions, incomplete thoughts, and subtext. Make it feel spontaneous.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Natural Conversation\",\n    tags: [\"dialogue\", \"natural speech\", \"conversation\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Subtext in Dialogue\",\n    content: \"Rewrite this conversation so characters say one thing but mean another. What are they really talking about under the surface? How can body language and context reveal the true meaning?\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Subtext\",\n    tags: [\"subtext\", \"dialogue\", \"meaning\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Dialogue Beats and Action\",\n    content: \"Add dialogue beats (small actions during speech) to this conversation. Show characters' emotions and intentions through what they do while talking, not just what they say.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Dialogue Beats\",\n    tags: [\"dialogue beats\", \"action\", \"nonverbal\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Distinct Character Voices\",\n    content: \"Can you tell who's speaking without dialogue tags? Give each character a distinct voice through word choice, sentence structure, and speech patterns. Make them unmistakable.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Character Voice\",\n    tags: [\"character voice\", \"dialogue\", \"distinction\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Dialect and Accent Writing\",\n    content: \"How can you suggest [character]'s accent or dialect without phonetic spelling that's hard to read? Use word choice, syntax, and rhythm instead of apostrophes and misspellings.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Dialect\",\n    tags: [\"dialect\", \"accent\", \"voice\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Dialogue Tag Alternatives\",\n    content: \"Replace 90% of your 'said' tags with action beats that show who's speaking through what they're doing. Keep some 'said' for clarity. Avoid adverbs.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Dialogue Tags\",\n    tags: [\"dialogue tags\", \"said\", \"beats\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Argument Escalation Dialogue\",\n    content: \"Write an argument that escalates naturally. Start with small tension, build through interruptions and raised voices, reach a breaking point with devastating truths. Show emotion through dialogue rhythm.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Conflict Dialogue\",\n    tags: [\"argument\", \"conflict\", \"escalation\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Flirtatious Dialogue Tension\",\n    content: \"Create flirtatious dialogue with tension. Use wit, teasing, double meanings, and nervous energy. Make readers feel the chemistry through word choice and pacing.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Romantic Dialogue\",\n    tags: [\"flirting\", \"romance\", \"chemistry\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Exposition Through Dialogue\",\n    content: \"Reveal necessary background information through natural dialogue. Avoid info-dumping. Have characters discuss it for their own reasons, with conflict and personality.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Exposition\",\n    tags: [\"exposition\", \"backstory\", \"natural\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Dialogue Interruptions and Overlaps\",\n    content: \"Add realistic interruptions: characters talking over each other, cutting off mid-thought, finishing each other's sentences. Show the energy and chaos of real conversation.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Natural Conversation\",\n    tags: [\"interruptions\", \"realistic\", \"energy\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Silence and Pauses in Dialogue\",\n    content: \"Use silence strategically in dialogue. When do characters pause? What's communicated by what isn't said? How can silence create more tension than words?\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Subtext\",\n    tags: [\"silence\", \"pauses\", \"tension\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Age-Appropriate Dialogue\",\n    content: \"Ensure [character]'s dialogue matches their age. Children, teens, adults, and elderly speak differently. Consider vocabulary, concerns, references, and syntax.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Character Voice\",\n    tags: [\"age\", \"voice\", \"authenticity\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Regional Speech Patterns\",\n    content: \"Give [character] speech patterns from their region without stereotyping. Research actual phrases, idioms, and syntax from that area. Make it authentic but readable.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Dialect\",\n    tags: [\"regional\", \"speech patterns\", \"authenticity\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Formal vs. Informal Speech\",\n    content: \"Show [character]'s education and background through formality level. How do they speak at work vs. with friends? When do they code-switch?\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Character Voice\",\n    tags: [\"formality\", \"code-switching\", \"background\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Lying Through Dialogue\",\n    content: \"Write dialogue where [character] is lying. How do their speech patterns change? Do they over-explain, avoid eye contact (shown through beats), or become more formal?\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Subtext\",\n    tags: [\"lying\", \"tells\", \"deception\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Comedic Dialogue Timing\",\n    content: \"Create funny dialogue through timing, unexpected responses, and character voice. Use setup and punchline structure. Let humor come from character, not just jokes.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Humor\",\n    tags: [\"comedy\", \"humor\", \"timing\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Witty Banter\",\n    content: \"Write witty banter between [character A] and [character B]. Quick exchanges, clever wordplay, one-upmanship. Keep it character-specific, not generic quips.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Humor\",\n    tags: [\"banter\", \"wit\", \"wordplay\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Emotional Revelation Dialogue\",\n    content: \"Write a scene where [character] finally expresses deep emotion. Make it difficult for them. Show vulnerability through hesitation, word choice, and what they can't quite say.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Emotional Dialogue\",\n    tags: [\"emotion\", \"revelation\", \"vulnerability\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Grief in Dialogue\",\n    content: \"Express grief through dialogue without melodrama. Show numbness, anger, denial, or avoidance. Let silence and small words carry weight. Avoid speeches.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Emotional Dialogue\",\n    tags: [\"grief\", \"loss\", \"emotion\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Passive-Aggressive Dialogue\",\n    content: \"Write passive-aggressive dialogue where [character] is angry but won't say it directly. Use overly polite language, backhanded compliments, and cold courtesy.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Conflict Dialogue\",\n    tags: [\"passive-aggressive\", \"conflict\", \"subtext\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Phone Conversation Writing\",\n    content: \"Write a phone conversation showing only one side. Let readers infer the other side through reactions, pauses, and responses. Use it to build mystery or tension.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Techniques\",\n    tags: [\"phone\", \"one-sided\", \"technique\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Group Conversation Clarity\",\n    content: \"Write clear group dialogue with 3+ characters. Use action beats, positioning, and distinct voices to keep readers oriented. Vary who speaks and who listens.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Multi-Person\",\n    tags: [\"group\", \"clarity\", \"multiple characters\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Internal Monologue vs. Dialogue\",\n    content: \"Balance what [character] thinks vs. what they say. Show the gap between internal and external voice. Use this contrast to reveal character and create irony.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Internal Voice\",\n    tags: [\"internal monologue\", \"contrast\", \"irony\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Confession Scene Dialogue\",\n    content: \"Write a confession where [character] admits a difficult truth. Make them struggle to find words. Build to it. Show the cost of honesty through hesitation and emotion.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Emotional Dialogue\",\n    tags: [\"confession\", \"truth\", \"vulnerability\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Negotiation Dialogue\",\n    content: \"Write negotiation dialogue where both parties want different things. Show strategy, bluffing, compromise, and power shifts through what they say and don't say.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Conflict Dialogue\",\n    tags: [\"negotiation\", \"strategy\", \"power\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Threat and Intimidation Dialogue\",\n    content: \"Write threatening dialogue that's more effective than explicit violence. Use calm delivery, specific details, and subtext. Sometimes the quietest threats are scariest.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Tension\",\n    tags: [\"threat\", \"intimidation\", \"tension\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Apology Dialogue\",\n    content: \"Write a genuine apology that feels earned. Show [character] taking responsibility, understanding harm caused, not making excuses. Make it specific, not generic.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Emotional Dialogue\",\n    tags: [\"apology\", \"accountability\", \"sincerity\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Period-Appropriate Dialogue\",\n    content: \"For historical fiction set in [time period], research actual speech patterns, vocabulary, and formality. Suggest the period without becoming inaccessible to modern readers.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Historical\",\n    tags: [\"historical\", \"period\", \"research\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Child's Voice Authenticity\",\n    content: \"Write dialogue for [child character] that sounds genuinely child-like without being cutesy. Consider their age, what they'd know, how they'd express it. Avoid adult wisdom in child's mouth.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Character Voice\",\n    tags: [\"children\", \"authenticity\", \"age\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Elderly Character Voice\",\n    content: \"Write dialogue for [elderly character] without stereotypes. Consider their specific history, generation, experience. Avoid 'old person speak' clichés.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Character Voice\",\n    tags: [\"elderly\", \"age\", \"authenticity\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Professional Jargon Use\",\n    content: \"When [character] uses professional jargon, use it naturally but make it understandable from context. Don't stop to explain unless another character would ask.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Jargon\",\n    tags: [\"jargon\", \"profession\", \"authenticity\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Multilingual Dialogue\",\n    content: \"Incorporate another language naturally. Use italics sparingly, let context convey meaning, show code-switching. Research how bilingual speakers actually talk.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Multilingual\",\n    tags: [\"multilingual\", \"language\", \"code-switching\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Drunk or Impaired Speech\",\n    content: \"Show [character] drunk or impaired through dialogue without phonetic spelling. Use rambling, repetition, emotional swings, and poor word choice.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Character State\",\n    tags: [\"drunk\", \"impaired\", \"state\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Exhaustion in Dialogue\",\n    content: \"Show exhaustion through short responses, lack of filter, emotional fragility, and giving up on explanation. Let weariness show in what they don't have energy to say.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Character State\",\n    tags: [\"exhaustion\", \"tired\", \"state\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Dialogue Pacing Control\",\n    content: \"Control pace through dialogue: Long speeches slow down, quick exchanges speed up. Match dialogue rhythm to scene energy. Use paragraph breaks for pacing.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Pacing\",\n    tags: [\"pacing\", \"rhythm\", \"control\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Cutting Unnecessary Dialogue\",\n    content: \"Cut dialogue that doesn't: reveal character, advance plot, create tension, or delight with voice. Especially cut greetings, obvious statements, and repetitive exchanges.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Editing\",\n    tags: [\"cutting\", \"editing\", \"efficiency\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Reading Dialogue Aloud\",\n    content: \"Read all dialogue aloud. Does it sound natural? Can you hear each character's distinct voice? Fix anything that's awkward, too formal, or doesn't flow.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Revision\",\n    tags: [\"reading aloud\", \"revision\", \"natural\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Dialogue Attribution Clarity\",\n    content: \"Ensure readers always know who's speaking, but don't over-attribute. Use tags when needed, beats when possible, context when clear.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Dialogue Tags\",\n    tags: [\"attribution\", \"clarity\", \"tags\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Subtext Layers\",\n    content: \"Layer multiple levels of subtext: what character says, what they mean, what they don't realize they're revealing. Let readers see more than characters do.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Subtext\",\n    tags: [\"subtext\", \"layers\", \"irony\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Power Dynamics in Dialogue\",\n    content: \"Show power dynamics through who talks more, who interrupts, who gets heard, word choice, and formality. Dialogue should reveal hierarchy and status.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Power\",\n    tags: [\"power dynamics\", \"status\", \"hierarchy\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Evasion and Deflection\",\n    content: \"Write dialogue where [character] evades questions. Show them changing subject, answering different questions, using humor as shield. Make evasion itself revealing.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Subtext\",\n    tags: [\"evasion\", \"deflection\", \"avoidance\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Love Confession Dialogue\",\n    content: \"Write a love confession that feels earned and character-specific. Make it difficult. Show vulnerability. Avoid generic 'I love you' speeches.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Romantic Dialogue\",\n    tags: [\"love\", \"confession\", \"romance\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Breakup Dialogue\",\n    content: \"Write breakup dialogue where both people have valid points. Show hurt, anger, resignation. Let it be messy and real, not clean or entirely one person's fault.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Conflict Dialogue\",\n    tags: [\"breakup\", \"conflict\", \"heartbreak\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"First Meeting Dialogue\",\n    content: \"Write a first meeting where characters reveal personality through dialogue. Show attraction, suspicion, or conflict. Avoid info-dumping. Make it memorable.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Introduction\",\n    tags: [\"first meeting\", \"introduction\", \"personality\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Reunion Dialogue After Time\",\n    content: \"Write a reunion after years apart. Show what's changed and what hasn't. Address the elephant in the room or dance around it. Make time felt.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Emotional Dialogue\",\n    tags: [\"reunion\", \"time\", \"change\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Dying Words Impact\",\n    content: \"Write a character's last words that matter to the story and other characters. Make them specific, characteristic, and meaningful without being melodramatic.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Emotional Dialogue\",\n    tags: [\"death\", \"last words\", \"impact\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Monologue Power\",\n    content: \"Write a monologue that's powerful enough to earn its length. Build to it. Make it active (character trying to accomplish something), not just exposition.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Monologue\",\n    tags: [\"monologue\", \"speech\", \"power\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Interior Monologue Style\",\n    content: \"Develop [character]'s interior monologue style. How do they think? Stream of consciousness, organized, anxious, observant? Make internal voice as distinct as external.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Internal Voice\",\n    tags: [\"interior monologue\", \"thoughts\", \"voice\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Unreliable Narrator Voice\",\n    content: \"Create an unreliable narrator's voice. What biases, blind spots, or deliberate deceptions color their narrative? How can you signal unreliability to readers?\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Narrative Voice\",\n    tags: [\"unreliable narrator\", \"voice\", \"perspective\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"First Person Voice Consistency\",\n    content: \"Ensure your first-person narrator's voice stays consistent. Every sentence should sound like them. Review for places where author voice intrudes.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Narrative Voice\",\n    tags: [\"first person\", \"consistency\", \"voice\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Third Person Voice Limits\",\n    content: \"In third person limited, stick to what POV character would notice, think, and know. Don't head-hop. Let voice reflect character's personality even in narration.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Narrative Voice\",\n    tags: [\"third person\", \"POV\", \"limits\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Omniscient Narrator Voice\",\n    content: \"Develop your omniscient narrator's personality. Are they warm, sardonic, neutral, philosophical? Maintain consistent narrative voice throughout.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Narrative Voice\",\n    tags: [\"omniscient\", \"narrator\", \"voice\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Dialogue Rhythm Variation\",\n    content: \"Vary dialogue rhythm: short staccato exchanges for tension, longer speeches for emotion or explanation. Mix it up. Avoid monotony.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Pacing\",\n    tags: [\"rhythm\", \"variation\", \"pacing\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Pregnant Pause Usage\",\n    content: \"Use pregnant pauses (loaded silence) in dialogue. Show what the pause communicates: awkwardness, realization, dread, anticipation. Make silence work.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Subtext\",\n    tags: [\"pause\", \"silence\", \"tension\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Dialogue as Action\",\n    content: \"Make dialogue do things: advance plot, reveal character, change relationships. Every exchange should have purpose and consequence.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Purpose\",\n    tags: [\"action\", \"purpose\", \"consequence\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Question and Answer Patterns\",\n    content: \"Vary question-and-answer patterns. Characters don't always answer directly. Use deflection, new questions, silence, or partial answers.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Natural Conversation\",\n    tags: [\"questions\", \"answers\", \"patterns\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Emotional Dialogue Without Telling\",\n    content: \"Show emotion through dialogue without naming it. Use word choice, sentence length, interruptions, what's said vs. not said. Avoid 'he said angrily.'\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Emotional Dialogue\",\n    tags: [\"emotion\", \"show don't tell\", \"dialogue\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Dialect Balance\",\n    content: \"Balance dialect authenticity with readability. A few key phrases/syntax patterns suggest accent without making every line hard to read. Less is more.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Dialect\",\n    tags: [\"dialect\", \"balance\", \"readability\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Generational Speech Differences\",\n    content: \"Show generational gaps through speech: different slang, references, formality levels, technology comfort. Make age differences audible.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Character Voice\",\n    tags: [\"generation\", \"age\", \"differences\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Speech Impediment Handling\",\n    content: \"If [character] has a speech impediment, suggest it through occasional word substitution or rhythm, not phonetic spelling. Show their awareness or frustration occasionally.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Character Voice\",\n    tags: [\"speech impediment\", \"authenticity\", \"representation\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Selective Mutism or Silence\",\n    content: \"For a character who doesn't speak much, make their rare words count. Show communication through other means. Make silence a choice.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Character Voice\",\n    tags: [\"silence\", \"selective\", \"communication\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Cultural Dialogue Differences\",\n    content: \"Research how [culture]'s communication style differs. Consider directness, formality, personal space in conversation, topics avoided. Make it authentic, not stereotypical.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Cultural\",\n    tags: [\"culture\", \"communication\", \"research\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Gender and Dialogue Stereotypes\",\n    content: \"Avoid gendered dialogue stereotypes. Not all women are emotional/indirect, not all men are stoic/direct. Let character personality trump gender expectations.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Character Voice\",\n    tags: [\"gender\", \"stereotypes\", \"authenticity\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Neurodivergent Communication\",\n    content: \"For neurodivergent characters, research authentic communication patterns. Avoid stereotypes. Show strengths and challenges. Consult sensitivity readers.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Representation\",\n    tags: [\"neurodivergent\", \"authenticity\", \"representation\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Trauma Impact on Speech\",\n    content: \"Show how trauma affects [character]'s speech: avoidance of topics, emotional shutdown, overexplanation, or difficulty finding words. Make it real, not romanticized.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Character State\",\n    tags: [\"trauma\", \"impact\", \"authentic\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Joy and Excitement Dialogue\",\n    content: \"Write genuinely joyful dialogue without cheese. Show excitement through energy, pace, word choice. Let characters celebrate authentically.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Emotional Dialogue\",\n    tags: [\"joy\", \"excitement\", \"celebration\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Fear in Dialogue\",\n    content: \"Show fear through dialogue: stammering, rambling, short responses, hyperawareness, or going silent. Different characters show fear differently.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Emotional Dialogue\",\n    tags: [\"fear\", \"terror\", \"emotion\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Anger Expression Variety\",\n    content: \"Show anger differently: cold and controlled, explosive and loud, passive-aggressive, or silent fury. Match expression to character.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Emotional Dialogue\",\n    tags: [\"anger\", \"expression\", \"variety\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Sarcasm and Irony\",\n    content: \"Write sarcasm that lands. Use context, character knowledge, and slight exaggeration. Avoid explaining it's sarcasm. Let readers get it.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Humor\",\n    tags: [\"sarcasm\", \"irony\", \"wit\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Dialogue Callbacks\",\n    content: \"Use dialogue callbacks: phrases that echo earlier conversations with new meaning. Create resonance and show character growth through repeated phrases transformed.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Techniques\",\n    tags: [\"callbacks\", \"echoes\", \"resonance\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Memorable Dialogue Lines\",\n    content: \"Craft lines that stick with readers. Make them specific to character and situation, not generic. The most quotable lines often come from character, not trying to be quotable.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Craft\",\n    tags: [\"memorable\", \"quotable\", \"impact\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Dialogue White Space\",\n    content: \"Use paragraph breaks and white space around important dialogue. Give key lines room to breathe and impact. Don't bury important words in dense paragraphs.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Formatting\",\n    tags: [\"white space\", \"formatting\", \"impact\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Dialogue Specificity\",\n    content: \"Make dialogue specific to this character in this moment. Avoid generic statements anyone could say. Every line should reveal who's speaking.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Character Voice\",\n    tags: [\"specificity\", \"character\", \"unique\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Listening in Dialogue\",\n    content: \"Show characters actually listening (or not). How they respond reveals if they heard. Use misunderstandings, assumptions, selective hearing.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Natural Conversation\",\n    tags: [\"listening\", \"response\", \"communication\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Dialogue Reveals Character Arc\",\n    content: \"Track how [character]'s dialogue changes from beginning to end. Speech patterns, word choice, confidence should reflect growth. Make arc audible.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Character Arc\",\n    tags: [\"character arc\", \"growth\", \"change\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Voicemail or Recording\",\n    content: \"Write a voicemail, recording, or letter that advances plot. Make the one-way communication create tension, revelation, or emotion.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Techniques\",\n    tags: [\"voicemail\", \"recording\", \"one-way\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Prayer or Talking to Self\",\n    content: \"Write [character] praying or talking to themselves. Use it to reveal inner thoughts while maintaining immediacy. Show character through how they frame internal dialogue.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Internal Voice\",\n    tags: [\"prayer\", \"self-talk\", \"internal\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Interrogation Pressure\",\n    content: \"Write an interrogation with mounting pressure. Show questioner's technique and subject's resistance. Build tension through word choice and what's revealed/withheld.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Tension\",\n    tags: [\"interrogation\", \"pressure\", \"revelation\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Comfort and Reassurance\",\n    content: \"Write dialogue where [character A] comforts [character B]. Make it specific to their relationship. Avoid platitudes. Show genuine care through knowing what to say.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Emotional Dialogue\",\n    tags: [\"comfort\", \"reassurance\", \"care\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Teaching or Explaining\",\n    content: \"Write a character explaining something complex to another. Make it clear without being condescending. Use the learner's questions and confusion naturally.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Exposition\",\n    tags: [\"teaching\", \"explaining\", \"clarity\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Gossip and Rumors\",\n    content: \"Write gossip dialogue that reveals character (both gossiper and subject). Use it to spread information, build tension, or show social dynamics.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Social\",\n    tags: [\"gossip\", \"rumors\", \"social\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Motivational Speech\",\n    content: \"Write a motivational speech that feels earned, not cheesy. Build to it through adversity. Make it specific to these characters and this situation.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Monologue\",\n    tags: [\"motivation\", \"speech\", \"inspiration\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Deathbed Conversation\",\n    content: \"Write a deathbed conversation that matters. What's said and unsaid. What finally gets expressed. Make it about the living as much as the dying.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Emotional Dialogue\",\n    tags: [\"deathbed\", \"goodbye\", \"finality\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Job Interview Dialogue\",\n    content: \"Write a job interview showing power dynamics, nerves, and performance. Use it to reveal character through how they present themselves vs. reality.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Specific Scenes\",\n    tags: [\"interview\", \"performance\", \"pressure\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Courtroom Dialogue\",\n    content: \"Write courtroom dialogue with proper formality but dramatic tension. Show verbal sparring between lawyers, witness nervousness, judge's authority.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Specific Scenes\",\n    tags: [\"courtroom\", \"legal\", \"formal\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Medical Diagnosis Scene\",\n    content: \"Write a diagnosis scene balancing medical accuracy with emotional impact. Show doctor's professionalism, patient's reaction, jargon explained naturally.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Specific Scenes\",\n    tags: [\"medical\", \"diagnosis\", \"emotional\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Proposal or Declaration\",\n    content: \"Write a marriage proposal or important declaration. Make it personal and character-specific. Show nerves, hope, and what's at stake.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Romantic Dialogue\",\n    tags: [\"proposal\", \"declaration\", \"commitment\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Parent-Child Dialogue Dynamics\",\n    content: \"Show parent-child relationship through dialogue. Consider age, respect/rebellion, unspoken expectations. Make it specific to these characters, not generic family talk.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Relationships\",\n    tags: [\"parent-child\", \"family\", \"dynamics\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Sibling Dialogue Patterns\",\n    content: \"Write sibling dialogue with their specific history. Inside jokes, old conflicts, shorthand communication. Show the unique intimacy of sibling bonds.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Relationships\",\n    tags: [\"siblings\", \"family\", \"history\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Best Friend Shorthand\",\n    content: \"Show best friend communication: finishing sentences, inside jokes, honest feedback. They can say things others can't. Show the trust and history.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Relationships\",\n    tags: [\"best friends\", \"intimacy\", \"trust\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Stranger Conversation Guidelines\",\n    content: \"Write dialogue between strangers with appropriate formality, small talk, and testing boundaries. Show gradual comfort or maintained distance.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Relationships\",\n    tags: [\"strangers\", \"formality\", \"boundaries\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Enemy or Rival Dialogue\",\n    content: \"Write dialogue between enemies that crackles with animosity. Use loaded words, false courtesy, or open hostility. Show their history through what they say.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Conflict Dialogue\",\n    tags: [\"enemies\", \"rivals\", \"animosity\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Mentor-Student Dialogue\",\n    content: \"Write mentor-student dialogue showing the teaching dynamic. Include challenge, patience, frustration, and breakthrough. Show mutual respect or lack thereof.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Relationships\",\n    tags: [\"mentor\", \"student\", \"teaching\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Boss-Employee Dynamics\",\n    content: \"Show power imbalance in boss-employee dialogue. Include formality, careful word choice, professional boundaries, and what can't be said directly.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Professional\",\n    tags: [\"boss\", \"employee\", \"power\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Dialogue Consistency Check\",\n    content: \"Read through all dialogue for [character]. Do they sound consistent? Do they use the same quirks, formality level, and vocabulary throughout? Fix inconsistencies.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Revision\",\n    tags: [\"consistency\", \"revision\", \"voice\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Subtext Layering Advanced\",\n    content: \"Layer multiple levels of subtext: surface conversation, underlying tension, hidden agenda, unspoken history. What are characters really negotiating? What can't be said directly?\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Subtext\",\n    tags: [\"subtext\", \"layers\", \"complexity\", \"meaning\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Regional Dialect Authenticity\",\n    content: \"Use dialect authentically without stereotyping: capture speech rhythms and word choices rather than heavy phonetic spelling. Research regional expressions. When is dialect overkill?\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Dialect & Accent\",\n    tags: [\"dialect\", \"authenticity\", \"region\", \"respect\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Strategic Silence in Dialogue\",\n    content: \"Use silence powerfully in dialogue: what goes unsaid, pregnant pauses, someone refusing to answer. Silence can speak louder than words. Where would silence increase tension?\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Subtext\",\n    tags: [\"silence\", \"pauses\", \"tension\", \"unsaid\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Verbal Sparring and Wit\",\n    content: \"Write sharp verbal sparring: quick comebacks, intellectual jousting, witty banter. Show characters' intelligence and chemistry through wordplay. Balance wit with genuine emotion.\",\n    category: \"Dialogue & Voice\",\n    subcategory: \"Conflict Dialogue\",\n    tags: [\"banter\", \"wit\", \"sparring\", \"chemistry\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n\n  // ==================== SCENE WRITING & DESCRIPTION (100 prompts) ====================\n  \n  {\n    title: \"Five Senses Immersion\",\n    content: \"Revise this scene using all five senses. What does [character] see, hear, smell, taste, and touch? Ground readers in the physical experience of the moment.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Sensory Details\",\n    tags: [\"five senses\", \"immersion\", \"sensory\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Show Don't Tell Transformation\",\n    content: \"Find every instance of telling in this scene (she was angry, it was beautiful, he felt sad). Replace with specific actions, dialogue, and details that show these states.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Show Don't Tell\",\n    tags: [\"show don't tell\", \"concrete\", \"specific\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Setting as Character\",\n    content: \"Develop [setting] until it feels like a character. What personality does this place have? How does it affect the mood and the characters? Make it active in the scene.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Setting\",\n    tags: [\"setting\", \"atmosphere\", \"character\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Entering a New Space\",\n    content: \"Write [character] entering [new location] for the first time. What draws their attention? What details reveal the space's purpose, history, and mood? Filter through character's POV.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Setting\",\n    tags: [\"entering\", \"new space\", \"POV\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Weather and Atmosphere\",\n    content: \"Use weather to enhance mood without being obvious. How does rain, heat, cold, or storms affect character behavior and scene atmosphere? Make weather matter.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Atmosphere\",\n    tags: [\"weather\", \"mood\", \"atmosphere\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Time of Day Establishment\",\n    content: \"Establish time of day through specific details: light quality, sounds, character energy, what's open/closed. Make readers feel the hour without stating it.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Setting\",\n    tags: [\"time of day\", \"light\", \"atmosphere\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Action Sequence Clarity\",\n    content: \"Write an action sequence readers can follow. Use short sentences, clear choreography, and concrete verbs. Keep readers oriented in space. Build momentum.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Action\",\n    tags: [\"action\", \"clarity\", \"choreography\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Fight Scene Choreography\",\n    content: \"Choreograph a fight scene. Track where each character is. Use varied sentence length for pacing. Show tactics, mistakes, injuries. Make readers feel the physical reality.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Action\",\n    tags: [\"fight\", \"choreography\", \"physical\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Slow Motion Moment\",\n    content: \"Write a crucial moment in slow motion. Expand time through detail, sensory input, and internal thought. Show the character hyper-aware of every detail.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Techniques\",\n    tags: [\"slow motion\", \"time\", \"detail\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Fast-Paced Action\",\n    content: \"Write rapid action. Use short sentences, active verbs, and cut description to essentials. Create breathless pace through sentence structure and word choice.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Action\",\n    tags: [\"fast-paced\", \"momentum\", \"action\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Quiet Scene Tension\",\n    content: \"Create tension in a quiet scene. Use subtext, what characters notice, small details that hint at danger or emotion. Make stillness suspenseful.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Tension\",\n    tags: [\"quiet\", \"tension\", \"subtext\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Scene Opening Hook\",\n    content: \"Start this scene in the middle of action or with a compelling image/line. Cut setup. Drop readers into the moment. Earn their attention immediately.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Structure\",\n    tags: [\"opening\", \"hook\", \"beginning\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Scene Ending Impact\",\n    content: \"End this scene with impact: revelation, decision, question, or image that propels readers forward. Avoid trailing off. Make them need the next scene.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Structure\",\n    tags: [\"ending\", \"impact\", \"hook\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Transition Between Scenes\",\n    content: \"Craft a smooth transition from previous scene. Use time jump, location change, or POV shift clearly. Orient readers quickly without boring exposition.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Transitions\",\n    tags: [\"transition\", \"scene break\", \"clarity\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Flashback Integration\",\n    content: \"Integrate this flashback smoothly. Use a clear trigger from present. Make it essential, not just backstory dump. Return to present with new understanding.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Transitions\",\n    tags: [\"flashback\", \"integration\", \"past\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Point of View Consistency\",\n    content: \"Check POV consistency. Are you staying in [character]'s head? Do you describe only what they'd notice? Remove any head-hopping or author intrusion.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"POV\",\n    tags: [\"POV\", \"consistency\", \"perspective\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Character Observation Filter\",\n    content: \"Filter all description through [character]'s unique perspective. What would they notice based on their profession, fears, desires? Make description character-revealing.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"POV\",\n    tags: [\"filter\", \"character\", \"perspective\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Specific Concrete Details\",\n    content: \"Replace vague description with specific concrete details. Instead of 'old building,' describe chipped paint color, specific architectural features, actual age. Make it real.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Specificity\",\n    tags: [\"specific\", \"concrete\", \"vivid\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Metaphor and Simile Power\",\n    content: \"Create a powerful metaphor or simile that's fresh and fits [character]'s voice. Avoid clichés. Make comparisons illuminating and character-specific.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Language\",\n    tags: [\"metaphor\", \"simile\", \"comparison\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Cliché Elimination\",\n    content: \"Find and eliminate clichéd descriptions. Replace 'eyes like ice,' 'heart pounding,' 'blood ran cold' with fresh, specific observations.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Language\",\n    tags: [\"cliché\", \"fresh\", \"original\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Active Voice Strength\",\n    content: \"Convert passive voice to active. Make sentences more direct and powerful. Keep passive only when you specifically need to obscure actor or create distance.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Language\",\n    tags: [\"active voice\", \"passive voice\", \"strength\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Strong Verb Choice\",\n    content: \"Replace weak verbs + adverbs with single strong verbs. 'Walked quickly' becomes 'hurried' or 'rushed.' Cut filter words like 'saw,' 'felt,' 'heard.'\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Language\",\n    tags: [\"verbs\", \"strong\", \"concise\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Sentence Length Variation\",\n    content: \"Vary sentence length for rhythm. Mix short punchy sentences with longer flowing ones. Use structure to control pacing and emphasis.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Craft\",\n    tags: [\"sentence length\", \"rhythm\", \"pacing\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Paragraph Length Pacing\",\n    content: \"Vary paragraph length. Short paragraphs speed up, long paragraphs slow down. Use white space strategically. Break up walls of text.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Craft\",\n    tags: [\"paragraphs\", \"white space\", \"pacing\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Emotional Landscape\",\n    content: \"Describe the setting in a way that reflects [character]'s emotional state. Let the world mirror or contrast their inner reality. Make description do double duty.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Mood\",\n    tags: [\"emotion\", \"landscape\", \"reflection\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Contrast and Juxtaposition\",\n    content: \"Create impact through contrast: beauty and horror, silence and noise, light and dark. Place opposites together to heighten both.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Techniques\",\n    tags: [\"contrast\", \"juxtaposition\", \"impact\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Symbolic Details\",\n    content: \"Choose details that work literally but also symbolically. What object, color, or image can represent the scene's emotional truth or thematic meaning?\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Symbolism\",\n    tags: [\"symbols\", \"theme\", \"layers\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Revealing Character Through Setting\",\n    content: \"Describe [character]'s home/workspace to reveal personality. What do they keep, display, hide? Let possessions and organization tell their story.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Character\",\n    tags: [\"character\", \"setting\", \"revelation\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Body Language Specificity\",\n    content: \"Show [character]'s emotion through specific body language. Not just 'nervous' but: fingers drumming specific rhythm, shifting weight foot to foot, jaw muscle twitching.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Character\",\n    tags: [\"body language\", \"nonverbal\", \"specific\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Facial Expression Nuance\",\n    content: \"Describe facial expressions with precision. What specific muscles move? How do eyes change? Show micro-expressions that reveal truth beneath the mask.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Character\",\n    tags: [\"facial expression\", \"emotion\", \"nuance\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Physical Pain Description\",\n    content: \"Describe pain without clichés. Where exactly does it hurt? What does it feel like (sharp, dull, burning)? How does it affect movement and thought?\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Sensory\",\n    tags: [\"pain\", \"physical\", \"sensory\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Exhaustion Physical Reality\",\n    content: \"Show exhaustion through physical details: heavy limbs, blurred vision, sluggish thoughts, clumsy movements. Make readers feel the bone-deep tiredness.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Sensory\",\n    tags: [\"exhaustion\", \"physical\", \"state\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Adrenaline Rush\",\n    content: \"Describe the adrenaline rush: heightened senses, time distortion, physical shakiness, hyperawareness. Show the body's fight-or-flight response.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Sensory\",\n    tags: [\"adrenaline\", \"physical\", \"heightened\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Smell and Memory\",\n    content: \"Use smell to trigger memory or emotion. What specific scent transports [character]? Make the connection visceral and immediate.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Sensory Details\",\n    tags: [\"smell\", \"memory\", \"emotion\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Sound Design\",\n    content: \"Layer sounds in this scene: background ambient noise, specific sharp sounds, rhythm and pattern. Create rich audio landscape. Use onomatopoeia sparingly.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Sensory Details\",\n    tags: [\"sound\", \"audio\", \"layers\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Texture and Touch\",\n    content: \"Describe textures [character] encounters: rough, smooth, sticky, soft. How does touch inform their understanding? Make the world tactile.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Sensory Details\",\n    tags: [\"texture\", \"touch\", \"tactile\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Taste Description\",\n    content: \"Describe taste beyond sweet/sour/bitter/salty. What specific flavors? What associations? How does taste create mood or memory?\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Sensory Details\",\n    tags: [\"taste\", \"flavor\", \"sensory\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Color Psychology\",\n    content: \"Use color deliberately. What emotional associations does this color have? How does color palette affect scene mood? Be specific about shades.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Visual\",\n    tags: [\"color\", \"psychology\", \"mood\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Light and Shadow\",\n    content: \"Use light and shadow to create mood and direct attention. Where does light fall? What's in shadow? How does lighting change the space?\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Visual\",\n    tags: [\"light\", \"shadow\", \"mood\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Crowd Scene Clarity\",\n    content: \"Write a crowd scene without overwhelming readers. Focus on specific individuals and moments. Use representative details to suggest the mass.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Complex Scenes\",\n    tags: [\"crowd\", \"clarity\", \"focus\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Party or Gathering Scene\",\n    content: \"Write a party scene with energy and specificity. Show multiple conversations, movement, sensory overload. Keep protagonist's thread clear through chaos.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Complex Scenes\",\n    tags: [\"party\", \"gathering\", \"energy\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Chase Scene Momentum\",\n    content: \"Write a chase with mounting urgency. Show obstacles, near-misses, changing terrain. Use short sentences. Keep geography clear. Build to resolution.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Action\",\n    tags: [\"chase\", \"momentum\", \"urgency\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Love Scene Intimacy\",\n    content: \"Write intimacy that's emotional and physical without being clinical or purple. Focus on sensation, emotion, connection. Respect your audience and characters.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Intimate Scenes\",\n    tags: [\"intimacy\", \"love scene\", \"emotion\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"First Kiss Description\",\n    content: \"Describe a first kiss: anticipation, the moment of contact, sensory details, emotional impact. Make it specific to these characters, not generic.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Intimate Scenes\",\n    tags: [\"first kiss\", \"romance\", \"sensory\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Violence Impact\",\n    content: \"Describe violence with impact but not gratuitous detail. Show consequences, pain, and reality. Avoid glorification. Make readers feel the weight.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Action\",\n    tags: [\"violence\", \"consequences\", \"impact\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Wound and Injury Realism\",\n    content: \"Describe wounds realistically. Research actual injury mechanics. Show pain, blood loss, shock. Don't let characters ignore serious injuries.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Physical\",\n    tags: [\"injury\", \"wounds\", \"realism\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Meal Scene Purpose\",\n    content: \"Write a meal scene that does more than show eating. Use food to reveal culture, tension, intimacy, or conflict. Make the meal matter to plot or character.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Daily Life\",\n    tags: [\"meal\", \"food\", \"purpose\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Morning Routine Characterization\",\n    content: \"Show [character]'s morning routine revealing personality. What do they do first? What do they avoid? How does routine reveal character?\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Daily Life\",\n    tags: [\"morning\", \"routine\", \"character\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Travel Scene Efficiency\",\n    content: \"Handle travel without boring transit scenes. Use chapter breaks, summary, or make the journey significant. Don't waste words on getting from A to B unless it matters.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Transitions\",\n    tags: [\"travel\", \"efficiency\", \"pacing\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Dream Sequence Purpose\",\n    content: \"If using a dream sequence, make it essential. Reveal subconscious, foreshadow, or character insight. Signal clearly it's a dream. Keep it brief and purposeful.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Special Sequences\",\n    tags: [\"dream\", \"purpose\", \"subconscious\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Nightmare Visceral Reality\",\n    content: \"Write a nightmare that feels visceral and real to the character. Show sleep paralysis, fear upon waking, lingering unease. Make it affect them after.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Special Sequences\",\n    tags: [\"nightmare\", \"fear\", \"visceral\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Nature Description Freshness\",\n    content: \"Describe nature without clichés. Find specific details others miss. Let character's expertise or ignorance color observations. Avoid generic beauty.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Setting\",\n    tags: [\"nature\", \"fresh\", \"specific\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Urban Environment Energy\",\n    content: \"Capture city energy: noise, movement, diverse people, smells, vertical space. Make the urban setting a character with personality.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Setting\",\n    tags: [\"urban\", \"city\", \"energy\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Rural Setting Authenticity\",\n    content: \"Describe rural settings with authenticity, not pastoral cliché. Show working landscape, practical realities, specific regional details.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Setting\",\n    tags: [\"rural\", \"authentic\", \"specific\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Historical Setting Research\",\n    content: \"Ground your [time period] setting in research. Include specific details of daily life, technology, social norms. Make period feel lived-in, not museum display.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Setting\",\n    tags: [\"historical\", \"research\", \"authentic\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Futuristic Setting Grounding\",\n    content: \"Make future settings feel real through specific details: how technology works, what changed and what didn't, sensory details. Ground sci-fi in physical reality.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Setting\",\n    tags: [\"futuristic\", \"sci-fi\", \"grounding\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Fantasy Setting Logic\",\n    content: \"Make fantasy settings feel real through internal logic and specific details. How does magic affect daily life? What smells, sounds, textures exist here?\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Setting\",\n    tags: [\"fantasy\", \"logic\", \"sensory\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Claustrophobic Space\",\n    content: \"Create claustrophobic atmosphere through description: close walls, limited air, restricted movement, pressing darkness. Make readers feel trapped.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Atmosphere\",\n    tags: [\"claustrophobic\", \"confined\", \"atmosphere\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Vast Open Space\",\n    content: \"Convey vastness through scale, distance, emptiness. Show character's smallness. Use perspective and specific far-off details.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Atmosphere\",\n    tags: [\"vast\", \"open\", \"scale\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Creepy Atmosphere Building\",\n    content: \"Build creepy atmosphere without cliché: use specific unsettling details, character's growing unease, what's almost seen, sounds without source.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Atmosphere\",\n    tags: [\"creepy\", \"atmosphere\", \"horror\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Cozy Comfortable Setting\",\n    content: \"Create cozy atmosphere through specific comforting details: warmth source, soft textures, pleasant smells, safety feeling. Make readers want to be there.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Atmosphere\",\n    tags: [\"cozy\", \"comfort\", \"warm\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Oppressive Heat\",\n    content: \"Make readers feel oppressive heat: sweat, sluggish movement, shimmering air, desperate search for shade, irritability. Physical and mental effects.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Atmosphere\",\n    tags: [\"heat\", \"oppressive\", \"physical\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Bitter Cold Description\",\n    content: \"Convey dangerous cold: numbing extremities, painful breathing, frost formation, shivering, clouded thinking. Show survival struggle.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Atmosphere\",\n    tags: [\"cold\", \"bitter\", \"survival\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Storm Scene Power\",\n    content: \"Write a storm with power and danger: wind force, lightning, thunder, rain intensity, destruction. Show character's vulnerability against nature.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Atmosphere\",\n    tags: [\"storm\", \"power\", \"danger\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Underwater Scene\",\n    content: \"Describe underwater scene: pressure, muffled sound, light quality, movement resistance, breathing apparatus. Make readers feel submerged.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Special Environments\",\n    tags: [\"underwater\", \"sensory\", \"unique\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Fire Scene Intensity\",\n    content: \"Write a fire scene: heat waves, smoke thickness, light and shadow dance, sound of burning, destruction spreading. Show panic and urgency.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Special Sequences\",\n    tags: [\"fire\", \"intensity\", \"danger\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Abandoned Place Desolation\",\n    content: \"Describe abandoned location: decay signs, silence, dust, nature reclaiming, objects left behind telling stories. Create eerie atmosphere.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Setting\",\n    tags: [\"abandoned\", \"desolate\", \"eerie\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Bustling Market Scene\",\n    content: \"Capture market energy: vendor calls, smell layers, visual chaos, haggling, diversity of people and goods. Make it overwhelming but specific.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Complex Scenes\",\n    tags: [\"market\", \"bustling\", \"sensory\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Hospital Setting Details\",\n    content: \"Ground hospital scenes in specific details: antiseptic smell, fluorescent lights, sounds (monitors, intercoms), clinical atmosphere. Avoid generic hospital.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Setting\",\n    tags: [\"hospital\", \"medical\", \"specific\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Courtroom Scene Atmosphere\",\n    content: \"Capture courtroom atmosphere: formal space, ritual and procedure, tension, observation. Show power dynamics through physical space.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Setting\",\n    tags: [\"courtroom\", \"formal\", \"tension\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"School Setting Authenticity\",\n    content: \"Make school setting feel real: specific sounds, smells, social dynamics, physical space. Update from your own school experience—things change.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Setting\",\n    tags: [\"school\", \"authentic\", \"social\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Workplace Environment\",\n    content: \"Describe [workplace] through specific details of that profession: tools, terminology, rhythms, hierarchy. Make it feel like real work happens here.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Setting\",\n    tags: [\"workplace\", \"profession\", \"authentic\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Prison or Confined Setting\",\n    content: \"Convey prison/confinement through: limited space, controlled routine, observation, loss of autonomy. Show psychological and physical reality.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Setting\",\n    tags: [\"prison\", \"confined\", \"psychological\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Luxury vs. Poverty Contrast\",\n    content: \"Show economic disparity through specific setting details. Avoid stereotypes. Show actual lived experience of wealth or poverty through concrete details.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Setting\",\n    tags: [\"class\", \"contrast\", \"social\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Vehicle Interior Scene\",\n    content: \"Write scene set in vehicle (car, train, plane): confined space, motion feeling, outside world passing, forced proximity, specific vehicle details.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Setting\",\n    tags: [\"vehicle\", \"confined\", \"motion\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Religious Space Atmosphere\",\n    content: \"Capture religious space (church, temple, mosque) through: architecture, light quality, sound, ritual, reverence or irreverence. Respect the tradition.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Setting\",\n    tags: [\"religious\", \"sacred\", \"atmosphere\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Cemetery or Graveyard\",\n    content: \"Describe cemetery beyond clichés: specific monuments, landscape, weather, time of day, why character is there. Make it meaningful, not stock spooky.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Setting\",\n    tags: [\"cemetery\", \"death\", \"setting\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Celebration Scene Energy\",\n    content: \"Capture celebration energy (wedding, festival, victory): joy, music, movement, food, decorations. Show cultural specificity. Make it feel alive.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Complex Scenes\",\n    tags: [\"celebration\", \"joy\", \"cultural\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Funeral Scene Weight\",\n    content: \"Write funeral scene with weight and respect: grief variations, ritual, specific details of this culture's practices, what's said and unsaid.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Complex Scenes\",\n    tags: [\"funeral\", \"grief\", \"ritual\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Birth Scene Intensity\",\n    content: \"Describe birth with intensity and reality: pain, effort, medical details, emotions, first moments. Research for accuracy. Show the magnitude.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Special Sequences\",\n    tags: [\"birth\", \"intensity\", \"life\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Death Scene Impact\",\n    content: \"Write a death scene with impact: final moments, body's shutting down, last words or silence, witnesses' reactions. Make it matter.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Special Sequences\",\n    tags: [\"death\", \"impact\", \"finality\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Revelation Moment Description\",\n    content: \"Describe the moment of revelation: how character's face changes, world shifts, breath catches. Slow time to show realization dawning.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Emotional Moments\",\n    tags: [\"revelation\", \"realization\", \"moment\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Heartbreak Physical Reality\",\n    content: \"Show heartbreak physically: chest pain, inability to eat, exhaustion, crying, numbness. Make emotional pain viscerally real.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Emotional Moments\",\n    tags: [\"heartbreak\", \"physical\", \"pain\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Joy Physical Expression\",\n    content: \"Show pure joy through body: lightness, energy, smile that won't stop, laughter, tears of happiness. Make happiness physical.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Emotional Moments\",\n    tags: [\"joy\", \"happiness\", \"physical\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Terror and Fear Description\",\n    content: \"Convey terror: racing heart, cold sweat, hyperventilation, shaking, rational thought fleeing. Show fight-flight-freeze response.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Emotional Moments\",\n    tags: [\"terror\", \"fear\", \"physical\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Rage Physical Manifestation\",\n    content: \"Show rage building: flushing face, clenched muscles, shaking, hot flash, control snapping. Make anger visceral and building.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Emotional Moments\",\n    tags: [\"rage\", \"anger\", \"physical\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Peace and Calm Moment\",\n    content: \"Create a moment of peace: tension releasing, breath deepening, awareness of beauty, present moment. Give readers and characters breathing room.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Emotional Moments\",\n    tags: [\"peace\", \"calm\", \"rest\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Drunkenness or Altered State\",\n    content: \"Show altered consciousness: changed perception, impaired coordination, emotional volatility, time distortion. Make the state clear without explanation.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Character State\",\n    tags: [\"drunk\", \"altered\", \"perception\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Illness Believability\",\n    content: \"Make illness real: specific symptoms, how it limits character, progression or recovery. Research actual illnesses. Show impact on daily life.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Physical State\",\n    tags: [\"illness\", \"sick\", \"realistic\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Hunger Impact\",\n    content: \"Show hunger's effects: physical weakness, obsessive food thoughts, irritability, stomach pain. Make deprivation real.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Physical State\",\n    tags: [\"hunger\", \"deprivation\", \"physical\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Sensory Overload\",\n    content: \"Convey sensory overload: too much input, inability to filter, overwhelm, need to escape. Show what neurodivergent characters or anyone in crisis might experience.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Sensory\",\n    tags: [\"overload\", \"overwhelm\", \"sensory\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Sensory Deprivation\",\n    content: \"Show sensory deprivation: darkness, silence, numbness, disorientation, time loss. Make the absence of sensation palpable.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Sensory\",\n    tags: [\"deprivation\", \"absence\", \"sensory\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Description Economy\",\n    content: \"Cut description to essentials. Every detail should reveal character, mood, or plot. Remove pretty but purposeless description.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Craft\",\n    tags: [\"economy\", \"cutting\", \"purpose\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Opening Description Hook\",\n    content: \"Start with description that hooks: unusual detail, contrast, question raised, mood established. Make first descriptive paragraph earn its place.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Craft\",\n    tags: [\"opening\", \"hook\", \"description\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Description Pacing\",\n    content: \"Balance description with action and dialogue. Don't stop the story for paragraphs of description. Weave description into movement and thought.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Craft\",\n    tags: [\"pacing\", \"balance\", \"integration\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Fresh Perspective Technique\",\n    content: \"Make description fresh by using unexpected comparisons, character-specific observations, unique details. Avoid first thoughts—dig deeper.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Craft\",\n    tags: [\"fresh\", \"original\", \"unique\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Emotional Truth in Description\",\n    content: \"Let emotional truth guide description choices. Include details that matter to POV character in this emotional state. Skip what they wouldn't notice.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Craft\",\n    tags: [\"emotional truth\", \"selective\", \"POV\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Scene Purpose Check\",\n    content: \"Does this scene advance plot, develop character, or explore theme? If not, cut or revise. Every scene must earn its place.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Structure\",\n    tags: [\"purpose\", \"necessity\", \"efficiency\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Weather as Mood Amplifier\",\n    content: \"Use weather to amplify scene mood: stormy conflict, oppressive heat during tension, cold during isolation. Avoid clichés—make weather choices fresh and specific to your world and character's perception.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Atmosphere\",\n    tags: [\"weather\", \"mood\", \"atmosphere\", \"pathetic fallacy\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Action Scene Choreography\",\n    content: \"Choreograph action clearly: who is where, what happens in what order, cause and effect. Use short sentences for speed, specific verbs for clarity. Can readers visualize the fight/chase/escape?\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Action Scenes\",\n    tags: [\"action\", \"choreography\", \"clarity\", \"pacing\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Intimate Moment Pacing\",\n    content: \"Slow down intimate moments: emotional revelations, first kisses, quiet connections. Use sensory details, internal thoughts, and stretched time. Make these moments feel earned and significant.\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Emotional Scenes\",\n    tags: [\"intimacy\", \"pacing\", \"emotion\", \"romance\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Urban vs Rural Setting Voice\",\n    content: \"Capture distinct voices for urban vs rural settings: pace, sound, light, social dynamics. City: crowds, noise, anonymity. Rural: space, quiet, community. How does setting shape character perspective?\",\n    category: \"Scene Writing & Description\",\n    subcategory: \"Setting\",\n    tags: [\"urban\", \"rural\", \"setting\", \"atmosphere\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n\n  \n  // ==================== WORLDBUILDING (100 prompts) ====================\n  \n  // Magic Systems\n  {\n    title: \"Fantasy Magic System Design\",\n    content: \"Design a unique magic system for your fantasy world. Consider: 1) What is the source of magic? 2) What are the costs/limitations? 3) Who can use it and how is it learned? 4) How does it affect society and conflict?\",\n    category: \"Worldbuilding\",\n    subcategory: \"Magic Systems\",\n    tags: [\"magic\", \"fantasy\", \"worldbuilding\", \"systems\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Magic System Limitations\",\n    content: \"Every magic system needs clear limitations. What can't magic do in your world? What's the cost (physical, mental, magical)? What happens when these limits are pushed?\",\n    category: \"Worldbuilding\",\n    subcategory: \"Magic Systems\",\n    tags: [\"magic\", \"limitations\", \"cost\", \"rules\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Magic and Society Integration\",\n    content: \"How has magic shaped your world's society? What industries exist because of it? What's illegal? How do non-magic users fit in? What conflicts arise from magic's existence?\",\n    category: \"Worldbuilding\",\n    subcategory: \"Magic Systems\",\n    tags: [\"magic\", \"society\", \"integration\", \"worldbuilding\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Magical Education System\",\n    content: \"How is magic taught in your world? Who has access to training? What are the different schools or traditions? What happens to untrained magic users?\",\n    category: \"Worldbuilding\",\n    subcategory: \"Magic Systems\",\n    tags: [\"magic\", \"education\", \"training\", \"systems\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Hard vs. Soft Magic Balance\",\n    content: \"Is your magic system hard (strict rules) or soft (mysterious)? How much do your characters and readers need to understand? Where does wonder meet logic?\",\n    category: \"Worldbuilding\",\n    subcategory: \"Magic Systems\",\n    tags: [\"magic\", \"hard magic\", \"soft magic\", \"rules\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  \n  // Historical Settings\n  {\n    title: \"Historical Accuracy Research\",\n    content: \"For your [time period] setting, research: 1) Daily life and routines, 2) Social hierarchies and customs, 3) Technology and limitations, 4) Common misconceptions to avoid. List 5 surprising historical facts that will enrich your story.\",\n    category: \"Worldbuilding\",\n    subcategory: \"Historical Settings\",\n    tags: [\"historical\", \"research\", \"accuracy\", \"period\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Period-Appropriate Language\",\n    content: \"How will you capture the flavor of [time period] without alienating modern readers? What anachronistic words must you avoid? What period vocabulary can you sprinkle in?\",\n    category: \"Worldbuilding\",\n    subcategory: \"Historical Settings\",\n    tags: [\"historical\", \"language\", \"dialogue\", \"authenticity\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Historical Daily Life Details\",\n    content: \"What did people in [time period] eat, wear, and do for entertainment? How did they handle hygiene, health, and household tasks? Ground your story in authentic daily details.\",\n    category: \"Worldbuilding\",\n    subcategory: \"Historical Settings\",\n    tags: [\"historical\", \"daily life\", \"authenticity\", \"details\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Historical Social Constraints\",\n    content: \"What were the social rules and expectations in [time period]? Who had power? What was forbidden? How did people rebel or work within these constraints?\",\n    category: \"Worldbuilding\",\n    subcategory: \"Historical Settings\",\n    tags: [\"historical\", \"social rules\", \"constraints\", \"society\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Alternate History Divergence\",\n    content: \"If writing alternate history, identify your divergence point. What historical event changed? How did this ripple through society, technology, and culture? Make the consequences logical.\",\n    category: \"Worldbuilding\",\n    subcategory: \"Historical Settings\",\n    tags: [\"alternate history\", \"divergence\", \"consequences\", \"worldbuilding\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  \n  // Social Structures & Cultures\n  {\n    title: \"Cultural Values System\",\n    content: \"Define the core values of [culture/society] in your world. What do they prize most (honor, wealth, knowledge, community)? How do these values create conflict with other cultures or individuals?\",\n    category: \"Worldbuilding\",\n    subcategory: \"Social Structures\",\n    tags: [\"culture\", \"values\", \"society\", \"worldbuilding\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Class and Hierarchy Design\",\n    content: \"Map out the social hierarchy in your world. Who has power and why? How is class determined (birth, wealth, ability, merit)? How do people move between classes?\",\n    category: \"Worldbuilding\",\n    subcategory: \"Social Structures\",\n    tags: [\"class\", \"hierarchy\", \"power\", \"social structure\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Cultural Rituals and Traditions\",\n    content: \"Create meaningful rituals for [culture]. Consider: coming-of-age ceremonies, marriage customs, death rites, seasonal celebrations. How do these reveal values and create story moments?\",\n    category: \"Worldbuilding\",\n    subcategory: \"Social Structures\",\n    tags: [\"rituals\", \"traditions\", \"culture\", \"customs\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Gender Roles and Expectations\",\n    content: \"What are the gender roles in your world? Are they rigid or fluid? How do characters conform or rebel? What's the history behind these expectations?\",\n    category: \"Worldbuilding\",\n    subcategory: \"Social Structures\",\n    tags: [\"gender\", \"roles\", \"society\", \"expectations\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Family Structure Variations\",\n    content: \"How are families structured in your world? Nuclear, extended, communal? How does this affect child-rearing, inheritance, and loyalty? What happens to those without family?\",\n    category: \"Worldbuilding\",\n    subcategory: \"Social Structures\",\n    tags: [\"family\", \"structure\", \"society\", \"kinship\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Cultural Taboos and Forbidden Acts\",\n    content: \"What is absolutely forbidden in [culture]? What actions bring shame or exile? How do characters navigate or violate these taboos for dramatic tension?\",\n    category: \"Worldbuilding\",\n    subcategory: \"Social Structures\",\n    tags: [\"taboos\", \"forbidden\", \"culture\", \"rules\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Multicultural Conflict and Cooperation\",\n    content: \"How do different cultures in your world interact? What do they trade, fight over, or share? Where do cultural misunderstandings create conflict or comedy?\",\n    category: \"Worldbuilding\",\n    subcategory: \"Social Structures\",\n    tags: [\"multicultural\", \"conflict\", \"cooperation\", \"cultures\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Education and Knowledge Systems\",\n    content: \"How is knowledge preserved and transmitted in your world? Who has access to education? What subjects are valued? How does literacy (or lack thereof) affect power?\",\n    category: \"Worldbuilding\",\n    subcategory: \"Social Structures\",\n    tags: [\"education\", \"knowledge\", \"literacy\", \"society\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  \n  // Technology & Advancement\n  {\n    title: \"Technology Level Consistency\",\n    content: \"Define your world's technology level. Ensure consistency: if they have X technology, what else would they logically have? What haven't they invented yet and why?\",\n    category: \"Worldbuilding\",\n    subcategory: \"Technology\",\n    tags: [\"technology\", \"consistency\", \"logic\", \"worldbuilding\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Sci-Fi Technology Rules\",\n    content: \"For your [specific technology], establish: 1) How it works (in simple terms), 2) What it can't do, 3) Who controls it, 4) How it's changed society. Make it feel real through limitations.\",\n    category: \"Worldbuilding\",\n    subcategory: \"Technology\",\n    tags: [\"sci-fi\", \"technology\", \"rules\", \"systems\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Communication Technology Impact\",\n    content: \"How do people communicate in your world? Fast or slow? Reliable or not? How does this affect plot pacing, misunderstandings, and information control?\",\n    category: \"Worldbuilding\",\n    subcategory: \"Technology\",\n    tags: [\"communication\", \"technology\", \"plot\", \"worldbuilding\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Transportation and Distance\",\n    content: \"How do people travel in your world? How long does it take? How dangerous is it? Use transportation limitations to create isolation, urgency, or adventure.\",\n    category: \"Worldbuilding\",\n    subcategory: \"Technology\",\n    tags: [\"transportation\", \"travel\", \"distance\", \"worldbuilding\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Medical Technology and Healing\",\n    content: \"What medical knowledge exists in your world? How are injuries and illnesses treated? What's fatal vs. survivable? How does this affect your plot stakes?\",\n    category: \"Worldbuilding\",\n    subcategory: \"Technology\",\n    tags: [\"medical\", \"healing\", \"technology\", \"stakes\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Weapons and Warfare Technology\",\n    content: \"What weapons exist in your world? How has military technology shaped borders, power, and conflict? What's the most devastating weapon, and who controls it?\",\n    category: \"Worldbuilding\",\n    subcategory: \"Technology\",\n    tags: [\"weapons\", \"warfare\", \"military\", \"technology\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"AI and Automation Ethics\",\n    content: \"If your world has AI or automation, explore: What jobs were lost? What new ones emerged? How do humans and AI interact? What ethical debates exist?\",\n    category: \"Worldbuilding\",\n    subcategory: \"Technology\",\n    tags: [\"AI\", \"automation\", \"ethics\", \"sci-fi\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Energy Sources and Power\",\n    content: \"What powers your world? Magic, technology, renewable energy, fossil fuels? Who controls energy sources? What conflicts arise from energy scarcity or abundance?\",\n    category: \"Worldbuilding\",\n    subcategory: \"Technology\",\n    tags: [\"energy\", \"power\", \"resources\", \"worldbuilding\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  \n  // Geography & Environments\n  {\n    title: \"World Geography Map\",\n    content: \"Sketch your world's geography. Where are mountains, rivers, oceans, deserts? How do these features affect climate, trade routes, and which civilizations thrive where?\",\n    category: \"Worldbuilding\",\n    subcategory: \"Geography\",\n    tags: [\"geography\", \"map\", \"world\", \"environment\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Climate and Weather Patterns\",\n    content: \"What's the climate in your story's setting? How does weather affect daily life, agriculture, and plot events? Use weather as more than backdrop—make it a force.\",\n    category: \"Worldbuilding\",\n    subcategory: \"Geography\",\n    tags: [\"climate\", \"weather\", \"environment\", \"worldbuilding\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Natural Resources and Economy\",\n    content: \"What natural resources exist in each region? What's scarce vs. abundant? How does this drive trade, wealth disparity, and conflict between regions or nations?\",\n    category: \"Worldbuilding\",\n    subcategory: \"Geography\",\n    tags: [\"resources\", \"economy\", \"trade\", \"geography\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Unique Ecosystem Design\",\n    content: \"Create a unique ecosystem for your world. What unusual plants or animals exist? How have inhabitants adapted? What dangers or opportunities does this environment present?\",\n    category: \"Worldbuilding\",\n    subcategory: \"Geography\",\n    tags: [\"ecosystem\", \"environment\", \"creatures\", \"worldbuilding\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Urban vs. Rural Divide\",\n    content: \"Contrast urban and rural areas in your world. How do they differ in culture, technology, values? What tensions exist between city and country?\",\n    category: \"Worldbuilding\",\n    subcategory: \"Geography\",\n    tags: [\"urban\", \"rural\", \"divide\", \"society\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Borders and Territories\",\n    content: \"How are borders defined in your world? Natural boundaries, treaties, or contested lines? What happens at borders? Who guards them and why?\",\n    category: \"Worldbuilding\",\n    subcategory: \"Geography\",\n    tags: [\"borders\", \"territories\", \"geography\", \"conflict\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Sacred or Forbidden Places\",\n    content: \"Identify a location that's sacred, forbidden, or mysterious in your world. Why is it special? Who can enter? What would happen if your characters went there?\",\n    category: \"Worldbuilding\",\n    subcategory: \"Geography\",\n    tags: [\"sacred\", \"forbidden\", \"location\", \"worldbuilding\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Harsh Environment Survival\",\n    content: \"If your setting has a harsh environment (desert, arctic, underwater, space), detail how people survive there. What adaptations, technology, or magic makes life possible?\",\n    category: \"Worldbuilding\",\n    subcategory: \"Geography\",\n    tags: [\"harsh environment\", \"survival\", \"adaptation\", \"worldbuilding\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  \n  // Religion & Belief Systems\n  {\n    title: \"Religion and Deity System\",\n    content: \"Design the religion(s) in your world. Are gods real or believed? What do they represent? What do followers gain or sacrifice? How does faith affect politics and culture?\",\n    category: \"Worldbuilding\",\n    subcategory: \"Religion\",\n    tags: [\"religion\", \"gods\", \"faith\", \"worldbuilding\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Religious Conflict and Tolerance\",\n    content: \"How do different faiths coexist in your world? Is there religious tolerance or persecution? What wars or alliances formed over belief? How does this affect your characters?\",\n    category: \"Worldbuilding\",\n    subcategory: \"Religion\",\n    tags: [\"religion\", \"conflict\", \"tolerance\", \"worldbuilding\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Religious Practices and Rituals\",\n    content: \"What are the daily or ceremonial practices of [religion]? Prayer, sacrifice, pilgrimage? How do these rituals create story moments and reveal character faith?\",\n    category: \"Worldbuilding\",\n    subcategory: \"Religion\",\n    tags: [\"religion\", \"rituals\", \"practices\", \"worship\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Clergy and Religious Hierarchy\",\n    content: \"Who are the religious leaders in your world? How do they gain power? What corruption or purity exists? How do they influence politics and daily life?\",\n    category: \"Worldbuilding\",\n    subcategory: \"Religion\",\n    tags: [\"clergy\", \"hierarchy\", \"religious leaders\", \"power\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Faith vs. Doubt Character Journeys\",\n    content: \"Explore a character's relationship with faith. Are they devout, questioning, or atheist in a religious world? How does their belief journey parallel their character arc?\",\n    category: \"Worldbuilding\",\n    subcategory: \"Religion\",\n    tags: [\"faith\", \"doubt\", \"belief\", \"character\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Prophecy and Divine Will\",\n    content: \"If your world has prophecies or divine intervention, establish rules. How accurate are prophecies? Can they be changed? How do characters respond to feeling controlled by destiny?\",\n    category: \"Worldbuilding\",\n    subcategory: \"Religion\",\n    tags: [\"prophecy\", \"destiny\", \"divine will\", \"fate\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Afterlife and Death Beliefs\",\n    content: \"What happens after death in your world? Is there an afterlife, reincarnation, or nothing? How do these beliefs affect how characters face death and danger?\",\n    category: \"Worldbuilding\",\n    subcategory: \"Religion\",\n    tags: [\"afterlife\", \"death\", \"beliefs\", \"worldbuilding\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Secular vs. Religious Society\",\n    content: \"Is your world primarily religious or secular? How did it get this way? What tensions exist between faith-based and reason-based worldviews?\",\n    category: \"Worldbuilding\",\n    subcategory: \"Religion\",\n    tags: [\"secular\", \"religious\", \"society\", \"worldview\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  \n  // Government & Politics\n  {\n    title: \"Government System Design\",\n    content: \"What type of government rules your world (monarchy, democracy, theocracy, anarchy)? How did it come to power? What are its strengths and fatal flaws?\",\n    category: \"Worldbuilding\",\n    subcategory: \"Government\",\n    tags: [\"government\", \"politics\", \"power\", \"worldbuilding\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Law and Justice System\",\n    content: \"How are laws created and enforced in your world? What crimes exist? How are criminals caught and punished? Is justice fair or corrupt?\",\n    category: \"Worldbuilding\",\n    subcategory: \"Government\",\n    tags: [\"law\", \"justice\", \"crime\", \"punishment\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Political Factions and Intrigue\",\n    content: \"Map the political factions in your world. What does each group want? Who are the key players? What alliances and betrayals are possible?\",\n    category: \"Worldbuilding\",\n    subcategory: \"Government\",\n    tags: [\"politics\", \"factions\", \"intrigue\", \"power\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Rebellion and Revolution Potential\",\n    content: \"What would cause rebellion in your world? Who are the oppressed? What's the tipping point? Map the path from discontent to revolution.\",\n    category: \"Worldbuilding\",\n    subcategory: \"Government\",\n    tags: [\"rebellion\", \"revolution\", \"uprising\", \"conflict\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Taxation and Economy System\",\n    content: \"How does your government fund itself? Who pays taxes? What services are provided? How does economic policy affect different classes?\",\n    category: \"Worldbuilding\",\n    subcategory: \"Government\",\n    tags: [\"taxation\", \"economy\", \"government\", \"class\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  \n  // Economy & Trade\n  {\n    title: \"Currency and Trade Systems\",\n    content: \"What currency is used in your world? How is trade conducted? What goods are valuable? How does economy drive character motivations and plot?\",\n    category: \"Worldbuilding\",\n    subcategory: \"Economy\",\n    tags: [\"currency\", \"trade\", \"economy\", \"worldbuilding\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Wealth Distribution and Inequality\",\n    content: \"How is wealth distributed in your world? Who's rich, who's poor, and why? How does this inequality create conflict and affect characters' options?\",\n    category: \"Worldbuilding\",\n    subcategory: \"Economy\",\n    tags: [\"wealth\", \"inequality\", \"class\", \"economy\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Key Industries and Labor\",\n    content: \"What industries drive your world's economy? Mining, agriculture, magic, technology? Who works these jobs? What labor issues or innovations exist?\",\n    category: \"Worldbuilding\",\n    subcategory: \"Economy\",\n    tags: [\"industry\", \"labor\", \"economy\", \"work\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Black Markets and Crime Economy\",\n    content: \"What's illegal to buy or sell in your world? Who controls the black market? What criminal enterprises thrive, and how do they affect society?\",\n    category: \"Worldbuilding\",\n    subcategory: \"Economy\",\n    tags: [\"black market\", \"crime\", \"illegal\", \"economy\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Guilds and Professional Organizations\",\n    content: \"Do guilds or unions exist in your world? What professions are organized? How much power do they wield? How do they protect or exploit members?\",\n    category: \"Worldbuilding\",\n    subcategory: \"Economy\",\n    tags: [\"guilds\", \"unions\", \"professions\", \"organizations\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  \n  // History & Backstory\n  {\n    title: \"World History Timeline\",\n    content: \"Create a timeline of your world's major historical events. What wars, disasters, or golden ages shaped the present? How do characters reference or react to this history?\",\n    category: \"Worldbuilding\",\n    subcategory: \"History\",\n    tags: [\"history\", \"timeline\", \"backstory\", \"worldbuilding\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Creation Myth or Origin Story\",\n    content: \"What creation myth or origin story do people believe in your world? How does this shape their worldview and values? Is the myth true or metaphorical?\",\n    category: \"Worldbuilding\",\n    subcategory: \"History\",\n    tags: [\"creation myth\", \"origin\", \"mythology\", \"worldbuilding\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Recent Catalytic Event\",\n    content: \"What major event happened 5-50 years before your story begins? How did it change the world? How do different generations remember it differently?\",\n    category: \"Worldbuilding\",\n    subcategory: \"History\",\n    tags: [\"recent history\", \"catalytic event\", \"change\", \"worldbuilding\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Lost Civilization or Golden Age\",\n    content: \"Was there a lost civilization or golden age in your world's past? What remains? What knowledge was lost? How does this history create mystery or opportunity?\",\n    category: \"Worldbuilding\",\n    subcategory: \"History\",\n    tags: [\"lost civilization\", \"golden age\", \"ruins\", \"history\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Historical Figures and Legends\",\n    content: \"Who are the legendary heroes, villains, or leaders of your world's past? How are they remembered? How accurate are the legends vs. reality?\",\n    category: \"Worldbuilding\",\n    subcategory: \"History\",\n    tags: [\"legends\", \"historical figures\", \"heroes\", \"history\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  \n  // Worldbuilding Craft\n  {\n    title: \"Iceberg Theory of Worldbuilding\",\n    content: \"Build 10x more world than you show. Know the full iceberg, but only reveal the tip through natural story moments. Never info-dump—let readers discover.\",\n    category: \"Worldbuilding\",\n    subcategory: \"Craft\",\n    tags: [\"iceberg theory\", \"showing\", \"craft\", \"worldbuilding\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Natural Worldbuilding Integration\",\n    content: \"Integrate worldbuilding through: character assumptions, dialogue conflicts, sensory details, and moments of culture clash. Never stop the story to explain your world.\",\n    category: \"Worldbuilding\",\n    subcategory: \"Craft\",\n    tags: [\"integration\", \"showing\", \"craft\", \"natural\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Cultural Details Through Character\",\n    content: \"Reveal your world through character perspective. What does [character] find normal, strange, or frustrating about their world? Their reactions teach readers the rules.\",\n    category: \"Worldbuilding\",\n    subcategory: \"Craft\",\n    tags: [\"character perspective\", \"reveal\", \"craft\", \"worldbuilding\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Worldbuilding Conflict Creation\",\n    content: \"Every worldbuilding element should create potential conflict. Resources = scarcity fights. Technology = access inequality. Magic = power struggles. Build conflict into your world's DNA.\",\n    category: \"Worldbuilding\",\n    subcategory: \"Craft\",\n    tags: [\"conflict\", \"worldbuilding\", \"tension\", \"craft\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Avoiding Info-Dump\",\n    content: \"Cut exposition that doesn't serve immediate scene needs. Turn explanations into discoveries. Let characters be confused sometimes—readers can be too.\",\n    category: \"Worldbuilding\",\n    subcategory: \"Craft\",\n    tags: [\"info-dump\", \"exposition\", \"craft\", \"showing\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Sensory Worldbuilding\",\n    content: \"Build your world through all five senses. What does your world smell like? What sounds are unique? What textures, tastes? Sensory details make worlds real.\",\n    category: \"Worldbuilding\",\n    subcategory: \"Craft\",\n    tags: [\"sensory\", \"worldbuilding\", \"details\", \"craft\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Worldbuilding Consistency Check\",\n    content: \"Review your worldbuilding for consistency. Do the pieces fit together logically? Have you broken your own rules? Create a worldbuilding bible to track details.\",\n    category: \"Worldbuilding\",\n    subcategory: \"Craft\",\n    tags: [\"consistency\", \"worldbuilding bible\", \"tracking\", \"craft\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Unique World Element Spotlight\",\n    content: \"What makes your world different from every other [genre] world? Identify your unique element and ensure it affects plot, character, and theme—not just set dressing.\",\n    category: \"Worldbuilding\",\n    subcategory: \"Craft\",\n    tags: [\"unique\", \"originality\", \"worldbuilding\", \"craft\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Stranger in a Strange Land\",\n    content: \"Use a fish-out-of-water character to naturally explain your world. They ask questions, make mistakes, and discover rules—giving readers the same journey.\",\n    category: \"Worldbuilding\",\n    subcategory: \"Craft\",\n    tags: [\"stranger\", \"fish out of water\", \"worldbuilding\", \"craft\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"World Rules and Stakes\",\n    content: \"Clearly establish the rules of your world early. What's possible? What's forbidden? What's dangerous? Then use these rules to create stakes and tension.\",\n    category: \"Worldbuilding\",\n    subcategory: \"Craft\",\n    tags: [\"rules\", \"stakes\", \"worldbuilding\", \"craft\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Economic System Design\",\n    content: \"Develop your world's economy: What's valuable and why? How do people trade? What creates wealth or poverty? How does economics drive conflict and character motivation?\",\n    category: \"Worldbuilding\",\n    subcategory: \"Society & Culture\",\n    tags: [\"economy\", \"trade\", \"worldbuilding\", \"systems\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Cultural Ritual Development\",\n    content: \"Create meaningful cultural rituals: coming-of-age ceremonies, holidays, traditions, mourning practices. How do these rituals reveal values and create plot opportunities?\",\n    category: \"Worldbuilding\",\n    subcategory: \"Society & Culture\",\n    tags: [\"culture\", \"rituals\", \"traditions\", \"worldbuilding\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Technology Impact on Society\",\n    content: \"How does your world's technology level affect: daily life, social structure, warfare, communication, power distribution? Technology shapes everything—make it consequential.\",\n    category: \"Worldbuilding\",\n    subcategory: \"Technology\",\n    tags: [\"technology\", \"society\", \"impact\", \"worldbuilding\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Historical Event Ripple Effects\",\n    content: \"Create a major historical event in your world. How did it: change the political landscape, shift cultural attitudes, create current tensions, leave scars? History shapes the present.\",\n    category: \"Worldbuilding\",\n    subcategory: \"History\",\n    tags: [\"history\", \"events\", \"consequences\", \"worldbuilding\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  \n  // ==================== EDITING & REVISION (150 prompts) ====================\n  \n  // Line Editing & Prose\n  {\n    title: \"Sentence-Level Tightening\",\n    content: \"Cut this paragraph to its essence. Remove: redundant words, weak verbs, unnecessary qualifiers, passive voice. Make every word count.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Line Editing\",\n    tags: [\"tightening\", \"concise\", \"editing\", \"prose\"],\n    persona: \"editor\",\n    targetRole: \"editor\",\n    isFeatured: true,\n  },\n  {\n    title: \"Weak Verb Replacement\",\n    content: \"Identify weak verbs (is, was, has, seems, appears) in [passage]. Replace with strong, specific action verbs. Transform passive to active voice.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Line Editing\",\n    tags: [\"verbs\", \"active voice\", \"editing\", \"strength\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: false,\n  },\n  {\n    title: \"Adverb Elimination Strategy\",\n    content: \"Find every adverb in [scene]. Delete it. If the sentence weakens, replace the verb instead. 'Walked quickly' becomes 'hurried.' Make verbs do the work.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Line Editing\",\n    tags: [\"adverbs\", \"editing\", \"strong verbs\", \"craft\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: true,\n  },\n  {\n    title: \"Repetition Audit\",\n    content: \"Search for repeated words, phrases, or sentence structures in [chapter]. Vary your language. Only keep repetition that's intentional for rhythm or emphasis.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Line Editing\",\n    tags: [\"repetition\", \"variety\", \"editing\", \"word choice\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: false,\n  },\n  {\n    title: \"Filter Word Removal\",\n    content: \"Remove filter words (felt, saw, heard, noticed, realized, wondered) from [scene]. Show the perception directly. 'She felt angry' becomes 'She slammed the door.'\",\n    category: \"Editing & Revision\",\n    subcategory: \"Line Editing\",\n    tags: [\"filter words\", \"showing\", \"editing\", \"directness\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: false,\n  },\n  {\n    title: \"Sentence Rhythm and Flow\",\n    content: \"Read [passage] aloud. Vary sentence length—short for impact, long for flow. Fix awkward rhythm. Use cadence to control pacing.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Line Editing\",\n    tags: [\"rhythm\", \"flow\", \"sentence variety\", \"editing\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: false,\n  },\n  {\n    title: \"Cliché Replacement\",\n    content: \"List every cliché in [chapter]. Replace with fresh, specific imagery. 'Heart pounding' becomes something uniquely yours.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Line Editing\",\n    tags: [\"clichés\", \"fresh language\", \"editing\", \"originality\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: false,\n  },\n  {\n    title: \"Dialogue Tag Minimization\",\n    content: \"Review dialogue in [scene]. Cut unnecessary tags. Use action beats instead. When you need tags, use 'said'—it's invisible.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Line Editing\",\n    tags: [\"dialogue tags\", \"editing\", \"dialogue\", \"said\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: false,\n  },\n  {\n    title: \"Show Don't Tell Conversion\",\n    content: \"Find every instance of telling in [passage]. Convert to showing through action, dialogue, or sensory detail. Make readers experience, not just know.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Line Editing\",\n    tags: [\"show don't tell\", \"editing\", \"craft\", \"immersion\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: true,\n  },\n  {\n    title: \"Paragraph Break Strategy\",\n    content: \"Review paragraph breaks in [scene]. Break up long paragraphs. Create white space. Use single-sentence paragraphs for emphasis. Control pacing visually.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Line Editing\",\n    tags: [\"paragraphs\", \"white space\", \"pacing\", \"editing\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: false,\n  },\n  \n  // Structural Editing\n  {\n    title: \"Scene Purpose Audit\",\n    content: \"For each scene in [chapter], answer: What's the purpose? Does it advance plot or character? If neither, cut or combine with another scene.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Structural Editing\",\n    tags: [\"scene purpose\", \"structure\", \"editing\", \"cutting\"],\n    persona: \"editor\",\n    targetRole: \"editor\",\n    isFeatured: true,\n  },\n  {\n    title: \"Pacing Analysis\",\n    content: \"Map the pacing of your manuscript. Where does it drag? Where does it rush? Identify slow middle sections and strengthen with conflict or cut ruthlessly.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Structural Editing\",\n    tags: [\"pacing\", \"structure\", \"editing\", \"momentum\"],\n    persona: \"editor\",\n    targetRole: \"editor\",\n    isFeatured: true,\n  },\n  {\n    title: \"Subplot Integration Check\",\n    content: \"Trace each subplot through your manuscript. Does it intersect with the main plot? Does it resolve? Cut subplots that don't enhance the primary story.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Structural Editing\",\n    tags: [\"subplots\", \"structure\", \"editing\", \"integration\"],\n    persona: \"editor\",\n    targetRole: \"editor\",\n    isFeatured: false,\n  },\n  {\n    title: \"Chapter Ending Strength\",\n    content: \"Review the last line of each chapter. Does it compel readers forward? Add hooks, revelations, or questions. Make them turn the page.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Structural Editing\",\n    tags: [\"chapter endings\", \"hooks\", \"editing\", \"page-turner\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: false,\n  },\n  {\n    title: \"Opening Chapter Effectiveness\",\n    content: \"Analyze your first chapter. Does it hook in the first page? Introduce character, conflict, and stakes quickly? Cut throat-clearing. Start where the story starts.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Structural Editing\",\n    tags: [\"opening\", \"first chapter\", \"hook\", \"editing\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: true,\n  },\n  {\n    title: \"Flashback Necessity Test\",\n    content: \"For each flashback, ask: Is this information necessary now? Could it be revealed through dialogue or present action? Cut or reposition flashbacks that interrupt flow.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Structural Editing\",\n    tags: [\"flashbacks\", \"structure\", \"editing\", \"timing\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: false,\n  },\n  {\n    title: \"Act Structure Balance\",\n    content: \"Divide your manuscript into three acts. Is Act 2 sagging? Does Act 3 resolve satisfyingly? Ensure proper pacing and plot distribution across acts.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Structural Editing\",\n    tags: [\"three act structure\", \"acts\", \"editing\", \"balance\"],\n    persona: \"editor\",\n    targetRole: \"editor\",\n    isFeatured: false,\n  },\n  {\n    title: \"Character Arc Consistency\",\n    content: \"Track [character]'s arc through the manuscript. Do they change logically? Are the transformation steps visible? Strengthen weak arc moments.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Structural Editing\",\n    tags: [\"character arc\", \"consistency\", \"editing\", \"development\"],\n    persona: \"editor\",\n    targetRole: \"editor\",\n    isFeatured: false,\n  },\n  {\n    title: \"Tension and Release Pattern\",\n    content: \"Map tension throughout your book. Are there valleys of relief after peaks? Create a rhythm of tension and release—don't exhaust readers with constant intensity.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Structural Editing\",\n    tags: [\"tension\", \"release\", \"rhythm\", \"editing\"],\n    persona: \"editor\",\n    targetRole: \"editor\",\n    isFeatured: false,\n  },\n  {\n    title: \"Cause and Effect Logic\",\n    content: \"Verify that every major plot event has a clear cause. Are consequences logical? Fix coincidences by adding proper setup and motivation.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Structural Editing\",\n    tags: [\"cause and effect\", \"logic\", \"editing\", \"plot\"],\n    persona: \"editor\",\n    targetRole: \"editor\",\n    isFeatured: false,\n  },\n  \n  // Grammar & Mechanics\n  {\n    title: \"Comma Splice Correction\",\n    content: \"Find comma splices (two independent clauses joined by comma). Fix with: period, semicolon, or coordinating conjunction. Make sentences grammatically sound.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Grammar\",\n    tags: [\"comma splice\", \"grammar\", \"editing\", \"punctuation\"],\n    persona: \"editor\",\n    targetRole: \"editor\",\n    isFeatured: false,\n  },\n  {\n    title: \"Pronoun Clarity Check\",\n    content: \"Review pronoun usage in [scene]. Is the antecedent always clear? Fix ambiguous 'he/she/it' references. Repeat names when needed for clarity.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Grammar\",\n    tags: [\"pronouns\", \"clarity\", \"editing\", \"grammar\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: false,\n  },\n  {\n    title: \"Tense Consistency\",\n    content: \"Verify tense consistency throughout [chapter]. Are you in past or present? Fix unintentional shifts. Ensure flashbacks are clearly marked with past perfect initially.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Grammar\",\n    tags: [\"tense\", \"consistency\", \"editing\", \"grammar\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: false,\n  },\n  {\n    title: \"Point of View Violations\",\n    content: \"Check for POV violations in [scene]. Can the POV character know this information? Can they see/hear this? Fix head-hopping and omniscient slips.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Grammar\",\n    tags: [\"POV\", \"point of view\", \"editing\", \"consistency\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: true,\n  },\n  {\n    title: \"Subject-Verb Agreement\",\n    content: \"Check subject-verb agreement, especially with: collective nouns, indefinite pronouns, compound subjects. Ensure grammatical correctness throughout.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Grammar\",\n    tags: [\"subject-verb\", \"agreement\", \"grammar\", \"editing\"],\n    persona: \"editor\",\n    targetRole: \"editor\",\n    isFeatured: false,\n  },\n  {\n    title: \"Modifier Placement\",\n    content: \"Find misplaced modifiers in [chapter]. Place modifiers next to what they modify. Fix dangling participles. Ensure clear meaning.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Grammar\",\n    tags: [\"modifiers\", \"grammar\", \"clarity\", \"editing\"],\n    persona: \"editor\",\n    targetRole: \"editor\",\n    isFeatured: false,\n  },\n  {\n    title: \"Punctuation for Clarity\",\n    content: \"Review punctuation in complex sentences. Use commas, dashes, semicolons correctly. Ensure punctuation aids—not hinders—comprehension.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Grammar\",\n    tags: [\"punctuation\", \"clarity\", \"editing\", \"grammar\"],\n    persona: \"editor\",\n    targetRole: \"editor\",\n    isFeatured: false,\n  },\n  {\n    title: \"Parallel Structure\",\n    content: \"Check for parallel structure in lists and comparisons. Keep grammatical forms consistent within series. 'Running, jumping, and to swim' becomes 'running, jumping, and swimming.'\",\n    category: \"Editing & Revision\",\n    subcategory: \"Grammar\",\n    tags: [\"parallel structure\", \"grammar\", \"lists\", \"editing\"],\n    persona: \"editor\",\n    targetRole: \"editor\",\n    isFeatured: false,\n  },\n  \n  // Consistency Checking\n  {\n    title: \"Character Detail Consistency\",\n    content: \"Create a character bible. Track: eye color, age, backstory details, relationships. Search manuscript for contradictions. Fix inconsistencies.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Consistency\",\n    tags: [\"character consistency\", \"details\", \"editing\", \"tracking\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: false,\n  },\n  {\n    title: \"Timeline Verification\",\n    content: \"Build a timeline of story events. Verify: days of week, seasons, ages, pregnancy terms, travel time. Fix temporal inconsistencies.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Consistency\",\n    tags: [\"timeline\", \"consistency\", \"editing\", \"chronology\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: true,\n  },\n  {\n    title: \"Setting Description Consistency\",\n    content: \"Review descriptions of key locations. Do they match each time? Track: room layouts, distances, landmarks. Ensure spatial consistency.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Consistency\",\n    tags: [\"setting\", \"consistency\", \"locations\", \"editing\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: false,\n  },\n  {\n    title: \"Character Voice Consistency\",\n    content: \"Read dialogue for [character] throughout manuscript. Do they sound like the same person? Is their education level, vocabulary, and speech pattern consistent?\",\n    category: \"Editing & Revision\",\n    subcategory: \"Consistency\",\n    tags: [\"voice\", \"consistency\", \"dialogue\", \"character\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: false,\n  },\n  {\n    title: \"Worldbuilding Rules Consistency\",\n    content: \"List all worldbuilding rules (magic system, technology, society). Check for violations. Ensure you haven't broken your own rules for plot convenience.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Consistency\",\n    tags: [\"worldbuilding\", \"consistency\", \"rules\", \"editing\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: false,\n  },\n  {\n    title: \"Name and Terminology Tracking\",\n    content: \"Create a list of character names, place names, and special terminology. Search for spelling variations or errors. Standardize throughout.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Consistency\",\n    tags: [\"names\", \"terminology\", \"consistency\", \"editing\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: false,\n  },\n  {\n    title: \"Emotional Logic Check\",\n    content: \"Track character emotions through scenes. Do reactions match what just happened? Is recovery time realistic? Fix emotional inconsistencies.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Consistency\",\n    tags: [\"emotions\", \"consistency\", \"logic\", \"editing\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: false,\n  },\n  {\n    title: \"Knowledge Consistency\",\n    content: \"When does each character learn crucial information? Do they act on knowledge they shouldn't have? Fix information flow inconsistencies.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Consistency\",\n    tags: [\"knowledge\", \"information\", \"consistency\", \"editing\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: false,\n  },\n  \n  // Cutting & Trimming\n  {\n    title: \"Darling Deletion\",\n    content: \"Identify your favorite passages that don't serve the story. Cut them, even if they're beautiful. Save them for another project. Kill your darlings.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Cutting\",\n    tags: [\"kill your darlings\", \"cutting\", \"editing\", \"revision\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: true,\n  },\n  {\n    title: \"Redundant Scene Elimination\",\n    content: \"Find scenes that repeat information or beats. Do you show the character grieving three times? Once is enough. Cut redundancy.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Cutting\",\n    tags: [\"redundancy\", \"cutting\", \"scenes\", \"editing\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: false,\n  },\n  {\n    title: \"Exposition Pruning\",\n    content: \"Highlight all exposition/explanation in [chapter]. Cut 50%. What remains, weave into action and dialogue. Trust readers to keep up.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Cutting\",\n    tags: [\"exposition\", \"cutting\", \"info-dump\", \"editing\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: true,\n  },\n  {\n    title: \"Description Trimming\",\n    content: \"Review descriptive passages. Keep the specific, sensory, character-revealing details. Cut generic, filler description. Less is more.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Cutting\",\n    tags: [\"description\", \"cutting\", \"trimming\", \"editing\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: false,\n  },\n  {\n    title: \"Character Consolidation\",\n    content: \"Review minor characters. Can any be combined? Can roles be given to existing characters? Reduce character count for clarity and impact.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Cutting\",\n    tags: [\"characters\", \"consolidation\", \"cutting\", \"editing\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: false,\n  },\n  {\n    title: \"First Chapter Trimming\",\n    content: \"Review your first chapter. Cut the first 3 pages. Can you start there? Keep cutting until you can't. Start as late as possible.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Cutting\",\n    tags: [\"opening\", \"cutting\", \"first chapter\", \"editing\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: true,\n  },\n  {\n    title: \"Word Count Reduction Challenge\",\n    content: \"Challenge yourself to cut 10% of your manuscript word count. Force yourself to find the unnecessary. Your story will be stronger for it.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Cutting\",\n    tags: [\"word count\", \"cutting\", \"editing\", \"revision\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: false,\n  },\n  {\n    title: \"Throat-Clearing Removal\",\n    content: \"Identify 'throat-clearing'—the warm-up before you got to the real scene. Cut it. Start scenes later, end them earlier.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Cutting\",\n    tags: [\"throat-clearing\", \"cutting\", \"scenes\", \"editing\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: false,\n  },\n  \n  // Feedback & Critique\n  {\n    title: \"Beta Reader Question Guide\",\n    content: \"Prepare specific questions for beta readers: Where were you bored? Where confused? Which characters did you love/hate? What surprised you? Where did you want more?\",\n    category: \"Editing & Revision\",\n    subcategory: \"Feedback\",\n    tags: [\"beta readers\", \"feedback\", \"questions\", \"revision\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: false,\n  },\n  {\n    title: \"Critique Evaluation\",\n    content: \"Review feedback from [reader]. What patterns appear? Multiple readers confused by same thing? Trust recurring feedback. Consider one-off comments carefully.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Feedback\",\n    tags: [\"critique\", \"feedback\", \"evaluation\", \"revision\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: false,\n  },\n  {\n    title: \"Emotional Impact Check\",\n    content: \"Ask beta readers: What emotions did you feel in [scene]? Are they feeling what you intended? If not, revise emotional beats.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Feedback\",\n    tags: [\"emotions\", \"impact\", \"beta readers\", \"feedback\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: false,\n  },\n  {\n    title: \"Confusion Point Identification\",\n    content: \"Where did readers get confused? About plot, character, setting, or theme? Address confusion points directly through clarification or cutting complexity.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Feedback\",\n    tags: [\"confusion\", \"clarity\", \"feedback\", \"revision\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: true,\n  },\n  {\n    title: \"Predictability Assessment\",\n    content: \"Did readers predict your twists? If yes, is it satisfying foreshadowing or disappointing obviousness? Add misdirection or embrace the earned revelation.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Feedback\",\n    tags: [\"predictability\", \"twists\", \"feedback\", \"revision\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: false,\n  },\n  {\n    title: \"Character Likability Gauge\",\n    content: \"Which characters did readers connect with? Who fell flat? Strengthen character appeal through vulnerability, competence, or humor as needed.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Feedback\",\n    tags: [\"characters\", \"likability\", \"feedback\", \"revision\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: false,\n  },\n  {\n    title: \"Pacing Feedback Analysis\",\n    content: \"Where did readers want to skim? Where did they stay up reading? Use this data to adjust pacing—speed up slow parts, ensure fast parts earn their momentum.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Feedback\",\n    tags: [\"pacing\", \"feedback\", \"revision\", \"editing\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: false,\n  },\n  {\n    title: \"Ending Satisfaction Survey\",\n    content: \"How did readers feel about your ending? Satisfied, cheated, confused? Endings should feel both surprising and inevitable. Revise until they do.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Feedback\",\n    tags: [\"ending\", \"satisfaction\", \"feedback\", \"revision\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: false,\n  },\n  \n  // Style & Voice\n  {\n    title: \"Narrative Voice Consistency\",\n    content: \"Read your entire manuscript for narrative voice. Does it stay consistent? Is the voice distinct and appropriate for your story? Strengthen or unify as needed.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Style\",\n    tags: [\"voice\", \"narrative voice\", \"consistency\", \"editing\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: false,\n  },\n  {\n    title: \"Genre Convention Check\",\n    content: \"Review your [genre] for genre expectations. Are you meeting or subverting conventions intentionally? Ensure you satisfy core genre readers.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Style\",\n    tags: [\"genre\", \"conventions\", \"editing\", \"expectations\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: false,\n  },\n  {\n    title: \"Metaphor and Simile Audit\",\n    content: \"Review all metaphors and similes. Are they fresh or clichéd? Do they fit the narrative voice? Are they overdone? Cut or strengthen.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Style\",\n    tags: [\"metaphors\", \"similes\", \"editing\", \"figurative language\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: false,\n  },\n  {\n    title: \"Sensory Detail Balance\",\n    content: \"Check sensory balance in [chapter]. Are you overusing sight? Underusing smell, touch, taste? Add variety. Make the world more immersive.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Style\",\n    tags: [\"sensory\", \"balance\", \"editing\", \"description\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: false,\n  },\n  {\n    title: \"Tone Appropriateness\",\n    content: \"Is your tone appropriate for your content? Dark topics need careful handling. Ensure tone matches the emotional reality of your story.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Style\",\n    tags: [\"tone\", \"appropriateness\", \"editing\", \"mood\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: false,\n  },\n  {\n    title: \"Reading Level Assessment\",\n    content: \"Who is your audience? Is your vocabulary and sentence complexity appropriate? Simplify for wider audience, or embrace complexity if that's your brand.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Style\",\n    tags: [\"reading level\", \"audience\", \"complexity\", \"editing\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: false,\n  },\n  \n  // Polishing\n  {\n    title: \"Final Read-Through Aloud\",\n    content: \"Read your entire manuscript aloud. Catch awkward phrasing, missing words, rhythm problems. Your ear catches what your eyes miss.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Polishing\",\n    tags: [\"read aloud\", \"polishing\", \"editing\", \"final pass\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: true,\n  },\n  {\n    title: \"Fresh Eyes Pass\",\n    content: \"Put your manuscript away for 2-4 weeks. Return with fresh eyes. You'll see problems you were blind to before. Make this your final revision pass.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Polishing\",\n    tags: [\"fresh eyes\", \"distance\", \"revision\", \"polishing\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: true,\n  },\n  {\n    title: \"Professional Proofread\",\n    content: \"After all revisions, do a dedicated proofread for: typos, formatting, punctuation, spelling. This is polish, not revision. The writing is done.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Polishing\",\n    tags: [\"proofreading\", \"typos\", \"polishing\", \"final\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: false,\n  },\n  {\n    title: \"First and Last Line Strength\",\n    content: \"Revise the first and last line of your book until they're perfect. They're the most important lines you'll write. Make them unforgettable.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Polishing\",\n    tags: [\"first line\", \"last line\", \"polishing\", \"impact\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: true,\n  },\n  {\n    title: \"Chapter Openings Polish\",\n    content: \"Revise the first sentence of every chapter. Make each one inviting, intriguing, or engaging. These are mini-hooks throughout your book.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Polishing\",\n    tags: [\"chapter openings\", \"hooks\", \"polishing\", \"editing\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: false,\n  },\n  {\n    title: \"Formatting Consistency\",\n    content: \"Check formatting: scene breaks, chapter headings, dialogue punctuation, em-dashes vs. hyphens. Ensure professional, consistent presentation.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Polishing\",\n    tags: [\"formatting\", \"consistency\", \"professional\", \"polishing\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: false,\n  },\n  {\n    title: \"Title and Chapter Titles\",\n    content: \"Review your title and chapter titles. Are they compelling? Do chapter titles spoil or intrigue? Ensure titles serve your marketing and artistic goals.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Polishing\",\n    tags: [\"titles\", \"chapter titles\", \"polishing\", \"editing\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: false,\n  },\n  {\n    title: \"Back Matter Preparation\",\n    content: \"Prepare: acknowledgments, author note, book club questions, preview of next book. Polish these—they're part of the reader experience.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Polishing\",\n    tags: [\"back matter\", \"acknowledgments\", \"polishing\", \"completion\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: false,\n  },\n  \n  // Revision Strategy\n  {\n    title: \"Reverse Outline Method\",\n    content: \"Create an outline from your finished draft. Summarize each scene's purpose. Reveals structure problems, redundancy, and gaps. Fix what you discover.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Revision Strategy\",\n    tags: [\"reverse outline\", \"structure\", \"revision\", \"strategy\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: true,\n  },\n  {\n    title: \"Layer Revision Approach\",\n    content: \"Revise in layers: 1st pass-structure, 2nd pass-character, 3rd pass-prose, 4th pass-polish. Don't do everything at once. Focus creates better results.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Revision Strategy\",\n    tags: [\"layers\", \"revision strategy\", \"process\", \"editing\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: true,\n  },\n  {\n    title: \"Big Picture First Approach\",\n    content: \"Fix big problems before small ones. Don't polish prose in a scene you might cut. Structure first, then scenes, then sentences.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Revision Strategy\",\n    tags: [\"big picture\", \"strategy\", \"revision\", \"priorities\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: false,\n  },\n  {\n    title: \"Revision Checklist Creation\",\n    content: \"Create a personalized revision checklist based on your weaknesses. Do you overwrite? Check wordiness. Filter words? Check those. Target your known issues.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Revision Strategy\",\n    tags: [\"checklist\", \"revision strategy\", \"personalized\", \"editing\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: false,\n  },\n  {\n    title: \"Scene Card Reorganization\",\n    content: \"Write each scene on a card. Physically reorganize them. What order creates maximum impact? Sometimes the best structure isn't chronological.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Revision Strategy\",\n    tags: [\"scene cards\", \"reorganization\", \"structure\", \"revision\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: false,\n  },\n  {\n    title: \"Character Arc Strengthening\",\n    content: \"Dedicate one revision pass solely to [character]'s arc. Make every scene contribute to their journey. Strengthen weak moments. Ensure satisfying transformation.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Revision Strategy\",\n    tags: [\"character arc\", \"revision\", \"strategy\", \"development\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: false,\n  },\n  {\n    title: \"Emotion Intensification Pass\",\n    content: \"Do a pass focused only on emotional impact. Make joy more joyful, grief more devastating. Push emotional moments harder. Make readers feel more.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Revision Strategy\",\n    tags: [\"emotion\", \"intensification\", \"revision\", \"impact\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: false,\n  },\n  {\n    title: \"Dialogue-Only Review\",\n    content: \"Read only dialogue, skipping narrative. Does each character sound distinct? Is it natural? Does it move plot forward? Revise weak dialogue.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Revision Strategy\",\n    tags: [\"dialogue\", \"revision\", \"strategy\", \"voice\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: false,\n  },\n  {\n    title: \"Thematic Consistency Pass\",\n    content: \"Identify your themes. Do scenes and character arcs reinforce them? Add thematic resonance where it's missing. Ensure your book is about something.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Revision Strategy\",\n    tags: [\"theme\", \"consistency\", \"revision\", \"meaning\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: false,\n  },\n  {\n    title: \"Comparative Reading\",\n    content: \"Read a published book in your genre. Compare to your manuscript. What do they do better? Structure? Pacing? Prose? Learn and apply insights.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Revision Strategy\",\n    tags: [\"comparative reading\", \"learning\", \"revision\", \"genre\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: false,\n  },\n  {\n    title: \"Reader Experience Focus\",\n    content: \"Revise with reader experience in mind. Are you giving them reasons to turn pages? Emotional payoff? Satisfaction? Serve your reader above all.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Revision Strategy\",\n    tags: [\"reader experience\", \"revision\", \"engagement\", \"strategy\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: false,\n  },\n  {\n    title: \"When to Stop Revising\",\n    content: \"Recognize when you're done. You're tinkering, not improving. The manuscript is as good as you can make it right now. Send it out. Move forward.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Revision Strategy\",\n    tags: [\"completion\", \"knowing when done\", \"revision\", \"moving on\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: true,\n  },\n  {\n    title: \"Sentence Rhythm Variation Analysis\",\n    content: \"Analyze sentence length patterns in [chapter]. Count words per sentence. Do you have variation? Mix short punchy sentences with longer flowing ones. Create musicality through rhythm.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Line Editing\",\n    tags: [\"rhythm\", \"sentence variety\", \"pacing\", \"music\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: true,\n  },\n  {\n    title: \"Purple Prose Identification\",\n    content: \"Hunt for purple prose: overly flowery language, excessive adjectives, pretentious vocabulary. Cut the decoration. Keep what's beautiful and purposeful. Serve the story, not your ego.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Line Editing\",\n    tags: [\"purple prose\", \"overwriting\", \"simplicity\", \"editing\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: false,\n  },\n  {\n    title: \"Consistency Timeline Audit\",\n    content: \"Create a timeline of all story events. Check: character ages, seasons, day/night logic, travel time. Fix all continuity errors. Readers notice inconsistencies.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Structural Editing\",\n    tags: [\"consistency\", \"timeline\", \"continuity\", \"logic\"],\n    persona: \"editor\",\n    targetRole: \"all\",\n    isFeatured: false,\n  },\n  {\n    title: \"Beta Reader Feedback Synthesis\",\n    content: \"Collect all beta feedback. Look for patterns: What do multiple readers mention? Ignore outliers. Address common concerns. Your readers show you what you can't see.\",\n    category: \"Editing & Revision\",\n    subcategory: \"Feedback\",\n    tags: [\"beta readers\", \"feedback\", \"revision\", \"patterns\"],\n    persona: \"coach\",\n    targetRole: \"all\",\n    isFeatured: true,\n  },\n  \n  // ==================== GENRE-SPECIFIC (240 prompts) ====================\n  \n  // Romance (40 prompts)\n  {\n    title: \"Romantic Chemistry Development\",\n    content: \"Build believable chemistry between [character A] and [character B]. Show: physical attraction, intellectual compatibility, emotional connection, and why they specifically work together.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Romance\",\n    tags: [\"romance\", \"chemistry\", \"attraction\", \"relationship\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Meet-Cute Design\",\n    content: \"Create a memorable first meeting for your couple. Make it: unique to their personalities, emotionally resonant, and foreshadowing their relationship dynamic. Avoid clichés.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Romance\",\n    tags: [\"romance\", \"meet-cute\", \"first meeting\", \"beginning\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Romantic Conflict Sources\",\n    content: \"Identify what keeps [couple] apart. Use: internal conflicts (fear, past wounds), external obstacles (circumstances, other people), and misunderstandings. Make the conflict worthy of the love.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Romance\",\n    tags: [\"romance\", \"conflict\", \"obstacles\", \"tension\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Romance Tropes with Fresh Twists\",\n    content: \"You're using [romance trope]. What's the expected version? Now subvert it. Keep what readers love, twist what they expect. Make the familiar feel new.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Romance\",\n    tags: [\"romance\", \"tropes\", \"fresh\", \"subversion\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Emotional Beats in Romance\",\n    content: \"Map the emotional journey: attraction, denial, first kiss, deepening, dark moment, grand gesture, commitment. Ensure each beat earns its place and builds to the next.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Romance\",\n    tags: [\"romance\", \"emotional beats\", \"structure\", \"journey\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Sexual Tension Building\",\n    content: \"Create sexual tension without sex: lingering glances, almost-touches, awareness of physical proximity, internal yearning. Build anticipation. Make readers feel the pull.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Romance\",\n    tags: [\"romance\", \"sexual tension\", \"anticipation\", \"chemistry\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Love Scene Purpose\",\n    content: \"Before writing an intimate scene, ask: What changes emotionally? How does it deepen the relationship? What vulnerability is revealed? Make it about more than physical.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Romance\",\n    tags: [\"romance\", \"love scenes\", \"intimacy\", \"purpose\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Happily Ever After Earning\",\n    content: \"Your couple must earn their HEA/HFN. Show: growth in both characters, resolution of core conflicts, proof they're better together. Make the ending satisfying and inevitable.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Romance\",\n    tags: [\"romance\", \"HEA\", \"ending\", \"resolution\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Enemies to Lovers Arc\",\n    content: \"For enemies-to-lovers, show: why they clash, grudging respect developing, forced proximity revelation, the moment animosity shifts to desire. Make the transition believable.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Romance\",\n    tags: [\"romance\", \"enemies to lovers\", \"arc\", \"trope\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Second Chance Romance Wounds\",\n    content: \"In second-chance romance, clarify: what broke them apart, what's changed, why now is different. Address the past wound. Show real growth, not just longing.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Romance\",\n    tags: [\"romance\", \"second chance\", \"past\", \"growth\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Romance Dialogue Subtext\",\n    content: \"Write romantic dialogue with subtext. They're arguing about dinner, but really about trust. They're discussing work, but revealing fear of intimacy. Layer meaning beneath surface.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Romance\",\n    tags: [\"romance\", \"dialogue\", \"subtext\", \"layering\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Romantic Grand Gesture\",\n    content: \"Design a grand gesture that's: specific to their relationship, addresses the core wound, requires vulnerability, and proves change. Earn the big moment.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Romance\",\n    tags: [\"romance\", \"grand gesture\", \"climax\", \"proof\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Romance Pacing Intimacy\",\n    content: \"Pace the emotional and physical intimacy. Too fast? Unearned. Too slow? Frustrating. Match pacing to: characters' wounds, external plot, and reader expectations for [subgenre].\",\n    category: \"Genre-Specific\",\n    subcategory: \"Romance\",\n    tags: [\"romance\", \"pacing\", \"intimacy\", \"timing\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Chosen Family in Romance\",\n    content: \"Show how [love interest] fits into protagonist's found family/friend group. Do they enhance these relationships or isolate? Use secondary characters to reveal compatibility.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Romance\",\n    tags: [\"romance\", \"found family\", \"friends\", \"integration\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Romance Dark Moment\",\n    content: \"The dark moment should: feel inevitable based on their wounds, seem impossible to overcome, and force both characters to change. Make it hurt before the healing.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Romance\",\n    tags: [\"romance\", \"dark moment\", \"crisis\", \"low point\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Internal vs. External Romance Plot\",\n    content: \"Balance internal romance (emotional journey) with external plot (what's happening around them). The external should pressure and reveal the internal romance.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Romance\",\n    tags: [\"romance\", \"plot balance\", \"internal\", \"external\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Forced Proximity Setup\",\n    content: \"If using forced proximity, make the situation: unavoidable, uncomfortable at first, gradually intimate. Use the constraint to force emotional honesty.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Romance\",\n    tags: [\"romance\", \"forced proximity\", \"trope\", \"situation\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Romance Miscommunication Done Right\",\n    content: \"If using miscommunication, ensure: it's rooted in character wound/flaw, it's believable they wouldn't just talk, and resolution requires character growth. Don't make it feel contrived.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Romance\",\n    tags: [\"romance\", \"miscommunication\", \"believability\", \"conflict\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Romantic Jealousy Scenes\",\n    content: \"Write jealousy that reveals, not annoys. Show: what they're afraid of losing, their insecurity, what they're realizing about their feelings. Make it character development.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Romance\",\n    tags: [\"romance\", \"jealousy\", \"emotion\", \"revelation\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Romance Genre Expectations\",\n    content: \"Know [romance subgenre] expectations: heat level, pacing, tropes readers expect. You can subvert, but deliver the core promise: emotional journey to committed love.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Romance\",\n    tags: [\"romance\", \"genre expectations\", \"subgenre\", \"promise\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Friends to Lovers Shift\",\n    content: \"For friends-to-lovers, show: the moment awareness shifts, fear of losing the friendship, new physical awareness, the friend group's reaction. Make the transition delicious and terrifying.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Romance\",\n    tags: [\"romance\", \"friends to lovers\", \"shift\", \"trope\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Romance Emotional Vulnerability\",\n    content: \"Identify [character]'s emotional walls. Show them slowly lowering defenses for [love interest]. Make vulnerability the true intimacy, whether or not there's physical intimacy.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Romance\",\n    tags: [\"romance\", \"vulnerability\", \"emotional\", \"intimacy\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Romantic Dialogue Flirting\",\n    content: \"Write flirtatious banter that reveals personality. Use: wit, teasing, callbacks to shared moments, and underlying desire. Make it specific to these characters.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Romance\",\n    tags: [\"romance\", \"flirting\", \"banter\", \"dialogue\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"First 'I Love You' Moment\",\n    content: \"Make the first 'I love you' earned and memorable. Consider: who says it first, what prompts it, if it's said aloud or shown, and how the other responds. Make it matter.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Romance\",\n    tags: [\"romance\", \"I love you\", \"declaration\", \"moment\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Romance Setting as Character\",\n    content: \"Use setting to enhance romance: cozy cabin for forced proximity, small town for second chances, workplace for professional tension. Let location influence the love story.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Romance\",\n    tags: [\"romance\", \"setting\", \"atmosphere\", \"enhancement\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Power Dynamics in Romance\",\n    content: \"If there's a power imbalance (boss/employee, teacher/student), handle carefully. Show awareness of the dynamic, equalize by end, ensure consent is crystal clear.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Romance\",\n    tags: [\"romance\", \"power dynamics\", \"consent\", \"ethics\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Romance Character Agency\",\n    content: \"Both characters must have agency in the relationship. They should actively choose each other, not be swept along. Show mutual pursuit and decision-making.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Romance\",\n    tags: [\"romance\", \"agency\", \"choice\", \"equality\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Romantic Comedy Timing\",\n    content: \"In rom-com, balance humor with heart. Use comedy to: diffuse tension, reveal character, create memorable moments. But ensure genuine emotional beats land seriously.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Romance\",\n    tags: [\"romance\", \"rom-com\", \"humor\", \"balance\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Romance Parallels and Callbacks\",\n    content: \"Create romantic parallels: opening scene echoed with reversal at end, repeated phrases with new meaning, locations revisited. Make callbacks that show growth and completion.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Romance\",\n    tags: [\"romance\", \"parallels\", \"callbacks\", \"structure\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Romance Epilogue Satisfaction\",\n    content: \"If including an epilogue, show: happiness in daily life, not just the big moments. Give readers a glimpse of the future they fought for. Make it satisfying, not saccharine.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Romance\",\n    tags: [\"romance\", \"epilogue\", \"future\", \"satisfaction\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Soul Mate vs. Chosen Love\",\n    content: \"Decide: are they destined or do they choose each other? If soulmates, show the work they still must do. If chosen, show why they're each other's best choice. Avoid 'love conquers all' without effort.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Romance\",\n    tags: [\"romance\", \"soulmates\", \"choice\", \"philosophy\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Romantic Gesture Authenticity\",\n    content: \"Every romantic gesture should feel true to [character]. A stoic shows love differently than an extrovert. Make expressions of love character-specific, not generic.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Romance\",\n    tags: [\"romance\", \"gestures\", \"authenticity\", \"character\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Romance Beauty in Small Moments\",\n    content: \"Don't just show the big romantic scenes. Find intimacy in: comfortable silence, inside jokes, knowing glances, small acts of service. Build love in accumulation of tiny moments.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Romance\",\n    tags: [\"romance\", \"small moments\", \"intimacy\", \"details\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Romance Couple Complementarity\",\n    content: \"Show how they complete each other: her impulsiveness balanced by his caution, his cynicism softened by her hope. Make them better together without losing individual identity.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Romance\",\n    tags: [\"romance\", \"complementarity\", \"balance\", \"partnership\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Romantic Misunderstanding Resolution\",\n    content: \"When resolving misunderstandings, show: both apologizing, both understanding their part, actual communication. Don't let one grovel while the other forgives—make it mutual growth.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Romance\",\n    tags: [\"romance\", \"resolution\", \"communication\", \"mutual\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Romance Love Language Integration\",\n    content: \"Give each character a distinct love language. Show them learning to express and receive love in their partner's language. Make this learning part of the journey.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Romance\",\n    tags: [\"romance\", \"love languages\", \"communication\", \"growth\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Romance Consent and Desire\",\n    content: \"Show enthusiastic consent woven naturally into intimate scenes. Characters can communicate desire through: words, body language, checking in. Make consent sexy and respectful.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Romance\",\n    tags: [\"romance\", \"consent\", \"intimacy\", \"communication\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Romance Satisfying Ending Arc\",\n    content: \"Ensure your ending addresses: the external plot, both character arcs, the relationship arc, and delivers genre promise. Leave readers satisfied they got the love story they came for.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Romance\",\n    tags: [\"romance\", \"ending\", \"satisfaction\", \"delivery\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Romance Between Series Books\",\n    content: \"If writing series romance, each book must have complete relationship arc while advancing series plot. Don't stretch will-they-won't-they across books—deliver HEA per book.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Romance\",\n    tags: [\"romance\", \"series\", \"structure\", \"completion\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Romance Physical Awareness\",\n    content: \"Show growing physical awareness: noticing details (the way they gesture, their scent), physical reactions (quickened pulse, butterflies), and the electricity of accidental touch.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Romance\",\n    tags: [\"romance\", \"physical awareness\", \"attraction\", \"sensation\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  \n  // Mystery/Thriller (40 prompts)\n  {\n    title: \"Mystery Clue Placement\",\n    content: \"Plant clues that are: fair to readers, hidden in plain sight, and rewarding to discover. Create a trail that's challenging but solvable. Test: can a careful reader solve it before the reveal?\",\n    category: \"Genre-Specific\",\n    subcategory: \"Mystery/Thriller\",\n    tags: [\"mystery\", \"clues\", \"fair play\", \"puzzle\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Red Herring Strategy\",\n    content: \"Design red herrings that: are plausible suspects/explanations, have their own resolution, and don't feel cheap. Make readers second-guess without feeling cheated when they're wrong.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Mystery/Thriller\",\n    tags: [\"mystery\", \"red herrings\", \"suspects\", \"misdirection\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Detective Character Expertise\",\n    content: \"Give your detective specific skills/knowledge that help solve the case. Show their deductive process. Make readers feel smart by following their logic, even if they miss some connections.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Mystery/Thriller\",\n    tags: [\"mystery\", \"detective\", \"deduction\", \"skills\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Mystery Pacing Revelations\",\n    content: \"Pace revelations throughout: small discoveries, false conclusions, reversals, and final truth. Create a rhythm of revelation and complication. Never let momentum stall.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Mystery/Thriller\",\n    tags: [\"mystery\", \"pacing\", \"revelations\", \"rhythm\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Thriller Ticking Clock\",\n    content: \"Add urgency with a deadline: bomb timer, kidnap victim's survival, statute of limitations. Make time pressure escalate tension. Show time running out.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Mystery/Thriller\",\n    tags: [\"thriller\", \"ticking clock\", \"deadline\", \"urgency\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Murder Mystery Victim Impact\",\n    content: \"Make the victim real. Show: who they were, who they left behind, what was lost. The more readers care about the victim, the more they care about justice.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Mystery/Thriller\",\n    tags: [\"mystery\", \"victim\", \"stakes\", \"emotional\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Antagonist Motive Believability\",\n    content: \"Your killer/villain needs a motive that: makes sense to them, is proportional to their actions (in their mind), and is revealed satisfyingly. Weak motive kills mystery impact.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Mystery/Thriller\",\n    tags: [\"mystery\", \"motive\", \"antagonist\", \"believability\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Investigation Structure\",\n    content: \"Structure investigation in stages: discovery, initial theories, dead ends, breakthroughs, false solution, real solution. Give each phase its own arc and satisfactions.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Mystery/Thriller\",\n    tags: [\"mystery\", \"structure\", \"investigation\", \"stages\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Thriller Action Sequence Clarity\",\n    content: \"In action scenes, maintain: spatial awareness (where is everyone?), cause and effect (each action leads to next), and rising stakes. Keep choreography clear even during chaos.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Mystery/Thriller\",\n    tags: [\"thriller\", \"action\", \"clarity\", \"choreography\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Interrogation Scene Tension\",\n    content: \"Build interrogation tension through: power dynamics, what's said vs. unsaid, body language, strategic revelation. Make it a verbal chess match.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Mystery/Thriller\",\n    tags: [\"mystery\", \"interrogation\", \"tension\", \"dialogue\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Mystery Opening Hook\",\n    content: \"Open with: the discovery of crime, an unexplained event, or protagonist in danger. Establish the central question immediately. Make readers need answers.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Mystery/Thriller\",\n    tags: [\"mystery\", \"opening\", \"hook\", \"question\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Psychological Thriller Unreliable Narrator\",\n    content: \"If using unreliable narrator, plant: subtle inconsistencies, gaps in memory/story, and confirmable lies. Give readers clues to doubt before the reveal.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Mystery/Thriller\",\n    tags: [\"thriller\", \"unreliable narrator\", \"psychological\", \"doubt\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Locked Room Mystery Logic\",\n    content: \"For locked-room mysteries, ensure: the solution is possible, all physical constraints are clear, and the reveal is clever not contrived. Play fair with readers.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Mystery/Thriller\",\n    tags: [\"mystery\", \"locked room\", \"puzzle\", \"logic\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Conspiracy Thriller Scope\",\n    content: \"In conspiracy thrillers: start small, expand scope gradually, make connections feel earned. Show protagonist peeling back layers. Build to the full horrifying picture.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Mystery/Thriller\",\n    tags: [\"thriller\", \"conspiracy\", \"scope\", \"revelation\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Detective's Personal Stakes\",\n    content: \"Give your detective personal investment: connection to victim, career on the line, personal demons echoed in the case. Professional + personal stakes = compelling protagonist.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Mystery/Thriller\",\n    tags: [\"mystery\", \"detective\", \"stakes\", \"personal\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Thriller Villain Reveal Timing\",\n    content: \"Decide when to reveal the villain: early (thriller), midpoint (suspense), or end (mystery). Each choice affects story structure and tension type. Choose purposefully.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Mystery/Thriller\",\n    tags: [\"thriller\", \"villain\", \"reveal\", \"timing\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Evidence Chain Integrity\",\n    content: \"Track all evidence carefully. Ensure: it's discovered logically, leads to valid conclusions, and you haven't forgotten any. Create evidence tracking document.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Mystery/Thriller\",\n    tags: [\"mystery\", \"evidence\", \"tracking\", \"logic\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Cat and Mouse Dynamic\",\n    content: \"In cat-and-mouse thrillers, show: hunter and hunted roles reversing, escalating tactics, personal obsession developing. Make each encounter raise the stakes.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Mystery/Thriller\",\n    tags: [\"thriller\", \"cat and mouse\", \"chase\", \"escalation\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Mystery Subplot Integration\",\n    content: \"Weave subplots that: seem unrelated, provide red herrings or contrast, and ultimately connect to main mystery. Everything should matter or be cut.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Mystery/Thriller\",\n    tags: [\"mystery\", \"subplots\", \"integration\", \"connection\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Psychological Tension Building\",\n    content: \"Build psychological tension through: paranoia, gaslighting, isolation, things not quite right. Use atmosphere and perception over physical danger.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Mystery/Thriller\",\n    tags: [\"thriller\", \"psychological\", \"tension\", \"atmosphere\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Cozy Mystery Tone Balance\",\n    content: \"In cozy mysteries, balance: serious crime with lighter tone, community involvement, amateur detective charm. Keep violence off-page while maintaining genuine stakes.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Mystery/Thriller\",\n    tags: [\"mystery\", \"cozy\", \"tone\", \"balance\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Thriller Chase Scene Pacing\",\n    content: \"Structure chase scenes: establish why they're running, obstacles that complicate, near-misses that terrify, and definitive end (escape or capture). Vary pace within the chase.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Mystery/Thriller\",\n    tags: [\"thriller\", \"chase\", \"pacing\", \"action\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Mystery Partnership Dynamic\",\n    content: \"If detective has a partner, create dynamic: complementary skills, personality friction, trust developing. Use partnership to reveal detective through interaction.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Mystery/Thriller\",\n    tags: [\"mystery\", \"partnership\", \"dynamic\", \"characters\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Forensic Detail Authenticity\",\n    content: \"Research forensic methods for your time period and setting. Get details right, but don't let technical accuracy slow pacing. Explain only what readers need to follow the logic.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Mystery/Thriller\",\n    tags: [\"mystery\", \"forensics\", \"research\", \"authenticity\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Witness Interview Strategy\",\n    content: \"Structure witness interviews to: reveal personality, provide selective information, introduce bias or unreliability. Each witness should complicate, not just inform.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Mystery/Thriller\",\n    tags: [\"mystery\", \"witnesses\", \"interviews\", \"complexity\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Thriller Escape Scene Engineering\",\n    content: \"Plan escapes that show: character resourcefulness, use of specific skills/knowledge, logical problem-solving under pressure. Avoid deus ex machina rescues.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Mystery/Thriller\",\n    tags: [\"thriller\", \"escape\", \"resourcefulness\", \"logic\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Mystery Denouement Satisfaction\",\n    content: \"The explanation scene should: answer all questions, feel inevitable in hindsight, and showcase detective's brilliance. Don't rush it—readers waited for this payoff.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Mystery/Thriller\",\n    tags: [\"mystery\", \"denouement\", \"explanation\", \"payoff\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Stalker Thriller Escalation\",\n    content: \"Show stalker behavior escalating: watching, contact, invasion of space, threats, violence. Each step should feel like inevitable progression, not random acts.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Mystery/Thriller\",\n    tags: [\"thriller\", \"stalker\", \"escalation\", \"progression\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Mystery Series Continuity\",\n    content: \"In series mysteries: solve main case per book, but evolve series detective personally. Balance standalone satisfaction with series arc. Don't reset character growth.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Mystery/Thriller\",\n    tags: [\"mystery\", \"series\", \"continuity\", \"growth\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Thriller Final Confrontation\",\n    content: \"Build final confrontation where: protagonist faces villain directly, uses skills developed through story, and overcomes both external threat and internal flaw. Make it earned.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Mystery/Thriller\",\n    tags: [\"thriller\", \"confrontation\", \"climax\", \"payoff\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Legal Thriller Courtroom Drama\",\n    content: \"In legal thrillers: research procedure, create dramatic courtroom moments within realism, use testimony to reveal character and truth. Make legal maneuvering compelling.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Mystery/Thriller\",\n    tags: [\"thriller\", \"legal\", \"courtroom\", \"procedure\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Mystery Atmosphere Creation\",\n    content: \"Build mystery atmosphere through: setting details, weather, lighting, sounds, and character unease. Use environment to create sense that something's not right.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Mystery/Thriller\",\n    tags: [\"mystery\", \"atmosphere\", \"mood\", \"setting\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Thriller Information Reveal\",\n    content: \"Control information flow: what protagonist knows vs. reader knows vs. villain knows. Use discrepancies to create dramatic irony and suspense.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Mystery/Thriller\",\n    tags: [\"thriller\", \"information\", \"dramatic irony\", \"suspense\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Mystery Multiple Suspects\",\n    content: \"Give each suspect: motive, means, opportunity, and something that implicates them. Eliminate them systematically. Save the real killer for when readers think they've figured it out.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Mystery/Thriller\",\n    tags: [\"mystery\", \"suspects\", \"elimination\", \"motive\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Domestic Thriller Confined Tension\",\n    content: \"In domestic thrillers, use: familiar settings made sinister, close relationships turned threatening, psychological manipulation. Find horror in the everyday.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Mystery/Thriller\",\n    tags: [\"thriller\", \"domestic\", \"psychological\", \"familiar\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Mystery Genre Convention Respect\",\n    content: \"Know the rules of [mystery subgenre]. You can bend them, but breaking core conventions disappoints readers. Ensure you deliver the type of mystery you promised.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Mystery/Thriller\",\n    tags: [\"mystery\", \"conventions\", \"genre\", \"expectations\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Thriller Vulnerability Moments\",\n    content: \"Between action, show protagonist vulnerable: dealing with trauma, doubting themselves, needing help. Vulnerability makes danger more terrifying and victories more satisfying.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Mystery/Thriller\",\n    tags: [\"thriller\", \"vulnerability\", \"character\", \"balance\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Mystery Cliffhanger Chapters\",\n    content: \"End chapters with: new evidence, danger, revelation, or question. Make readers unable to stop. But ensure each cliffhanger has payoff—don't just delay constantly.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Mystery/Thriller\",\n    tags: [\"mystery\", \"cliffhangers\", \"pacing\", \"hooks\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Thriller Sensory Danger Signals\",\n    content: \"Signal danger through senses: wrong smell, too-quiet sounds, shadows moving, feeling of being watched. Use sensory detail to create dread before actual threat.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Mystery/Thriller\",\n    tags: [\"thriller\", \"sensory\", \"danger\", \"foreshadowing\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Mystery Fair Play Rules\",\n    content: \"Follow fair play: all clues available to protagonist available to reader, no withholding crucial information, solution must be logical from evidence. Readers should feel they could have solved it.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Mystery/Thriller\",\n    tags: [\"mystery\", \"fair play\", \"clues\", \"logic\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  \n  // Fantasy (40 prompts)  \n  {\n    title: \"Fantasy World Magic Rules\",\n    content: \"Establish clear magic rules for your fantasy world. Define: source, cost, limitations, who can use it. Consistent rules create stakes—breaking them should have consequences.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Fantasy\",\n    tags: [\"fantasy\", \"magic\", \"worldbuilding\", \"rules\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Fantasy Quest Structure\",\n    content: \"Structure your quest: call to adventure, gathering companions, trials, revelation, final battle, return changed. Make each stage essential to hero's journey.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Fantasy\",\n    tags: [\"fantasy\", \"quest\", \"hero's journey\", \"structure\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Fantasy Creature Design\",\n    content: \"Create original fantasy creatures. Avoid generic dragons/elves—twist expectations. Consider: ecology, behavior, how they fit your world's magic/history.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Fantasy\",\n    tags: [\"fantasy\", \"creatures\", \"originality\", \"worldbuilding\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Chosen One Trope Fresh Take\",\n    content: \"If using Chosen One, subvert it. Make them: reluctant, wrong choice, sharing destiny with others, or rejecting prophecy. Find new angles on old tropes.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Fantasy\",\n    tags: [\"fantasy\", \"chosen one\", \"trope\", \"subversion\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Fantasy Political Intrigue\",\n    content: \"Build political complexity: competing houses, alliances, betrayals. Make power struggles as compelling as magic battles. Game of Thrones showed politics can be fantasy's heart.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Fantasy\",\n    tags: [\"fantasy\", \"politics\", \"intrigue\", \"complexity\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Dark Fantasy Moral Ambiguity\",\n    content: \"In dark fantasy, blur moral lines. Heroes have darkness, villains have reasons. Create world where right choices have terrible costs.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Fantasy\",\n    tags: [\"fantasy\", \"dark fantasy\", \"morality\", \"gray\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Fantasy Map and Geography\",\n    content: \"Your fantasy world needs coherent geography. Consider: climate logic, trade routes, natural barriers, resources. Geography should drive plot and conflict.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Fantasy\",\n    tags: [\"fantasy\", \"geography\", \"worldbuilding\", \"map\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Urban Fantasy Modern Magic\",\n    content: \"For urban fantasy, integrate magic with modern world. How does magic hide? What happens when mundane meets magical? Create rules for magic's secrecy or revelation.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Fantasy\",\n    tags: [\"fantasy\", \"urban fantasy\", \"modern\", \"integration\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Fantasy Mentor Death Timing\",\n    content: \"The mentor must leave (usually die) to force protagonist's growth. Time it for maximum impact: after teaching, before final battle, in meaningful sacrifice.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Fantasy\",\n    tags: [\"fantasy\", \"mentor\", \"death\", \"growth\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Fantasy Ancient Evil Awakening\",\n    content: \"If using ancient evil trope, make it: truly alien/incomprehensible, have modern relevance, require sacrifice to defeat. Avoid simple good vs. evil.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Fantasy\",\n    tags: [\"fantasy\", \"ancient evil\", \"antagonist\", \"trope\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Fantasy Prophecy Execution\",\n    content: \"Prophecies should be: ambiguous enough to surprise, specific enough to satisfy, and fulfilled in unexpected ways. Let characters misinterpret until the reveal.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Fantasy\",\n    tags: [\"fantasy\", \"prophecy\", \"structure\", \"revelation\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Magical Object Significance\",\n    content: \"Magical objects need: clear powers, meaningful limitations, history/backstory, and thematic significance. Make them more than plot devices—make them story elements.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Fantasy\",\n    tags: [\"fantasy\", \"magical objects\", \"artifacts\", \"meaning\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Fantasy Coming of Age\",\n    content: \"Fantasy coming-of-age needs both: magical/external journey (save world) and internal journey (grow up). Make external stakes mirror internal growth.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Fantasy\",\n    tags: [\"fantasy\", \"coming of age\", \"growth\", \"dual journey\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Fantasy Religion and Gods\",\n    content: \"Are gods real or believed in your world? Active or absent? How does divine power relate to magic? Religious systems should affect plot and character choices.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Fantasy\",\n    tags: [\"fantasy\", \"religion\", \"gods\", \"worldbuilding\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Fantasy Training Montage\",\n    content: \"Show training progression: early failure, small wins, setbacks, breakthrough. Don't skip from novice to master—readers want to see the journey.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Fantasy\",\n    tags: [\"fantasy\", \"training\", \"progression\", \"growth\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Portal Fantasy Adjustment\",\n    content: \"In portal fantasy, show adjustment period: disbelief, wonder, learning rules, choosing to stay/return. Fish-out-of-water creates both humor and stakes.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Fantasy\",\n    tags: [\"fantasy\", \"portal fantasy\", \"adjustment\", \"fish out of water\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Fantasy Race Cultures\",\n    content: \"If using fantasy races (elves, dwarves), make them unique. Don't rely on Tolkien clichés. Give each culture: distinct values, conflicts, and complexity.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Fantasy\",\n    tags: [\"fantasy\", \"races\", \"cultures\", \"originality\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Fantasy Magical Cost\",\n    content: \"Magic must cost something: energy, life force, sanity, moral corruption. Cost creates stakes and prevents magic from solving every problem.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Fantasy\",\n    tags: [\"fantasy\", \"magic\", \"cost\", \"stakes\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Fantasy Betrayal Setup\",\n    content: \"Plant betrayal seeds early: conflicting loyalties, suspicious behavior, too-perfect ally. Make it shocking yet inevitable in hindsight.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Fantasy\",\n    tags: [\"fantasy\", \"betrayal\", \"setup\", \"revelation\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Fantasy Found Family\",\n    content: \"Build found family dynamics: unlikely companions becoming family through shared trials. Show bonds forming through conflict, sacrifice, and victory.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Fantasy\",\n    tags: [\"fantasy\", \"found family\", \"companions\", \"bonds\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Fantasy Final Battle Scope\",\n    content: \"Final battle should be: personal (hero's internal victory), physical (defeating evil), and cosmic (saving world). Layer stakes for maximum impact.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Fantasy\",\n    tags: [\"fantasy\", \"final battle\", \"climax\", \"stakes\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Grimdark Fantasy Balance\",\n    content: \"Grimdark needs hope amid darkness. Without any light, readers disengage. Show: small kindnesses, fragile hope, reasons to keep fighting.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Fantasy\",\n    tags: [\"fantasy\", \"grimdark\", \"balance\", \"hope\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Fantasy Secret Heritage Reveal\",\n    content: \"If protagonist has secret heritage, reveal in stages: hints, partial truth, full revelation. Make it change their understanding of themselves and their world.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Fantasy\",\n    tags: [\"fantasy\", \"secret heritage\", \"revelation\", \"identity\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Fantasy Language Creation\",\n    content: \"Creating fantasy languages? Include just enough for flavor—few words, naming patterns. Too much alienates readers. Suggest depth without overwhelming.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Fantasy\",\n    tags: [\"fantasy\", \"language\", \"worldbuilding\", \"balance\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Fantasy Magical Creatures Role\",\n    content: \"Every creature should serve the story: represent theme, provide obstacle, offer aid, reveal world. Don't include cool creatures without purpose.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Fantasy\",\n    tags: [\"fantasy\", \"creatures\", \"purpose\", \"story function\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Fantasy Low Magic vs High Magic\",\n    content: \"Low magic: rare, mysterious, costly. High magic: common, understood, systematic. Choose based on your story needs. Each creates different stakes and wonder.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Fantasy\",\n    tags: [\"fantasy\", \"magic levels\", \"worldbuilding\", \"choice\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Fantasy Throne Succession\",\n    content: \"Succession conflicts need: legitimate claimants with valid cases, political factions, personal stakes. Make readers understand each side's position.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Fantasy\",\n    tags: [\"fantasy\", \"succession\", \"politics\", \"conflict\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Fantasy Sword/Weapon Significance\",\n    content: \"Legendary weapons need: history, personality, cost of wielding. Make them character elements, not just power-ups. Excalibur matters because of what it represents.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Fantasy\",\n    tags: [\"fantasy\", \"weapons\", \"legendary\", \"significance\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Fantasy Dragon Originality\",\n    content: \"If including dragons, make them unique. Rethink: intelligence, morality, powers, role in world. Avoid Smaug clones. What makes YOUR dragons different?\",\n    category: \"Genre-Specific\",\n    subcategory: \"Fantasy\",\n    tags: [\"fantasy\", \"dragons\", \"originality\", \"creatures\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Fantasy War and Battles\",\n    content: \"Fantasy battles need: clear stakes, strategy, personal moments amid chaos, consequences. Show war's cost. Don't glorify—show reality even in magical setting.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Fantasy\",\n    tags: [\"fantasy\", \"battle\", \"war\", \"consequences\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Fantasy Time Travel Paradox\",\n    content: \"If using time magic, establish rules for paradoxes. Can past be changed? What are consequences? Fixed timeline or branching? Be consistent with your choice.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Fantasy\",\n    tags: [\"fantasy\", \"time travel\", \"paradox\", \"rules\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Fantasy Humble Beginnings\",\n    content: \"Starting hero in humble circumstances? Show their ordinary world clearly before adventure calls. The contrast makes the journey more meaningful.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Fantasy\",\n    tags: [\"fantasy\", \"humble beginnings\", \"contrast\", \"journey\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Fantasy Magical Academy\",\n    content: \"Magical school stories need: varied magic types, compelling teachers/rivals, curriculum that matters to plot, and graduation/culmination. Harry Potter isn't the only template.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Fantasy\",\n    tags: [\"fantasy\", \"magical school\", \"academy\", \"structure\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Fantasy Series Arc Planning\",\n    content: \"For fantasy series: complete arc per book with series questions continuing. Resolve immediate plot, advance series arc, deepen world. Don't make readers wait books for payoff.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Fantasy\",\n    tags: [\"fantasy\", \"series\", \"planning\", \"structure\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Fantasy Necromancy Ethics\",\n    content: \"If your world has necromancy, explore ethics: consent of dead, cost to living, societal impact. Dark magic needs moral complexity, not just evil.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Fantasy\",\n    tags: [\"fantasy\", \"necromancy\", \"ethics\", \"dark magic\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Fantasy Transformation Magic\",\n    content: \"Shapeshifting/transformation needs: limits on duration, cost, identity questions. Does changing form change mind? Explore psychological implications.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Fantasy\",\n    tags: [\"fantasy\", \"shapeshifting\", \"transformation\", \"identity\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Fantasy Satisfying Ending\",\n    content: \"Fantasy endings must: defeat big bad, resolve character arcs, show changed world, hint at future. Balance closure with wonder. Leave readers satisfied but still dreaming.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Fantasy\",\n    tags: [\"fantasy\", \"ending\", \"resolution\", \"satisfaction\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Fantasy Immortal Characters\",\n    content: \"Immortals need: perspective that shows their age, weariness or detachment, reason to care about mortals. How does living forever change a person?\",\n    category: \"Genre-Specific\",\n    subcategory: \"Fantasy\",\n    tags: [\"fantasy\", \"immortality\", \"perspective\", \"character\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Fantasy Curse Breaking\",\n    content: \"Curses need: clear parameters, logical breaking conditions, meaningful cost. True love's kiss is boring—find creative, earned solutions.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Fantasy\",\n    tags: [\"fantasy\", \"curses\", \"breaking\", \"solutions\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Fantasy Genre Expectations\",\n    content: \"Know fantasy subgenre expectations: epic, urban, dark, cozy. Deliver core elements readers expect while adding your unique voice. Don't ignore genre conventions completely.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Fantasy\",\n    tags: [\"fantasy\", \"genre\", \"expectations\", \"conventions\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n\n  // Science Fiction (40 prompts)\n  {\n    title: \"Hard SF Scientific Accuracy\",\n    content: \"For hard SF, research real science. Extrapolate carefully from current knowledge. When you must bend physics, do it consistently. Readers will fact-check.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Science Fiction\",\n    tags: [\"sci-fi\", \"hard SF\", \"science\", \"accuracy\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"SF Technology Impact\",\n    content: \"Every technology changes society. If you have FTL travel, how does that affect: economy, politics, culture, identity? Think through implications.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Science Fiction\",\n    tags: [\"sci-fi\", \"technology\", \"society\", \"impact\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"AI Character Development\",\n    content: \"AI characters need: consistent logic system, evolving understanding, exploration of consciousness. Are they tool, person, or something new? Examine what makes intelligence.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Science Fiction\",\n    tags: [\"sci-fi\", \"AI\", \"artificial intelligence\", \"character\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"First Contact Scenario\",\n    content: \"First contact with aliens requires: communication challenges, cultural misunderstandings, varied human reactions, political implications. Make it complex, not simple hostility or friendship.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Science Fiction\",\n    tags: [\"sci-fi\", \"first contact\", \"aliens\", \"communication\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Dystopian World Building\",\n    content: \"Dystopias need: logical progression from today, control mechanisms, resistance seeds, and hope. Show how we got here. Pure hopelessness doesn't engage readers.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Science Fiction\",\n    tags: [\"sci-fi\", \"dystopian\", \"worldbuilding\", \"society\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Time Travel Rules\",\n    content: \"Establish time travel rules clearly: fixed timeline, branching realities, or paradox creation? Be consistent. Readers will track logic—plot holes in time travel are glaring.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Science Fiction\",\n    tags: [\"sci-fi\", \"time travel\", \"rules\", \"consistency\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Space Opera Scale\",\n    content: \"Space opera needs: galactic stakes, diverse alien cultures, political intrigue, personal stories amid epic scope. Balance huge canvas with intimate character moments.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Science Fiction\",\n    tags: [\"sci-fi\", \"space opera\", \"scale\", \"balance\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Post-Apocalyptic Survival\",\n    content: \"Post-apocalyptic stories explore: what survives of humanity, rebuilding attempts, new societies forming. Focus on human resilience and adaptation, not just survival action.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Science Fiction\",\n    tags: [\"sci-fi\", \"post-apocalyptic\", \"survival\", \"humanity\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Cyberpunk Corporate Dystopia\",\n    content: \"Cyberpunk needs: high tech/low life contrast, corporate control, transhumanism questions, noir atmosphere. Explore technology's failure to solve human problems.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Science Fiction\",\n    tags: [\"sci-fi\", \"cyberpunk\", \"dystopia\", \"corporate\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Alien Biology and Psychology\",\n    content: \"Create truly alien aliens: different biology, incomprehensible motivations, non-human values. Avoid humans in rubber suits. Make readers work to understand them.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Science Fiction\",\n    tags: [\"sci-fi\", \"aliens\", \"biology\", \"truly alien\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Climate Fiction Realism\",\n    content: \"Cli-fi requires: realistic climate science, varied human responses, adaptation and mitigation, political complexity. Show climate change affecting real people.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Science Fiction\",\n    tags: [\"sci-fi\", \"cli-fi\", \"climate\", \"realism\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Generation Ship Society\",\n    content: \"Generation ships need: evolved culture, resource constraints, purpose drift over centuries, arrival/not arrival questions. Explore society in microcosm.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Science Fiction\",\n    tags: [\"sci-fi\", \"generation ship\", \"society\", \"isolation\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Uploaded Consciousness\",\n    content: \"Digital consciousness raises: identity questions, immortality implications, class divisions, what makes us human. Is uploaded mind the same person?\",\n    category: \"Genre-Specific\",\n    subcategory: \"Science Fiction\",\n    tags: [\"sci-fi\", \"uploaded consciousness\", \"identity\", \"transhumanism\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Military SF Combat Realism\",\n    content: \"Military SF needs: realistic tactics, chain of command, military culture, cost of war. Research actual military operations. Show strategy, not just action.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Science Fiction\",\n    tags: [\"sci-fi\", \"military SF\", \"combat\", \"realism\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Genetic Engineering Ethics\",\n    content: \"Genetic modification stories explore: designer babies, enhancement ethics, new species creation, unintended consequences. Make moral questions complex.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Science Fiction\",\n    tags: [\"sci-fi\", \"genetic engineering\", \"ethics\", \"enhancement\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Parallel Universe Rules\",\n    content: \"Parallel worlds need: clear divergence points, rules for crossing between, unique qualities per universe. What makes each timeline different and why?\",\n    category: \"Genre-Specific\",\n    subcategory: \"Science Fiction\",\n    tags: [\"sci-fi\", \"parallel worlds\", \"multiverse\", \"rules\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Nanotechnology Implications\",\n    content: \"Nanotech changes: medicine, manufacturing, warfare, environment. Explore both utopian possibilities and gray goo scenarios. Show transformation of daily life.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Science Fiction\",\n    tags: [\"sci-fi\", \"nanotechnology\", \"implications\", \"transformation\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Singularity Event\",\n    content: \"Technological singularity stories need: buildup to event, the moment of change, post-human world. Explore what happens when AI surpasses human intelligence.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Science Fiction\",\n    tags: [\"sci-fi\", \"singularity\", \"AI\", \"post-human\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Faster Than Light Travel\",\n    content: \"If you have FTL: explain the mechanism (handwave if needed), show limitations, explore implications for communication and unity. How does instant travel change everything?\",\n    category: \"Genre-Specific\",\n    subcategory: \"Science Fiction\",\n    tags: [\"sci-fi\", \"FTL\", \"space travel\", \"implications\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Robot Rights and Personhood\",\n    content: \"Explore robot/AI rights: when does intelligence deserve personhood? What are their needs? How do humans react? Make it parallel to real civil rights struggles.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Science Fiction\",\n    tags: [\"sci-fi\", \"robots\", \"rights\", \"personhood\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Colonizing Other Worlds\",\n    content: \"Space colonization needs: realistic challenges (gravity, atmosphere, resources), cultural evolution, Earth relationship, native life questions. Show the human cost.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Science Fiction\",\n    tags: [\"sci-fi\", \"colonization\", \"space\", \"challenges\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Virtual Reality Immersion\",\n    content: \"Deep VR raises: reality vs simulation questions, addiction, escapism, new experiences. Explore why people might prefer virtual to real.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Science Fiction\",\n    tags: [\"sci-fi\", \"VR\", \"virtual reality\", \"immersion\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Teleportation Paradox\",\n    content: \"Teleportation questions: are you destroyed and copied, or actually transported? Is the arrival the same person? Explore identity and continuity of consciousness.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Science Fiction\",\n    tags: [\"sci-fi\", \"teleportation\", \"identity\", \"consciousness\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Cryogenic Sleep Implications\",\n    content: \"Cryo-sleep affects: aging, relationships, missing decades/centuries, culture shock. Explore being unstuck in time, watching world change without you.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Science Fiction\",\n    tags: [\"sci-fi\", \"cryogenic\", \"time\", \"displacement\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Pandemic/Plague SF\",\n    content: \"Disease outbreak stories need: scientific accuracy, varied responses, societal breakdown and rebuilding, human resilience. Show both horror and hope.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Science Fiction\",\n    tags: [\"sci-fi\", \"pandemic\", \"disease\", \"society\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Memory Manipulation Tech\",\n    content: \"Memory technology raises: identity questions, crime implications, therapeutic uses, abuse potential. If memories can be altered, what is truth?\",\n    category: \"Genre-Specific\",\n    subcategory: \"Science Fiction\",\n    tags: [\"sci-fi\", \"memory\", \"identity\", \"truth\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Asteroid Mining Economy\",\n    content: \"Space mining changes: Earth economy, power structures, who owns space resources, environmental costs. Explore new frontiers of capitalism.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Science Fiction\",\n    tags: [\"sci-fi\", \"mining\", \"economy\", \"space\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Hive Mind Society\",\n    content: \"Hive minds/collective consciousness need: individual vs collective balance, privacy loss/gain, decision-making process. What's gained and lost in shared consciousness?\",\n    category: \"Genre-Specific\",\n    subcategory: \"Science Fiction\",\n    tags: [\"sci-fi\", \"hive mind\", \"collective\", \"consciousness\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Terraforming Challenges\",\n    content: \"Terraforming requires: scientific realism, time scales, ethical questions about changing worlds, existing ecosystem destruction. Show the centuries-long process.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Science Fiction\",\n    tags: [\"sci-fi\", \"terraforming\", \"planets\", \"transformation\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Cloning and Identity\",\n    content: \"Clone stories explore: nature vs nurture, individuality, rights of clones, original vs copy. Is a clone a person or property?\",\n    category: \"Genre-Specific\",\n    subcategory: \"Science Fiction\",\n    tags: [\"sci-fi\", \"cloning\", \"identity\", \"ethics\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Energy Crisis Solutions\",\n    content: \"Future energy stories need: realistic science or believable fiction, implementation challenges, political resistance, environmental impact. Show how energy shapes society.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Science Fiction\",\n    tags: [\"sci-fi\", \"energy\", \"technology\", \"society\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Interstellar Communication Lag\",\n    content: \"If no FTL, communication has lag—years or decades. How does this affect: relationships, politics, unity, independence? Explore isolation of distance.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Science Fiction\",\n    tags: [\"sci-fi\", \"communication\", \"lag\", \"distance\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Augmented Reality Integration\",\n    content: \"AR future needs: how it changes perception, info overload, privacy elimination, digital vs physical blur. Show world where data layers over reality.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Science Fiction\",\n    tags: [\"sci-fi\", \"AR\", \"augmented reality\", \"integration\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Galactic Empire Logistics\",\n    content: \"Galactic empires require: communication systems, governance across light-years, cultural diversity, rebellion seeds. How do you rule across impossible distances?\",\n    category: \"Genre-Specific\",\n    subcategory: \"Science Fiction\",\n    tags: [\"sci-fi\", \"empire\", \"logistics\", \"governance\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Quantum Computing Impact\",\n    content: \"Quantum computers change: encryption, simulations, AI capabilities, scientific discovery. Explore the leap in computational power's effects.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Science Fiction\",\n    tags: [\"sci-fi\", \"quantum computing\", \"technology\", \"impact\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Zero Gravity Life\",\n    content: \"Life in zero-G affects: bodies, psychology, culture, architecture. Show adaptation to environment humans weren't built for. Make space life feel real.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Science Fiction\",\n    tags: [\"sci-fi\", \"zero gravity\", \"space\", \"adaptation\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"SF Social Commentary\",\n    content: \"Best SF comments on today by extrapolating to tomorrow. What current trend are you amplifying? Make your future a mirror for present concerns.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Science Fiction\",\n    tags: [\"sci-fi\", \"social commentary\", \"themes\", \"relevance\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Biological Enhancement\",\n    content: \"Body modification/enhancement creates: enhanced vs baseline humans, accessibility issues, identity changes, military applications. Explore transhuman futures.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Science Fiction\",\n    tags: [\"sci-fi\", \"enhancement\", \"transhuman\", \"modification\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"SF Genre Balancing\",\n    content: \"Balance hard science with human story. Too much tech lecture bores, too little loses SF readers. Use: character reactions to explain, action to demonstrate, wonder to engage.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Science Fiction\",\n    tags: [\"sci-fi\", \"balance\", \"science\", \"story\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n\n  \n  // Horror (40 prompts)\n  {\n    title: \"Horror Atmosphere Building\",\n    content: \"Create horror atmosphere through: sensory details (smells, sounds), pacing (slow dread building), and the unknown. What you don't show is often scarier than what you do.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Horror\",\n    tags: [\"horror\", \"atmosphere\", \"tension\", \"fear\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Jump Scare vs. Dread Balance\",\n    content: \"Balance cheap jump scares with sustained dread. Build tension slowly, release occasionally, but keep underlying unease constant. True horror lingers.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Horror\",\n    tags: [\"horror\", \"scares\", \"dread\", \"tension\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Monster Rules and Limits\",\n    content: \"Your monster/threat needs clear rules: what it can/can't do, what stops it, how it hunts. Rules create strategy for characters and tension for readers.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Horror\",\n    tags: [\"horror\", \"monster\", \"rules\", \"threat\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Psychological Horror Unreality\",\n    content: \"Psychological horror blurs real/unreal: unreliable perceptions, gaslighting, sanity questions. Make readers doubt what's happening alongside the protagonist.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Horror\",\n    tags: [\"horror\", \"psychological\", \"unreliable\", \"sanity\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Body Horror Visceral Impact\",\n    content: \"Body horror needs: specific grotesque details, transformation horror, violation of bodily autonomy. Make physical wrongness deeply disturbing.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Horror\",\n    tags: [\"horror\", \"body horror\", \"visceral\", \"grotesque\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Haunted House Setting\",\n    content: \"Haunted locations need: history of trauma, specific manifestations, escalating activity, and characters who can't easily leave. Make the place a character.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Horror\",\n    tags: [\"horror\", \"haunted house\", \"setting\", \"ghosts\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Survival Horror Resources\",\n    content: \"In survival horror, limit: weapons, light, information, escape routes. Force impossible choices. Scarcity breeds terror and tough decisions.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Horror\",\n    tags: [\"horror\", \"survival\", \"resources\", \"scarcity\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Horror Pacing Escalation\",\n    content: \"Escalate horror gradually: unease, fear, terror, horror. Each level should feel worse than the last. Build to unbearable climax.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Horror\",\n    tags: [\"horror\", \"pacing\", \"escalation\", \"building\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Cosmic Horror Incomprehensibility\",\n    content: \"Cosmic horror requires: entities beyond understanding, insignificance of humanity, sanity-breaking revelations. The universe doesn't care. That's the horror.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Horror\",\n    tags: [\"horror\", \"cosmic horror\", \"lovecraftian\", \"incomprehensible\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Final Girl/Survivor Arc\",\n    content: \"Final survivors need: specific skills/traits that save them, transformation through trauma, earned victory. Make survival feel like both win and loss.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Horror\",\n    tags: [\"horror\", \"final girl\", \"survivor\", \"arc\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Horror Taboo Breaking\",\n    content: \"Horror often breaks taboos: harm to children, violation of sanctity, destruction of safety. Handle with care. Shock should serve story, not just shock.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Horror\",\n    tags: [\"horror\", \"taboos\", \"boundaries\", \"content warning\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Demon/Possession Horror\",\n    content: \"Possession needs: loss of control horror, personality change, exorcism rules, and questions of what returns. Is the person still there?\",\n    category: \"Genre-Specific\",\n    subcategory: \"Horror\",\n    tags: [\"horror\", \"possession\", \"demons\", \"exorcism\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Slasher Formula Innovation\",\n    content: \"Slashers need: memorable killer, creative kills, but also: subvert formula, develop victims beyond types, explore killer psychology. Make it fresh.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Horror\",\n    tags: [\"horror\", \"slasher\", \"killer\", \"innovation\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Folk Horror Isolation\",\n    content: \"Folk horror needs: isolated community, ancient customs, outsider protagonist, nature as threat. Explore horror of the traditional and rural.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Horror\",\n    tags: [\"horror\", \"folk horror\", \"isolation\", \"customs\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Vampire/Creature Originality\",\n    content: \"If using classic monsters, make them fresh: new mythology, unexpected weakness, modern context. What makes YOUR vampire different from Dracula?\",\n    category: \"Genre-Specific\",\n    subcategory: \"Horror\",\n    tags: [\"horror\", \"vampires\", \"monsters\", \"originality\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Found Footage Constraints\",\n    content: \"Found footage needs: reason for filming, believable camera presence, limited perspective advantages. Use constraints creatively.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Horror\",\n    tags: [\"horror\", \"found footage\", \"POV\", \"constraints\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Zombie Apocalypse Survival\",\n    content: \"Zombie stories are about: human breakdown, survival ethics, who the real monsters are. Zombies are backdrop—humans are the story.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Horror\",\n    tags: [\"horror\", \"zombies\", \"apocalypse\", \"humanity\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Cursed Object Horror\",\n    content: \"Cursed objects need: specific curse mechanism, history of victims, temptation to keep it, difficulty destroying it. Make possession itself dangerous.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Horror\",\n    tags: [\"horror\", \"cursed objects\", \"artifacts\", \"curses\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Doppelganger/Imposter Horror\",\n    content: \"Doppelgangers create: trust erosion, identity questions, paranoia about who's real. Exploit fear of the familiar made wrong.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Horror\",\n    tags: [\"horror\", \"doppelganger\", \"imposter\", \"identity\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Nightmare/Dream Horror\",\n    content: \"Dream horror needs: surreal logic, can't wake up trope used well, bleeding into reality, symbolic manifestations. Make sleep terrifying.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Horror\",\n    tags: [\"horror\", \"nightmares\", \"dreams\", \"surreal\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Child Antagonist Horror\",\n    content: \"Creepy children work through: innocence corrupted, wrongness in the familiar, power imbalance reversed. Handle child endangerment carefully.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Horror\",\n    tags: [\"horror\", \"children\", \"creepy\", \"innocence\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Cabin in the Woods Trope\",\n    content: \"Isolated location horror needs: reason they can't leave, communication cut off, civilization far away, threat closing in. Use isolation strategically.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Horror\",\n    tags: [\"horror\", \"isolation\", \"cabin\", \"trapped\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Ritual Horror Elements\",\n    content: \"Horror rituals need: specific steps, things that can go wrong, ancient origins, terrible purpose. Make ceremony itself frightening.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Horror\",\n    tags: [\"horror\", \"rituals\", \"ceremony\", \"occult\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Transformation Horror\",\n    content: \"Body transformation horror shows: gradual change, loss of humanity, physical/mental corruption, point of no return. Make becoming monstrous terrifying.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Horror\",\n    tags: [\"horror\", \"transformation\", \"body horror\", \"corruption\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Technology Horror Modern\",\n    content: \"Modern horror uses: surveillance, AI threats, digital haunting, technology turning against us. Explore contemporary fears through tech.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Horror\",\n    tags: [\"horror\", \"technology\", \"modern\", \"digital\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Environmental Horror\",\n    content: \"Nature as threat needs: human intrusion consequences, ecosystem revenge, isolation in wilderness, primal fears. Show nature's indifference to humanity.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Horror\",\n    tags: [\"horror\", \"nature\", \"environment\", \"wilderness\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Slow Burn Horror Building\",\n    content: \"Slow burn horror requires: patience in building, small wrongnesses adding up, delayed gratification, explosive payoff. Trust the build.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Horror\",\n    tags: [\"horror\", \"slow burn\", \"building\", \"patience\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Madness Descent Arc\",\n    content: \"Showing character's descent into madness: unreliable narration increasing, reality breaking down, others' concern, point where recovery impossible.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Horror\",\n    tags: [\"horror\", \"madness\", \"descent\", \"sanity\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Religious Horror Elements\",\n    content: \"Religious horror uses: faith tested, divine abandonment, demonic forces, crisis of belief. Explore spiritual terror and corruption.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Horror\",\n    tags: [\"horror\", \"religious\", \"faith\", \"demonic\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Uncanny Valley Effect\",\n    content: \"Exploit uncanny valley: almost human but wrong, familiar made strange, small wrongnesses in normal things. The nearly-right is most disturbing.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Horror\",\n    tags: [\"horror\", \"uncanny valley\", \"wrongness\", \"almost human\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Time Loop Horror\",\n    content: \"Horror time loops need: inescapability, variations each loop, slow understanding, and escalating danger. Repetition itself becomes horror.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Horror\",\n    tags: [\"horror\", \"time loop\", \"repetition\", \"trapped\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Sympathetic Monster\",\n    content: \"Sympathetic monsters need: understandable motivation, tragedy in their existence, moments of humanity, but remaining threatening. Complexity doesn't erase danger.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Horror\",\n    tags: [\"horror\", \"monster\", \"sympathy\", \"complex\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"The Rules of Horror Survival\",\n    content: \"Establish and subvert horror survival rules. Readers expect: sex = death, splitting up = death. Know the rules to break them effectively.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Horror\",\n    tags: [\"horror\", \"rules\", \"survival\", \"subversion\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Sensory Horror Details\",\n    content: \"Use all senses for horror: rotting smell, wet sounds, slimy texture, metallic taste of fear. Make horror viscerally real.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Horror\",\n    tags: [\"horror\", \"sensory\", \"visceral\", \"details\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Anticipatory Dread\",\n    content: \"Build dread through anticipation: characters knowing danger approaches, readers knowing more than characters, inevitable doom approaching. Waiting is its own horror.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Horror\",\n    tags: [\"horror\", \"dread\", \"anticipation\", \"waiting\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"False Security Destruction\",\n    content: \"Establish safety/normalcy, then shatter it. Safe spaces violated, trusted people corrupted, sanctuary invaded. Destroy every refuge.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Horror\",\n    tags: [\"horror\", \"safety\", \"violation\", \"sanctuary\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Horror Ending Impact\",\n    content: \"Horror endings can be: survival with trauma, pyrrhic victory, continued threat, or total destruction. Choose based on message. Earn whatever ending you choose.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Horror\",\n    tags: [\"horror\", \"ending\", \"resolution\", \"impact\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Contagion Horror Spread\",\n    content: \"Contagion horror (literal or metaphorical) needs: infection mechanics, paranoia about who's infected, impossible containment, society breakdown.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Horror\",\n    tags: [\"horror\", \"contagion\", \"infection\", \"spread\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Inescapable Fate Horror\",\n    content: \"Fate/prophecy horror uses: inevitability, attempts to escape making it worse, all roads leading to doom. Show that some horrors can't be avoided.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Horror\",\n    tags: [\"horror\", \"fate\", \"inevitability\", \"prophecy\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Horror Genre Balance\",\n    content: \"Know your horror subgenre expectations but surprise within them. Deliver scares promised, but add depth. Horror can be literary and terrifying.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Horror\",\n    tags: [\"horror\", \"genre\", \"balance\", \"expectations\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  \n  // Literary Fiction (40 prompts)\n  {\n    title: \"Literary Theme Development\",\n    content: \"Literary fiction explores themes deeply. Identify your central question about human experience. Weave theme through: plot, character, symbol, motif. Make every element resonate thematically.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Literary Fiction\",\n    tags: [\"literary\", \"theme\", \"depth\", \"meaning\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Prose Style Elevation\",\n    content: \"Literary prose needs: intentional word choice, sentence rhythm variation, imagery richness. Every sentence should reward close reading. Polish until language sings.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Literary Fiction\",\n    tags: [\"literary\", \"prose\", \"style\", \"craft\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Character Complexity Literary\",\n    content: \"Literary characters need: psychological depth, moral ambiguity, internal contradiction, realistic growth. Avoid archetypes—create fully human characters.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Literary Fiction\",\n    tags: [\"literary\", \"character\", \"depth\", \"psychology\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Symbolism and Motif\",\n    content: \"Develop symbols and motifs that: recur meaningfully, deepen theme, work on multiple levels. Subtlety matters—trust readers to find meaning.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Literary Fiction\",\n    tags: [\"literary\", \"symbolism\", \"motif\", \"layering\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Plot vs. Story Literary\",\n    content: \"Literary fiction often prioritizes story (internal journey) over plot (external events). Focus on: emotional truth, character revelation, thematic resonance.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Literary Fiction\",\n    tags: [\"literary\", \"story\", \"plot\", \"internal\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Literary Time Structure\",\n    content: \"Experiment with: non-linear narrative, fragmented chronology, time as theme. Structure should serve artistic purpose, not just novelty.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Literary Fiction\",\n    tags: [\"literary\", \"time\", \"structure\", \"experimentation\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Social Commentary Literary\",\n    content: \"Literary fiction often critiques society. Embed commentary in: character experience, setting details, plot consequences. Show, don't lecture.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Literary Fiction\",\n    tags: [\"literary\", \"social commentary\", \"critique\", \"subtlety\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Unreliable Narrator Depth\",\n    content: \"Literary unreliable narrators reveal: deeper truths through lies, psychological complexity, questions about truth itself. Make unreliability meaningful.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Literary Fiction\",\n    tags: [\"literary\", \"unreliable narrator\", \"truth\", \"complexity\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Metaphor and Imagery Richness\",\n    content: \"Craft metaphors that: illuminate theme, surprise with freshness, layer meaning. Every image should do double duty—surface and depth.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Literary Fiction\",\n    tags: [\"literary\", \"metaphor\", \"imagery\", \"depth\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Literary Voice Distinctiveness\",\n    content: \"Develop a narrative voice that: reflects thematic concerns, creates atmosphere, distinguishes your work. Voice should be inseparable from meaning.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Literary Fiction\",\n    tags: [\"literary\", \"voice\", \"style\", \"distinctiveness\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Ambiguous Ending Crafting\",\n    content: \"Literary fiction can embrace ambiguity. Leave questions unanswered, but make ambiguity purposeful. Satisfy emotionally even when plot is open.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Literary Fiction\",\n    tags: [\"literary\", \"ambiguity\", \"ending\", \"open\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Epiphany Moment Creation\",\n    content: \"Literary epiphanies should: feel earned, change character understanding, resonate thematically. Show the moment of realization subtly but powerfully.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Literary Fiction\",\n    tags: [\"literary\", \"epiphany\", \"realization\", \"moment\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Setting as Metaphor\",\n    content: \"In literary fiction, setting often mirrors: internal states, thematic concerns, character arcs. Make place meaningful beyond backdrop.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Literary Fiction\",\n    tags: [\"literary\", \"setting\", \"metaphor\", \"symbolism\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Stream of Consciousness Technique\",\n    content: \"Stream of consciousness needs: authentic thought patterns, meaningful fragments, rhythm of consciousness. Make interior monologue revelatory.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Literary Fiction\",\n    tags: [\"literary\", \"stream of consciousness\", \"interior\", \"technique\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Literary Dialogue Subtext\",\n    content: \"Every line of dialogue should: reveal character, advance theme, contain subtext. What's unsaid matters as much as what's spoken.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Literary Fiction\",\n    tags: [\"literary\", \"dialogue\", \"subtext\", \"depth\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Existential Questions Exploration\",\n    content: \"Literary fiction often asks: What does it mean to be human? How should we live? What matters? Explore through character experience, not philosophy lectures.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Literary Fiction\",\n    tags: [\"literary\", \"existential\", \"philosophy\", \"questions\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Cultural Specificity Depth\",\n    content: \"Ground literary work in specific: time, place, culture. Universal themes emerge from particular details. Specificity creates authenticity and resonance.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Literary Fiction\",\n    tags: [\"literary\", \"culture\", \"specificity\", \"authenticity\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Literary Quiet Moments\",\n    content: \"Literary fiction finds meaning in quiet moments: observation, reflection, small interactions. Not everything needs dramatic stakes—sometimes beauty is enough.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Literary Fiction\",\n    tags: [\"literary\", \"quiet moments\", \"reflection\", \"beauty\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Sentence as Art\",\n    content: \"Craft sentences as artistic units: consider sound, rhythm, balance. Read aloud. Each sentence should be defensible as a choice.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Literary Fiction\",\n    tags: [\"literary\", \"sentences\", \"craft\", \"artistry\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Privilege and Perspective\",\n    content: \"Examine perspective and privilege in your narrative. Whose story is centered? Who's marginalized? What assumptions does the narrative make? Be intentional.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Literary Fiction\",\n    tags: [\"literary\", \"perspective\", \"privilege\", \"awareness\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Lyrical Prose Balance\",\n    content: \"Balance lyrical beauty with clarity. Gorgeous prose shouldn't obscure meaning. Serve the story, even as you elevate the language.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Literary Fiction\",\n    tags: [\"literary\", \"lyrical\", \"prose\", \"balance\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Historical Literary Resonance\",\n    content: \"Historical literary fiction uses past to: illuminate present, explore timeless themes, show how we got here. Make history feel immediate and relevant.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Literary Fiction\",\n    tags: [\"literary\", \"historical\", \"resonance\", \"relevance\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Generational Story Layers\",\n    content: \"Multi-generational literary works show: patterns repeating, trauma passing down, hope persisting. Connect past to present meaningfully.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Literary Fiction\",\n    tags: [\"literary\", \"generational\", \"family\", \"patterns\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Literary Minimalism\",\n    content: \"Minimalist literary fiction uses: sparse prose, suggestive details, significant silences. Trust readers to infer. Less can be profoundly more.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Literary Fiction\",\n    tags: [\"literary\", \"minimalism\", \"sparse\", \"restraint\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Memory and Time Meditation\",\n    content: \"Explore how: memory reshapes past, time distorts truth, present colors recollection. Memory itself can be theme and structure.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Literary Fiction\",\n    tags: [\"literary\", \"memory\", \"time\", \"truth\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Identity Formation Exploration\",\n    content: \"Literary coming-of-age explores: identity formation, self-discovery, disillusionment, growth. Show becoming, not just being.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Literary Fiction\",\n    tags: [\"literary\", \"identity\", \"coming of age\", \"formation\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Literary Epistolary Form\",\n    content: \"Letters/documents as narrative create: intimacy, period authenticity, multiple perspectives, fragmented truth. Use form to enhance meaning.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Literary Fiction\",\n    tags: [\"literary\", \"epistolary\", \"letters\", \"form\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Class and Economics Literary\",\n    content: \"Explore economic reality: how money shapes lives, class determines options, poverty or wealth affects psychology. Make economics deeply personal.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Literary Fiction\",\n    tags: [\"literary\", \"class\", \"economics\", \"society\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Ordinary Made Extraordinary\",\n    content: \"Literary fiction finds: profound in mundane, universal in specific, extraordinary in ordinary. Transform everyday life through attention and language.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Literary Fiction\",\n    tags: [\"literary\", \"ordinary\", \"transformation\", \"attention\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Fragmented Narrative Cohesion\",\n    content: \"Fragmented narratives need: unifying theme, pattern in chaos, emotional through-line. Fragments should cohere into greater whole.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Literary Fiction\",\n    tags: [\"literary\", \"fragmented\", \"structure\", \"cohesion\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Death and Mortality Themes\",\n    content: \"Explore death through: anticipation, grief, legacy, meaning in face of mortality. Make death illuminate life.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Literary Fiction\",\n    tags: [\"literary\", \"death\", \"mortality\", \"meaning\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Literary Autofiction Balance\",\n    content: \"Autofiction blurs fiction/autobiography. Navigate: truth vs. art, privacy vs. honesty, real people as characters. Be ethically aware.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Literary Fiction\",\n    tags: [\"literary\", \"autofiction\", \"autobiography\", \"ethics\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Parallelism and Structure\",\n    content: \"Use parallel: plots, characters, timelines, images. Structural echoes create: unity, thematic resonance, satisfying symmetry.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Literary Fiction\",\n    tags: [\"literary\", \"parallelism\", \"structure\", \"echo\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Literary Magical Realism\",\n    content: \"Magical realism blends: real and fantastic seamlessly, uses magic to illuminate truth, treats impossible as normal. Magic should deepen reality, not escape it.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Literary Fiction\",\n    tags: [\"literary\", \"magical realism\", \"fantastic\", \"truth\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Place as Character Literary\",\n    content: \"Elevate setting to character status: distinct personality, active force in story, shaped by and shaping characters. Make place inseparable from narrative.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Literary Fiction\",\n    tags: [\"literary\", \"place\", \"setting\", \"character\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Intertextuality and Allusion\",\n    content: \"Reference: other texts, myths, history. Intertextuality creates: layers of meaning, conversation with tradition, richness for informed readers.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Literary Fiction\",\n    tags: [\"literary\", \"intertextuality\", \"allusion\", \"reference\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Ekphrasis - Art as Inspiration\",\n    content: \"Writing about art (ekphrasis) can: structure narrative, provide metaphor, explore creativity itself. Use visual art to inspire literary art.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Literary Fiction\",\n    tags: [\"literary\", \"ekphrasis\", \"art\", \"inspiration\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Literary Attention to Language\",\n    content: \"Every word choice matters. Consider: denotation, connotation, sound, rhythm, associations. Polish until each word is inevitable.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Literary Fiction\",\n    tags: [\"literary\", \"language\", \"word choice\", \"precision\"],\n    persona: \"editor\",\n    targetRole: \"writer\",\n    isFeatured: true,\n  },\n  {\n    title: \"Silence and Negative Space\",\n    content: \"What you don't say matters. Use: ellipses, gaps, unspoken truths, silence as communication. Negative space creates resonance.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Literary Fiction\",\n    tags: [\"literary\", \"silence\", \"negative space\", \"unsaid\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Literary Genre Defiance\",\n    content: \"Literary fiction can: transcend genre, blend forms, defy categorization. But understand conventions before breaking them. Make rule-breaking purposeful.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Literary Fiction\",\n    tags: [\"literary\", \"genre\", \"defiance\", \"experimentation\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Cozy Mystery Formula Mastery\",\n    content: \"Cozy mystery essentials: amateur detective, small community setting, minimal violence, puzzle focus, satisfying resolution. Include quirky characters and a touch of humor. Keep it light but clever.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Mystery\",\n    tags: [\"cozy mystery\", \"formula\", \"amateur detective\", \"puzzle\"],\n    persona: \"coach\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Dark Academia Atmosphere Building\",\n    content: \"Create dark academia atmosphere: elite institution, scholarly obsession, Gothic architecture, secret societies, moral ambiguity. Balance intellectualism with darkness. Make learning dangerous.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Dark Academia\",\n    tags: [\"dark academia\", \"atmosphere\", \"academic\", \"Gothic\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Space Opera Scope and Scale\",\n    content: \"Space opera needs: galactic-scale conflicts, diverse alien cultures, political intrigue, grand adventure. Balance epic scope with intimate character moments. Make the universe feel vast yet personal.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Science Fiction\",\n    tags: [\"space opera\", \"epic\", \"scale\", \"science fiction\"],\n    persona: \"muse\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n  {\n    title: \"Paranormal Romance Heat Levels\",\n    content: \"Choose your heat level: sweet (kisses only), sensual (suggestion), steamy (explicit). Stay consistent with reader expectations for your subgenre. Balance paranormal elements with romantic tension.\",\n    category: \"Genre-Specific\",\n    subcategory: \"Paranormal Romance\",\n    tags: [\"paranormal romance\", \"heat level\", \"sensuality\", \"romance\"],\n    persona: \"any\",\n    targetRole: \"writer\",\n    isFeatured: false,\n  },\n\n  // ==================== GHOSTWRITING (100 prompts) ====================\n  \n  {\n    title: \"Client Voice Capture Interview\",\n    content: \"Interview client to capture voice: How do they speak? What phrases do they use? What's their rhythm? Record and transcribe conversations to study their natural patterns.\",\n    category: \"Ghostwriting\",\n    subcategory: \"Voice Matching\",\n    tags: [\"ghostwriting\", \"voice\", \"interview\", \"capture\"],\n    persona: \"any\",\n    targetRole: \"ghostwriter\",\n    isFeatured: true,\n  },\n  {\n    title: \"Voice Matching Practice\",\n    content: \"Study client's existing writing: emails, articles, speeches. Identify: sentence structure preferences, vocabulary level, tonal patterns. Practice mimicking before writing.\",\n    category: \"Ghostwriting\",\n    subcategory: \"Voice Matching\",\n    tags: [\"ghostwriting\", \"voice matching\", \"study\", \"practice\"],\n    persona: \"any\",\n    targetRole: \"ghostwriter\",\n    isFeatured: false,\n  },\n  {\n    title: \"Authenticity in Client Stories\",\n    content: \"When ghostwriting memoir/autobiography, capture: emotional truth, specific details, client's perspective. Make it their story told their way, even if you craft the words.\",\n    category: \"Ghostwriting\",\n    subcategory: \"Memoir/Autobiography\",\n    tags: [\"ghostwriting\", \"memoir\", \"authenticity\", \"truth\"],\n    persona: \"any\",\n    targetRole: \"ghostwriter\",\n    isFeatured: true,\n  },\n  {\n    title: \"Client Collaboration Process\",\n    content: \"Establish: regular check-ins, revision rounds, approval process. Keep client involved without micromanaging. Balance their vision with your expertise.\",\n    category: \"Ghostwriting\",\n    subcategory: \"Collaboration\",\n    tags: [\"ghostwriting\", \"collaboration\", \"process\", \"communication\"],\n    persona: \"any\",\n    targetRole: \"ghostwriter\",\n    isFeatured: false,\n  },\n  {\n    title: \"Business Book Ghostwriting\",\n    content: \"Business books need: expertise showcased, actionable insights, credibility established, accessible language. Translate industry knowledge for general readers.\",\n    category: \"Ghostwriting\",\n    subcategory: \"Business\",\n    tags: [\"ghostwriting\", \"business\", \"expertise\", \"accessibility\"],\n    persona: \"any\",\n    targetRole: \"ghostwriter\",\n    isFeatured: false,\n  },\n  {\n    title: \"Ghostwriting Sensitive Topics\",\n    content: \"When client shares trauma/difficult experiences: handle with care, verify they're ready to share publicly, respect boundaries, maintain dignity.\",\n    category: \"Ghostwriting\",\n    subcategory: \"Sensitive Content\",\n    tags: [\"ghostwriting\", \"trauma\", \"sensitivity\", \"care\"],\n    persona: \"coach\",\n    targetRole: \"ghostwriter\",\n    isFeatured: false,\n  },\n  {\n    title: \"Research Client's Field\",\n    content: \"Become expert in client's field: read extensively, learn jargon, understand industry. You must write with authority even if it's not your expertise.\",\n    category: \"Ghostwriting\",\n    subcategory: \"Research\",\n    tags: [\"ghostwriting\", \"research\", \"expertise\", \"industry\"],\n    persona: \"any\",\n    targetRole: \"ghostwriter\",\n    isFeatured: false,\n  },\n  {\n    title: \"Ghostwriting Agreements Legal\",\n    content: \"Ensure contract covers: payment terms, confidentiality, credit/non-credit, revision limits, rights. Protect both parties legally.\",\n    category: \"Ghostwriting\",\n    subcategory: \"Business\",\n    tags: [\"ghostwriting\", \"contract\", \"legal\", \"agreement\"],\n    persona: \"any\",\n    targetRole: \"ghostwriter\",\n    isFeatured: false,\n  },\n  {\n    title: \"Structuring Client's Ideas\",\n    content: \"Client has ideas but no structure. Your job: organize thoughts logically, create narrative flow, build coherent framework. Turn chaos into clarity.\",\n    category: \"Ghostwriting\",\n    subcategory: \"Structure\",\n    tags: [\"ghostwriting\", \"structure\", \"organization\", \"framework\"],\n    persona: \"coach\",\n    targetRole: \"ghostwriter\",\n    isFeatured: true,\n  },\n  {\n    title: \"Celebrity Ghostwriting Challenges\",\n    content: \"Celebrity clients bring: limited time, high expectations, public personas. Manage: scheduling challenges, maintaining authenticity, balancing image with truth.\",\n    category: \"Ghostwriting\",\n    subcategory: \"Celebrity\",\n    tags: [\"ghostwriting\", \"celebrity\", \"challenges\", \"image\"],\n    persona: \"any\",\n    targetRole: \"ghostwriter\",\n    isFeatured: false,\n  },\n  {\n    title: \"Fact-Checking Client Claims\",\n    content: \"Verify: dates, events, achievements client mentions. Protect both your reputation and theirs from factual errors. Research claims independently.\",\n    category: \"Ghostwriting\",\n    subcategory: \"Research\",\n    tags: [\"ghostwriting\", \"fact-checking\", \"verification\", \"accuracy\"],\n    persona: \"any\",\n    targetRole: \"ghostwriter\",\n    isFeatured: false,\n  },\n  {\n    title: \"Ghostwriting Sample Chapter\",\n    content: \"Write strong sample chapter to: establish voice, demonstrate understanding, secure project. Make it showcase client's story and your skill.\",\n    category: \"Ghostwriting\",\n    subcategory: \"Business\",\n    tags: [\"ghostwriting\", \"sample\", \"demonstration\", \"securing work\"],\n    persona: \"any\",\n    targetRole: \"ghostwriter\",\n    isFeatured: false,\n  },\n  {\n    title: \"Political Memoir Ghostwriting\",\n    content: \"Political memoirs need: legacy framing, controversial periods handled carefully, policy explanations accessible, human moments balancing politics.\",\n    category: \"Ghostwriting\",\n    subcategory: \"Political\",\n    tags: [\"ghostwriting\", \"political\", \"memoir\", \"legacy\"],\n    persona: \"any\",\n    targetRole: \"ghostwriter\",\n    isFeatured: false,\n  },\n  {\n    title: \"Client Interview Techniques\",\n    content: \"Ask: open-ended questions, follow-up for details, prompts for specific stories. Record everything—golden details emerge in casual conversation.\",\n    category: \"Ghostwriting\",\n    subcategory: \"Interview\",\n    tags: [\"ghostwriting\", \"interview\", \"techniques\", \"questions\"],\n    persona: \"any\",\n    targetRole: \"ghostwriter\",\n    isFeatured: true,\n  },\n  {\n    title: \"Balancing Truth and Privacy\",\n    content: \"Client wants truth told but protects others. Navigate: changed names, composite characters, vague details. Maintain story integrity while respecting privacy.\",\n    category: \"Ghostwriting\",\n    subcategory: \"Ethics\",\n    tags: [\"ghostwriting\", \"privacy\", \"truth\", \"ethics\"],\n    persona: \"coach\",\n    targetRole: \"ghostwriter\",\n    isFeatured: false,\n  },\n  {\n    title: \"Self-Help Book Ghostwriting\",\n    content: \"Self-help needs: client's expertise showcased, actionable advice, transformational framework, relatable examples. Make expertise accessible and applicable.\",\n    category: \"Ghostwriting\",\n    subcategory: \"Self-Help\",\n    tags: [\"ghostwriting\", \"self-help\", \"advice\", \"transformation\"],\n    persona: \"any\",\n    targetRole: \"ghostwriter\",\n    isFeatured: false,\n  },\n  {\n    title: \"Managing Client Expectations\",\n    content: \"Set realistic: timeline, revision rounds, creative input level. Educate client on process. Prevent disappointment through clear communication upfront.\",\n    category: \"Ghostwriting\",\n    subcategory: \"Business\",\n    tags: [\"ghostwriting\", \"expectations\", \"communication\", \"management\"],\n    persona: \"coach\",\n    targetRole: \"ghostwriter\",\n    isFeatured: false,\n  },\n  {\n    title: \"Fiction Ghostwriting Challenges\",\n    content: \"Fiction ghostwriting requires: understanding client's vision for plot/characters, maintaining their intended themes, writing in genre they specify. Serve their story.\",\n    category: \"Ghostwriting\",\n    subcategory: \"Fiction\",\n    tags: [\"ghostwriting\", \"fiction\", \"vision\", \"service\"],\n    persona: \"any\",\n    targetRole: \"ghostwriter\",\n    isFeatured: false,\n  },\n  {\n    title: \"Ghostwriting Multiple Voices\",\n    content: \"If ghostwriting for multiple clients, maintain: separate voice files, distinct style guides, clear mental separation. Don't bleed voices between projects.\",\n    category: \"Ghostwriting\",\n    subcategory: \"Voice Matching\",\n    tags: [\"ghostwriting\", \"multiple voices\", \"separation\", \"organization\"],\n    persona: \"any\",\n    targetRole: \"ghostwriter\",\n    isFeatured: false,\n  },\n  {\n    title: \"Ghostwriting Revision Handling\",\n    content: \"Client requests revisions: determine if it's style preference or voice mismatch, educate on what works, compromise when needed. Serve client while maintaining quality.\",\n    category: \"Ghostwriting\",\n    subcategory: \"Revision\",\n    tags: [\"ghostwriting\", \"revisions\", \"client feedback\", \"compromise\"],\n    persona: \"coach\",\n    targetRole: \"ghostwriter\",\n    isFeatured: false,\n  },\n  {\n    title: \"Spiritual/Inspirational Ghostwriting\",\n    content: \"Spiritual books need: genuine feeling, personal revelation, universal truth, respectful handling of faith. Make it authentic to client's beliefs.\",\n    category: \"Ghostwriting\",\n    subcategory: \"Spiritual\",\n    tags: [\"ghostwriting\", \"spiritual\", \"faith\", \"authenticity\"],\n    persona: \"any\",\n    targetRole: \"ghostwriter\",\n    isFeatured: false,\n  },\n  {\n    title: \"Sports Biography Ghostwriting\",\n    content: \"Athlete stories need: competition drama, training details, victory/defeat emotions, life beyond sport. Show person behind the performance.\",\n    category: \"Ghostwriting\",\n    subcategory: \"Biography\",\n    tags: [\"ghostwriting\", \"sports\", \"athlete\", \"biography\"],\n    persona: \"any\",\n    targetRole: \"ghostwriter\",\n    isFeatured: false,\n  },\n  {\n    title: \"Ghostwriting Content Calendar\",\n    content: \"For blog/content ghostwriting: create editorial calendar, maintain consistent voice across pieces, meet deadlines reliably. Be the client's reliable content partner.\",\n    category: \"Ghostwriting\",\n    subcategory: \"Content Writing\",\n    tags: [\"ghostwriting\", \"content\", \"calendar\", \"consistency\"],\n    persona: \"any\",\n    targetRole: \"ghostwriter\",\n    isFeatured: false,\n  },\n  {\n    title: \"Academic/Technical Ghostwriting\",\n    content: \"Academic writing needs: rigorous research, proper citations, field-appropriate tone, complex ideas clarified. Maintain scholarly standards.\",\n    category: \"Ghostwriting\",\n    subcategory: \"Academic\",\n    tags: [\"ghostwriting\", \"academic\", \"technical\", \"research\"],\n    persona: \"any\",\n    targetRole: \"ghostwriter\",\n    isFeatured: false,\n  },\n  {\n    title: \"Handling Client's Writing Attempts\",\n    content: \"Client provides rough draft: preserve good ideas, salvage usable material, completely rewrite if needed. Be tactful about what doesn't work.\",\n    category: \"Ghostwriting\",\n    subcategory: \"Collaboration\",\n    tags: [\"ghostwriting\", \"drafts\", \"rewriting\", \"tact\"],\n    persona: \"coach\",\n    targetRole: \"ghostwriter\",\n    isFeatured: false,\n  },\n  {\n    title: \"Ghostwriting Emotional Labor\",\n    content: \"Ghostwriting is emotional labor: entering client's life/mind, feeling their stories, maintaining boundaries. Practice self-care. Don't carry every story home.\",\n    category: \"Ghostwriting\",\n    subcategory: \"Self-Care\",\n    tags: [\"ghostwriting\", \"emotional labor\", \"boundaries\", \"self-care\"],\n    persona: \"coach\",\n    targetRole: \"ghostwriter\",\n    isFeatured: false,\n  },\n  {\n    title: \"Series Consistency Ghostwriting\",\n    content: \"For book series: maintain character voices, track details across books, keep energy consistent. Create series bible for continuity.\",\n    category: \"Ghostwriting\",\n    subcategory: \"Series\",\n    tags: [\"ghostwriting\", \"series\", \"consistency\", \"continuity\"],\n    persona: \"any\",\n    targetRole: \"ghostwriter\",\n    isFeatured: false,\n  },\n  {\n    title: \"Cookbook Ghostwriting\",\n    content: \"Chef/food expert books need: recipes tested and clear, personal stories around food, culinary expertise shown, accessible instructions. Make expertise practical.\",\n    category: \"Ghostwriting\",\n    subcategory: \"Cookbook\",\n    tags: [\"ghostwriting\", \"cookbook\", \"recipes\", \"food\"],\n    persona: \"any\",\n    targetRole: \"ghostwriter\",\n    isFeatured: false,\n  },\n  {\n    title: \"Ghostwriting Speed and Quality\",\n    content: \"Balance: fast turnaround clients expect with quality you deliver. Develop efficient processes without sacrificing standards. Speed comes with practice.\",\n    category: \"Ghostwriting\",\n    subcategory: \"Efficiency\",\n    tags: [\"ghostwriting\", \"speed\", \"quality\", \"efficiency\"],\n    persona: \"coach\",\n    targetRole: \"ghostwriter\",\n    isFeatured: false,\n  },\n  {\n    title: \"Child's Voice Ghostwriting\",\n    content: \"If ghostwriting for/about children: capture authentic young voice, age-appropriate language/concepts, without condescension. Research how kids actually talk/think.\",\n    category: \"Ghostwriting\",\n    subcategory: \"Voice Matching\",\n    tags: [\"ghostwriting\", \"children\", \"young voice\", \"authenticity\"],\n    persona: \"any\",\n    targetRole: \"ghostwriter\",\n    isFeatured: false,\n  },\n  {\n    title: \"Corporate Communications Ghost\",\n    content: \"Executive communications need: authority, brand consistency, message clarity, appropriate formality. Write for executive's voice and company values.\",\n    category: \"Ghostwriting\",\n    subcategory: \"Corporate\",\n    tags: [\"ghostwriting\", \"corporate\", \"executive\", \"communications\"],\n    persona: \"any\",\n    targetRole: \"ghostwriter\",\n    isFeatured: false,\n  },\n  {\n    title: \"Ghostwriting Pain Points\",\n    content: \"Help client identify: what they want to say, why it matters, who needs to hear it. Extract meaning from their experiences they might not see.\",\n    category: \"Ghostwriting\",\n    subcategory: \"Interview\",\n    tags: [\"ghostwriting\", \"meaning\", \"extraction\", \"purpose\"],\n    persona: \"coach\",\n    targetRole: \"ghostwriter\",\n    isFeatured: true,\n  },\n  {\n    title: \"Ghostwriting Platform-Specific\",\n    content: \"Different platforms need different approaches: LinkedIn professional, Twitter concise, blog conversational. Adapt voice to platform while maintaining core identity.\",\n    category: \"Ghostwriting\",\n    subcategory: \"Platform\",\n    tags: [\"ghostwriting\", \"platform\", \"social media\", \"adaptation\"],\n    persona: \"any\",\n    targetRole: \"ghostwriter\",\n    isFeatured: false,\n  },\n  {\n    title: \"Memoir Timeline Organization\",\n    content: \"Organize client's life story: chronological, thematic, or hybrid. Create timeline of key events. Decide: what to include, what to summarize, what to skip.\",\n    category: \"Ghostwriting\",\n    subcategory: \"Memoir/Autobiography\",\n  ","size_bytes":360000},"client/src/stores/ai-modal-store.ts":{"content":"import { create } from 'zustand';\n\ninterface AiModalStore {\n  isOpen: boolean;\n  prefillData: {\n    persona: \"muse\" | \"editor\" | \"coach\" | null;\n    prompt: string;\n    projectId?: string;\n  } | null;\n  openWithPrompt: (data: { persona: \"muse\" | \"editor\" | \"coach\" | null; prompt: string; projectId?: string }) => void;\n  close: () => void;\n  clearPrefill: () => void;\n}\n\nexport const useAiModalStore = create<AiModalStore>((set) => ({\n  isOpen: false,\n  prefillData: null,\n  openWithPrompt: (data) => set({ isOpen: true, prefillData: data }),\n  close: () => set({ isOpen: false }),\n  clearPrefill: () => set({ prefillData: null }),\n}));\n","size_bytes":638},"server/brevoService.ts":{"content":"import * as brevo from '@getbrevo/brevo';\nimport { db } from './db';\nimport { emails, insertEmailSchema } from '@shared/schema';\nimport { eq, and, gte, lte, desc } from 'drizzle-orm';\n\nlet apiInstance: brevo.TransactionalEmailsApi | null = null;\n\nexport function getBrevoClient(): brevo.TransactionalEmailsApi {\n  if (!process.env.BREVO_API_KEY) {\n    throw new Error('BREVO_API_KEY environment variable is not set. Please configure your Brevo API key.');\n  }\n\n  if (!apiInstance) {\n    apiInstance = new brevo.TransactionalEmailsApi();\n    apiInstance.setApiKey(brevo.TransactionalEmailsApiApiKeys.apiKey, process.env.BREVO_API_KEY);\n  }\n\n  return apiInstance;\n}\n\ninterface SendEmailParams {\n  userId: string;\n  to: string[];\n  subject: string;\n  htmlContent: string;\n  textContent?: string;\n  cc?: string[];\n  bcc?: string[];\n  templateId?: number;\n  templateParams?: Record<string, any>;\n}\n\nexport async function sendEmail(params: SendEmailParams) {\n  const {\n    userId,\n    to,\n    subject,\n    htmlContent,\n    textContent,\n    cc,\n    bcc,\n    templateId,\n    templateParams,\n  } = params;\n\n  let brevoMessageId: string | null = null;\n  let status: 'sent' | 'failed' = 'sent';\n  let error: string | null = null;\n\n  try {\n    const client = getBrevoClient();\n    \n    const sendSmtpEmail = new brevo.SendSmtpEmail();\n    sendSmtpEmail.to = to.map(email => ({ email }));\n    sendSmtpEmail.subject = subject;\n    sendSmtpEmail.htmlContent = htmlContent;\n    \n    if (textContent) {\n      sendSmtpEmail.textContent = textContent;\n    }\n    \n    if (cc && cc.length > 0) {\n      sendSmtpEmail.cc = cc.map(email => ({ email }));\n    }\n    \n    if (bcc && bcc.length > 0) {\n      sendSmtpEmail.bcc = bcc.map(email => ({ email }));\n    }\n    \n    if (templateId) {\n      sendSmtpEmail.templateId = templateId;\n    }\n    \n    if (templateParams) {\n      sendSmtpEmail.params = templateParams;\n    }\n\n    const response = await client.sendTransacEmail(sendSmtpEmail);\n    brevoMessageId = (response.body as any)?.messageId || null;\n  } catch (err: any) {\n    status = 'failed';\n    error = err.message || 'Failed to send email via Brevo';\n    console.error('Brevo email send error:', err);\n  }\n\n  const emailData = {\n    userId,\n    to,\n    cc: cc || null,\n    bcc: bcc || null,\n    subject,\n    htmlContent,\n    textContent: textContent || null,\n    templateId: templateId || null,\n    templateParams: templateParams || null,\n    status,\n    brevoMessageId,\n    error,\n    sentAt: status === 'sent' ? new Date() : null,\n  };\n\n  const validatedData = insertEmailSchema.parse(emailData);\n\n  const emailRecord = await db.insert(emails).values(validatedData).returning();\n\n  return emailRecord[0];\n}\n\ninterface BatchEmailParams {\n  userId: string;\n  emails: Array<{\n    to: string[];\n    subject: string;\n    htmlContent: string;\n    textContent?: string;\n    cc?: string[];\n    bcc?: string[];\n    templateId?: number;\n    templateParams?: Record<string, any>;\n  }>;\n}\n\nexport async function sendBatchEmails(params: BatchEmailParams) {\n  const { userId, emails: emailList } = params;\n  const results = [];\n\n  for (const emailData of emailList) {\n    try {\n      const emailDataToValidate = {\n        userId,\n        to: emailData.to,\n        cc: emailData.cc || null,\n        bcc: emailData.bcc || null,\n        subject: emailData.subject,\n        htmlContent: emailData.htmlContent,\n        textContent: emailData.textContent || null,\n        templateId: emailData.templateId || null,\n        templateParams: emailData.templateParams || null,\n        status: 'draft' as const,\n        brevoMessageId: null,\n        error: null,\n        sentAt: null,\n        scheduledAt: null,\n      };\n\n      insertEmailSchema.parse(emailDataToValidate);\n\n      const result = await sendEmail({\n        userId,\n        ...emailData,\n      });\n\n      const success = result.status !== 'failed';\n      results.push({ success, email: result });\n    } catch (err: any) {\n      results.push({ \n        success: false, \n        error: err.message || 'Failed to send email',\n        emailData \n      });\n    }\n  }\n\n  return results;\n}\n\ninterface ScheduleEmailParams extends SendEmailParams {\n  scheduledAt: Date;\n}\n\nexport async function scheduleEmail(params: ScheduleEmailParams) {\n  const {\n    userId,\n    to,\n    subject,\n    htmlContent,\n    textContent,\n    cc,\n    bcc,\n    templateId,\n    templateParams,\n    scheduledAt,\n  } = params;\n\n  if (scheduledAt <= new Date()) {\n    throw new Error('scheduledAt must be in the future');\n  }\n\n  const emailData = {\n    userId,\n    to,\n    cc: cc || null,\n    bcc: bcc || null,\n    subject,\n    htmlContent,\n    textContent: textContent || null,\n    templateId: templateId || null,\n    templateParams: templateParams || null,\n    status: 'scheduled' as const,\n    scheduledAt,\n    brevoMessageId: null,\n    error: null,\n    sentAt: null,\n  };\n\n  const validatedData = insertEmailSchema.parse(emailData);\n\n  const emailRecord = await db.insert(emails).values(validatedData).returning();\n\n  return emailRecord[0];\n}\n\nexport async function getEmailStatus(emailId: string) {\n  const emailRecord = await db.query.emails.findFirst({\n    where: eq(emails.id, emailId),\n  });\n\n  if (!emailRecord) {\n    throw new Error(`Email with ID ${emailId} not found`);\n  }\n\n  return emailRecord;\n}\n\ninterface ListEmailsFilters {\n  status?: 'draft' | 'scheduled' | 'sent' | 'failed';\n  dateRange?: {\n    from?: Date;\n    to?: Date;\n  };\n  limit?: number;\n  offset?: number;\n}\n\nexport async function listUserEmails(userId: string, filters?: ListEmailsFilters) {\n  const conditions = [eq(emails.userId, userId)];\n\n  if (filters?.status) {\n    conditions.push(eq(emails.status, filters.status));\n  }\n\n  if (filters?.dateRange?.from) {\n    conditions.push(gte(emails.createdAt, filters.dateRange.from));\n  }\n\n  if (filters?.dateRange?.to) {\n    conditions.push(lte(emails.createdAt, filters.dateRange.to));\n  }\n\n  const limit = filters?.limit || 50;\n  const offset = filters?.offset || 0;\n\n  const emailRecords = await db.query.emails.findMany({\n    where: conditions.length > 1 ? and(...conditions) : conditions[0],\n    orderBy: [desc(emails.createdAt)],\n    limit,\n    offset,\n  });\n\n  const totalCount = await db.query.emails.findMany({\n    where: conditions.length > 1 ? and(...conditions) : conditions[0],\n  });\n\n  return {\n    emails: emailRecords,\n    total: totalCount.length,\n    limit,\n    offset,\n  };\n}\n","size_bytes":6413},"client/src/pages/emails.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Sidebar from \"@/components/sidebar\";\nimport { \n  Mail, \n  Plus, \n  Send, \n  Clock, \n  Trash2, \n  Eye,\n  Calendar,\n  Filter,\n  ChevronLeft,\n  ChevronRight,\n  Loader2\n} from \"lucide-react\";\nimport { Email, insertEmailSchema } from \"@shared/schema\";\n\nconst sendEmailFormSchema = insertEmailSchema.extend({\n  to: z.string().min(1, \"At least one recipient is required\"),\n  cc: z.string().optional(),\n  bcc: z.string().optional(),\n}).omit({ userId: true, status: true, brevoMessageId: true, error: true, sentAt: true, scheduledAt: true, templateId: true, templateParams: true });\n\nconst scheduleEmailFormSchema = sendEmailFormSchema.extend({\n  scheduledAt: z.string().min(1, \"Scheduled date is required\").refine((val) => {\n    const scheduledDate = new Date(val);\n    const now = new Date();\n    return scheduledDate > now;\n  }, \"Scheduled date must be in the future\")\n});\n\ntype SendEmailFormData = {\n  to: string;\n  cc?: string;\n  bcc?: string;\n  subject: string;\n  htmlContent: string;\n  textContent?: string;\n};\n\ntype ScheduleEmailFormData = SendEmailFormData & {\n  scheduledAt: string;\n};\n\ntype BatchEmailEntry = {\n  to: string;\n  subject: string;\n  htmlContent: string;\n};\n\nfunction getStatusBadgeVariant(status: string) {\n  switch (status) {\n    case 'sent':\n      return 'default';\n    case 'scheduled':\n      return 'secondary';\n    case 'failed':\n      return 'destructive';\n    case 'draft':\n      return 'outline';\n    default:\n      return 'outline';\n  }\n}\n\nexport default function Emails() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n  const [selectedTab, setSelectedTab] = useState(\"send\");\n  \n  // Batch send state\n  const [batchEmails, setBatchEmails] = useState<BatchEmailEntry[]>([{ to: \"\", subject: \"\", htmlContent: \"\" }]);\n  \n  // Email history state\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const [currentPage, setCurrentPage] = useState(1);\n  const [selectedEmail, setSelectedEmail] = useState<Email | null>(null);\n  const [showEmailDetail, setShowEmailDetail] = useState(false);\n  const pageLimit = 10;\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  // Send Email Form\n  const sendEmailForm = useForm<SendEmailFormData>({\n    resolver: zodResolver(sendEmailFormSchema),\n    defaultValues: {\n      to: \"\",\n      cc: \"\",\n      bcc: \"\",\n      subject: \"\",\n      htmlContent: \"\",\n      textContent: \"\",\n    },\n  });\n\n  // Schedule Email Form\n  const scheduleEmailForm = useForm<ScheduleEmailFormData>({\n    resolver: zodResolver(scheduleEmailFormSchema),\n    defaultValues: {\n      to: \"\",\n      cc: \"\",\n      bcc: \"\",\n      subject: \"\",\n      htmlContent: \"\",\n      textContent: \"\",\n      scheduledAt: \"\",\n    },\n  });\n\n  // Query for email history\n  const { data: emailsData, isLoading: emailsLoading } = useQuery<{ emails: Email[], totalPages: number }>({\n    queryKey: ['/api/emails', { status: statusFilter === 'all' ? undefined : statusFilter, page: currentPage, limit: pageLimit }],\n    enabled: isAuthenticated && selectedTab === \"history\",\n    retry: false,\n  });\n\n  const emails = emailsData?.emails || [];\n  const totalPages = emailsData?.totalPages || 1;\n\n  // Send Email Mutation\n  const sendEmailMutation = useMutation({\n    mutationFn: async (data: SendEmailFormData) => {\n      await apiRequest(\"POST\", \"/api/emails/send\", {\n        to: data.to.split(',').map(e => e.trim()),\n        cc: data.cc ? data.cc.split(',').map(e => e.trim()) : undefined,\n        bcc: data.bcc ? data.bcc.split(',').map(e => e.trim()) : undefined,\n        subject: data.subject,\n        htmlContent: data.htmlContent,\n        textContent: data.textContent || undefined,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/emails'] });\n      sendEmailForm.reset();\n      toast({\n        title: \"Success\",\n        description: \"Email sent successfully!\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to send email. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Batch Send Mutation\n  const batchSendMutation = useMutation({\n    mutationFn: async (emails: BatchEmailEntry[]) => {\n      const response = await apiRequest(\"POST\", \"/api/emails/batch\", {\n        emails: emails.map(e => ({\n          to: e.to.split(',').map(email => email.trim()),\n          subject: e.subject,\n          htmlContent: e.htmlContent,\n        }))\n      });\n      return response;\n    },\n    onSuccess: (data: any) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/emails'] });\n      setBatchEmails([{ to: \"\", subject: \"\", htmlContent: \"\" }]);\n      \n      const successCount = data.results?.filter((r: any) => r.success).length || 0;\n      const failureCount = data.results?.filter((r: any) => !r.success).length || 0;\n      \n      toast({\n        title: \"Batch Send Complete\",\n        description: `Successfully sent ${successCount} emails. ${failureCount > 0 ? `${failureCount} failed.` : ''}`,\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to send batch emails. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Schedule Email Mutation\n  const scheduleEmailMutation = useMutation({\n    mutationFn: async (data: ScheduleEmailFormData) => {\n      await apiRequest(\"POST\", \"/api/emails/schedule\", {\n        to: data.to.split(',').map(e => e.trim()),\n        cc: data.cc ? data.cc.split(',').map(e => e.trim()) : undefined,\n        bcc: data.bcc ? data.bcc.split(',').map(e => e.trim()) : undefined,\n        subject: data.subject,\n        htmlContent: data.htmlContent,\n        textContent: data.textContent || undefined,\n        scheduledAt: new Date(data.scheduledAt).toISOString(),\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/emails'] });\n      scheduleEmailForm.reset();\n      toast({\n        title: \"Success\",\n        description: \"Email scheduled successfully!\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to schedule email. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // View Email Details Mutation\n  const viewEmailMutation = useMutation({\n    mutationFn: async (emailId: string) => {\n      const response = await fetch(`/api/emails/${emailId}`, {\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(`${response.status}: ${response.statusText}`);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setSelectedEmail(data);\n      setShowEmailDetail(true);\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to load email details.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSendEmail = (data: SendEmailFormData) => {\n    sendEmailMutation.mutate(data);\n  };\n\n  const handleScheduleEmail = (data: ScheduleEmailFormData) => {\n    scheduleEmailMutation.mutate(data);\n  };\n\n  const handleBatchSend = () => {\n    const validEmails = batchEmails.filter(e => e.to && e.subject && e.htmlContent);\n    if (validEmails.length === 0) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in at least one complete email entry.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    batchSendMutation.mutate(validEmails);\n  };\n\n  const addBatchEntry = () => {\n    setBatchEmails([...batchEmails, { to: \"\", subject: \"\", htmlContent: \"\" }]);\n  };\n\n  const removeBatchEntry = (index: number) => {\n    if (batchEmails.length > 1) {\n      setBatchEmails(batchEmails.filter((_, i) => i !== index));\n    }\n  };\n\n  const updateBatchEntry = (index: number, field: keyof BatchEmailEntry, value: string) => {\n    const updated = [...batchEmails];\n    updated[index][field] = value;\n    setBatchEmails(updated);\n  };\n\n  const handleViewEmail = (emailId: string) => {\n    viewEmailMutation.mutate(emailId);\n  };\n\n  if (!isAuthenticated || isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <Sidebar \n        collapsed={sidebarCollapsed} \n        onToggleCollapse={() => setSidebarCollapsed(!sidebarCollapsed)}\n        currentPath=\"/emails\"\n      />\n      \n      <main className=\"flex-1 flex flex-col overflow-hidden\">\n        {/* Top Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Mail className=\"h-6 w-6 text-primary\" />\n              <h1 className=\"text-2xl font-semibold text-card-foreground\" data-testid=\"text-page-title\">\n                Email Management\n              </h1>\n            </div>\n          </div>\n        </header>\n\n        {/* Email Management Content */}\n        <div className=\"flex-1 overflow-auto p-6\">\n          <Tabs value={selectedTab} onValueChange={setSelectedTab} className=\"w-full\" data-testid=\"tabs-email-management\">\n            <TabsList className=\"grid w-full max-w-2xl grid-cols-4 mb-6\" data-testid=\"tabs-list\">\n              <TabsTrigger value=\"send\" data-testid=\"tab-send-email\">\n                <Send className=\"h-4 w-4 mr-2\" />\n                Send Email\n              </TabsTrigger>\n              <TabsTrigger value=\"batch\" data-testid=\"tab-batch-send\">\n                <Mail className=\"h-4 w-4 mr-2\" />\n                Batch Send\n              </TabsTrigger>\n              <TabsTrigger value=\"schedule\" data-testid=\"tab-schedule-email\">\n                <Clock className=\"h-4 w-4 mr-2\" />\n                Schedule\n              </TabsTrigger>\n              <TabsTrigger value=\"history\" data-testid=\"tab-email-history\">\n                <Calendar className=\"h-4 w-4 mr-2\" />\n                History\n              </TabsTrigger>\n            </TabsList>\n\n            {/* Send Email Tab */}\n            <TabsContent value=\"send\" data-testid=\"content-send-email\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Send Email</CardTitle>\n                  <CardDescription>Send a single email to one or more recipients</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <Form {...sendEmailForm}>\n                    <form onSubmit={sendEmailForm.handleSubmit(handleSendEmail)} className=\"space-y-4\">\n                      <FormField\n                        control={sendEmailForm.control}\n                        name=\"to\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>To (comma-separated)</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"recipient1@example.com, recipient2@example.com\" \n                                {...field}\n                                data-testid=\"input-to\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <FormField\n                          control={sendEmailForm.control}\n                          name=\"cc\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>CC (optional)</FormLabel>\n                              <FormControl>\n                                <Input \n                                  placeholder=\"cc@example.com\" \n                                  {...field}\n                                  data-testid=\"input-cc\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={sendEmailForm.control}\n                          name=\"bcc\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>BCC (optional)</FormLabel>\n                              <FormControl>\n                                <Input \n                                  placeholder=\"bcc@example.com\" \n                                  {...field}\n                                  data-testid=\"input-bcc\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <FormField\n                        control={sendEmailForm.control}\n                        name=\"subject\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Subject</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"Email subject\" \n                                {...field}\n                                data-testid=\"input-subject\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={sendEmailForm.control}\n                        name=\"htmlContent\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>HTML Content</FormLabel>\n                            <FormControl>\n                              <Textarea \n                                placeholder=\"Email content (HTML supported)\" \n                                rows={8}\n                                {...field}\n                                data-testid=\"textarea-html-content\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={sendEmailForm.control}\n                        name=\"textContent\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Text Content (optional)</FormLabel>\n                            <FormControl>\n                              <Textarea \n                                placeholder=\"Plain text version (optional)\" \n                                rows={4}\n                                {...field}\n                                data-testid=\"textarea-text-content\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <Button \n                        type=\"submit\" \n                        disabled={sendEmailMutation.isPending}\n                        data-testid=\"button-send-email\"\n                      >\n                        {sendEmailMutation.isPending ? (\n                          <>\n                            <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                            Sending...\n                          </>\n                        ) : (\n                          <>\n                            <Send className=\"mr-2 h-4 w-4\" />\n                            Send Email\n                          </>\n                        )}\n                      </Button>\n                    </form>\n                  </Form>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Batch Send Tab */}\n            <TabsContent value=\"batch\" data-testid=\"content-batch-send\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Batch Send Emails</CardTitle>\n                  <CardDescription>Send multiple emails at once</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  {batchEmails.map((email, index) => (\n                    <Card key={index} className=\"p-4\" data-testid={`card-batch-email-${index}`}>\n                      <div className=\"space-y-4\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <h3 className=\"text-sm font-medium\">Email {index + 1}</h3>\n                          {batchEmails.length > 1 && (\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => removeBatchEntry(index)}\n                              data-testid={`button-remove-batch-${index}`}\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          )}\n                        </div>\n\n                        <div>\n                          <Label htmlFor={`batch-to-${index}`}>To (comma-separated)</Label>\n                          <Input\n                            id={`batch-to-${index}`}\n                            value={email.to}\n                            onChange={(e) => updateBatchEntry(index, 'to', e.target.value)}\n                            placeholder=\"recipient@example.com\"\n                            data-testid={`input-batch-to-${index}`}\n                          />\n                        </div>\n\n                        <div>\n                          <Label htmlFor={`batch-subject-${index}`}>Subject</Label>\n                          <Input\n                            id={`batch-subject-${index}`}\n                            value={email.subject}\n                            onChange={(e) => updateBatchEntry(index, 'subject', e.target.value)}\n                            placeholder=\"Email subject\"\n                            data-testid={`input-batch-subject-${index}`}\n                          />\n                        </div>\n\n                        <div>\n                          <Label htmlFor={`batch-content-${index}`}>HTML Content</Label>\n                          <Textarea\n                            id={`batch-content-${index}`}\n                            value={email.htmlContent}\n                            onChange={(e) => updateBatchEntry(index, 'htmlContent', e.target.value)}\n                            placeholder=\"Email content\"\n                            rows={4}\n                            data-testid={`textarea-batch-content-${index}`}\n                          />\n                        </div>\n                      </div>\n                    </Card>\n                  ))}\n\n                  <div className=\"flex gap-2\">\n                    <Button\n                      variant=\"outline\"\n                      onClick={addBatchEntry}\n                      data-testid=\"button-add-batch-entry\"\n                    >\n                      <Plus className=\"mr-2 h-4 w-4\" />\n                      Add Another Email\n                    </Button>\n\n                    <Button\n                      onClick={handleBatchSend}\n                      disabled={batchSendMutation.isPending}\n                      data-testid=\"button-send-batch\"\n                    >\n                      {batchSendMutation.isPending ? (\n                        <>\n                          <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                          Sending...\n                        </>\n                      ) : (\n                        <>\n                          <Send className=\"mr-2 h-4 w-4\" />\n                          Send All Emails\n                        </>\n                      )}\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Schedule Email Tab */}\n            <TabsContent value=\"schedule\" data-testid=\"content-schedule-email\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Schedule Email</CardTitle>\n                  <CardDescription>Schedule an email to be sent at a future date and time</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <Form {...scheduleEmailForm}>\n                    <form onSubmit={scheduleEmailForm.handleSubmit(handleScheduleEmail)} className=\"space-y-4\">\n                      <FormField\n                        control={scheduleEmailForm.control}\n                        name=\"to\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>To (comma-separated)</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"recipient1@example.com, recipient2@example.com\" \n                                {...field}\n                                data-testid=\"input-schedule-to\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <FormField\n                          control={scheduleEmailForm.control}\n                          name=\"cc\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>CC (optional)</FormLabel>\n                              <FormControl>\n                                <Input \n                                  placeholder=\"cc@example.com\" \n                                  {...field}\n                                  data-testid=\"input-schedule-cc\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={scheduleEmailForm.control}\n                          name=\"bcc\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>BCC (optional)</FormLabel>\n                              <FormControl>\n                                <Input \n                                  placeholder=\"bcc@example.com\" \n                                  {...field}\n                                  data-testid=\"input-schedule-bcc\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <FormField\n                        control={scheduleEmailForm.control}\n                        name=\"subject\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Subject</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"Email subject\" \n                                {...field}\n                                data-testid=\"input-schedule-subject\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={scheduleEmailForm.control}\n                        name=\"scheduledAt\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Schedule Date & Time</FormLabel>\n                            <FormControl>\n                              <Input \n                                type=\"datetime-local\"\n                                {...field}\n                                data-testid=\"input-scheduled-at\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={scheduleEmailForm.control}\n                        name=\"htmlContent\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>HTML Content</FormLabel>\n                            <FormControl>\n                              <Textarea \n                                placeholder=\"Email content (HTML supported)\" \n                                rows={8}\n                                {...field}\n                                data-testid=\"textarea-schedule-html-content\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={scheduleEmailForm.control}\n                        name=\"textContent\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Text Content (optional)</FormLabel>\n                            <FormControl>\n                              <Textarea \n                                placeholder=\"Plain text version (optional)\" \n                                rows={4}\n                                {...field}\n                                data-testid=\"textarea-schedule-text-content\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <Button \n                        type=\"submit\" \n                        disabled={scheduleEmailMutation.isPending}\n                        data-testid=\"button-schedule-email\"\n                      >\n                        {scheduleEmailMutation.isPending ? (\n                          <>\n                            <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                            Scheduling...\n                          </>\n                        ) : (\n                          <>\n                            <Clock className=\"mr-2 h-4 w-4\" />\n                            Schedule Email\n                          </>\n                        )}\n                      </Button>\n                    </form>\n                  </Form>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Email History Tab */}\n            <TabsContent value=\"history\" data-testid=\"content-email-history\">\n              <Card>\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <CardTitle>Email History</CardTitle>\n                      <CardDescription>View and manage your sent and scheduled emails</CardDescription>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Filter className=\"h-4 w-4 text-muted-foreground\" />\n                      <Select value={statusFilter} onValueChange={setStatusFilter}>\n                        <SelectTrigger className=\"w-[150px]\" data-testid=\"select-status-filter\">\n                          <SelectValue placeholder=\"Filter by status\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"all\" data-testid=\"filter-all\">All</SelectItem>\n                          <SelectItem value=\"draft\" data-testid=\"filter-draft\">Draft</SelectItem>\n                          <SelectItem value=\"scheduled\" data-testid=\"filter-scheduled\">Scheduled</SelectItem>\n                          <SelectItem value=\"sent\" data-testid=\"filter-sent\">Sent</SelectItem>\n                          <SelectItem value=\"failed\" data-testid=\"filter-failed\">Failed</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  {emailsLoading ? (\n                    <div className=\"flex items-center justify-center py-8\" data-testid=\"loading-emails\">\n                      <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n                    </div>\n                  ) : emails.length === 0 ? (\n                    <div className=\"text-center py-8\" data-testid=\"text-no-emails\">\n                      <Mail className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                      <h3 className=\"text-lg font-medium text-card-foreground mb-2\">No emails found</h3>\n                      <p className=\"text-muted-foreground\">Send your first email to see it here</p>\n                    </div>\n                  ) : (\n                    <>\n                      <Table>\n                        <TableHeader>\n                          <TableRow>\n                            <TableHead>Recipient</TableHead>\n                            <TableHead>Subject</TableHead>\n                            <TableHead>Status</TableHead>\n                            <TableHead>Date</TableHead>\n                            <TableHead className=\"text-right\">Actions</TableHead>\n                          </TableRow>\n                        </TableHeader>\n                        <TableBody>\n                          {emails.map((email: Email) => (\n                            <TableRow key={email.id} data-testid={`row-email-${email.id}`}>\n                              <TableCell className=\"font-medium\" data-testid={`cell-recipient-${email.id}`}>\n                                {Array.isArray(email.to) ? email.to[0] : email.to}\n                                {Array.isArray(email.to) && email.to.length > 1 && (\n                                  <span className=\"text-xs text-muted-foreground ml-1\">\n                                    +{email.to.length - 1} more\n                                  </span>\n                                )}\n                              </TableCell>\n                              <TableCell data-testid={`cell-subject-${email.id}`}>\n                                {email.subject}\n                              </TableCell>\n                              <TableCell>\n                                <Badge variant={getStatusBadgeVariant(email.status)} data-testid={`badge-status-${email.id}`}>\n                                  {email.status}\n                                </Badge>\n                              </TableCell>\n                              <TableCell data-testid={`cell-date-${email.id}`}>\n                                {email.sentAt \n                                  ? new Date(email.sentAt).toLocaleString()\n                                  : email.scheduledAt\n                                  ? new Date(email.scheduledAt).toLocaleString()\n                                  : email.createdAt\n                                  ? new Date(email.createdAt).toLocaleString()\n                                  : 'N/A'\n                                }\n                              </TableCell>\n                              <TableCell className=\"text-right\">\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  onClick={() => handleViewEmail(email.id)}\n                                  data-testid={`button-view-${email.id}`}\n                                >\n                                  <Eye className=\"h-4 w-4\" />\n                                </Button>\n                              </TableCell>\n                            </TableRow>\n                          ))}\n                        </TableBody>\n                      </Table>\n\n                      {/* Pagination */}\n                      <div className=\"flex items-center justify-between mt-4\">\n                        <p className=\"text-sm text-muted-foreground\" data-testid=\"text-pagination-info\">\n                          Page {currentPage} of {totalPages}\n                        </p>\n                        <div className=\"flex gap-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => setCurrentPage(p => Math.max(1, p - 1))}\n                            disabled={currentPage === 1}\n                            data-testid=\"button-previous-page\"\n                          >\n                            <ChevronLeft className=\"h-4 w-4\" />\n                            Previous\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => setCurrentPage(p => Math.min(totalPages, p + 1))}\n                            disabled={currentPage === totalPages}\n                            data-testid=\"button-next-page\"\n                          >\n                            Next\n                            <ChevronRight className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </main>\n\n      {/* Email Detail Modal */}\n      <Dialog open={showEmailDetail} onOpenChange={setShowEmailDetail}>\n        <DialogContent className=\"max-w-2xl\" data-testid=\"dialog-email-detail\">\n          <DialogHeader>\n            <DialogTitle>Email Details</DialogTitle>\n            <DialogDescription>View complete email information</DialogDescription>\n          </DialogHeader>\n          {selectedEmail && (\n            <div className=\"space-y-4\">\n              <div>\n                <Label className=\"text-sm font-medium\">Status</Label>\n                <div className=\"mt-1\">\n                  <Badge variant={getStatusBadgeVariant(selectedEmail.status)} data-testid=\"detail-status\">\n                    {selectedEmail.status}\n                  </Badge>\n                </div>\n              </div>\n\n              <div>\n                <Label className=\"text-sm font-medium\">To</Label>\n                <p className=\"text-sm mt-1\" data-testid=\"detail-to\">\n                  {Array.isArray(selectedEmail.to) ? selectedEmail.to.join(', ') : selectedEmail.to}\n                </p>\n              </div>\n\n              {selectedEmail.cc && selectedEmail.cc.length > 0 && (\n                <div>\n                  <Label className=\"text-sm font-medium\">CC</Label>\n                  <p className=\"text-sm mt-1\" data-testid=\"detail-cc\">\n                    {Array.isArray(selectedEmail.cc) ? selectedEmail.cc.join(', ') : selectedEmail.cc}\n                  </p>\n                </div>\n              )}\n\n              {selectedEmail.bcc && selectedEmail.bcc.length > 0 && (\n                <div>\n                  <Label className=\"text-sm font-medium\">BCC</Label>\n                  <p className=\"text-sm mt-1\" data-testid=\"detail-bcc\">\n                    {Array.isArray(selectedEmail.bcc) ? selectedEmail.bcc.join(', ') : selectedEmail.bcc}\n                  </p>\n                </div>\n              )}\n\n              <div>\n                <Label className=\"text-sm font-medium\">Subject</Label>\n                <p className=\"text-sm mt-1\" data-testid=\"detail-subject\">{selectedEmail.subject}</p>\n              </div>\n\n              <div>\n                <Label className=\"text-sm font-medium\">Content</Label>\n                <div \n                  className=\"text-sm mt-1 p-4 bg-muted rounded-lg max-h-64 overflow-auto\"\n                  dangerouslySetInnerHTML={{ __html: selectedEmail.htmlContent }}\n                  data-testid=\"detail-content\"\n                />\n              </div>\n\n              {selectedEmail.scheduledAt && (\n                <div>\n                  <Label className=\"text-sm font-medium\">Scheduled At</Label>\n                  <p className=\"text-sm mt-1\" data-testid=\"detail-scheduled-at\">\n                    {new Date(selectedEmail.scheduledAt).toLocaleString()}\n                  </p>\n                </div>\n              )}\n\n              {selectedEmail.sentAt && (\n                <div>\n                  <Label className=\"text-sm font-medium\">Sent At</Label>\n                  <p className=\"text-sm mt-1\" data-testid=\"detail-sent-at\">\n                    {new Date(selectedEmail.sentAt).toLocaleString()}\n                  </p>\n                </div>\n              )}\n\n              {selectedEmail.error && (\n                <div>\n                  <Label className=\"text-sm font-medium text-destructive\">Error</Label>\n                  <p className=\"text-sm mt-1 text-destructive\" data-testid=\"detail-error\">\n                    {selectedEmail.error}\n                  </p>\n                </div>\n              )}\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":40887}},"version":1}